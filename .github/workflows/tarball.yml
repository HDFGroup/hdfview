name: hdfview tarball

# Triggers the workflow on a call from another workflow
on:
  workflow_call:
    inputs:
      use_ignore:
        description: 'Ignore has changes check'
        type: string
        required: false
        default: check
      use_tag:
        description: 'Release version tag'
        type: string
        required: false
        default: snapshot
      use_environ:
        description: 'Environment to locate files'
        type: string
        required: true
        default: snapshots
    outputs:
      has_changes:
        description: "Whether there were changes the previous day"
        value: ${{ jobs.check_commits.outputs.has_changes }}
      source_base:
        description: "The common version name of the binaries"
        value: ${{ jobs.create_tarball.outputs.source_base }}
      file_base:
        description: "The common base name of the source tarballs"
        value: ${{ jobs.create_tarball.outputs.file_base }}
      file_branch:
        description: "The branch used for the source tarballs"
        value: ${{ jobs.check_commits.outputs.branch_ref }}
      file_sha:
        description: "The sha used for the source tarballs"
        value: ${{ jobs.check_commits.outputs.branch_sha }}

permissions:
  contents: read

# A workflow run is made up of one or more jobs that can run sequentially or
# in parallel
jobs:
  check_commits:
    name: Check for recent commits
    runs-on: ubuntu-latest
    outputs:
      has_changes: ${{ steps.check-new-commits.outputs.has-new-commits }}
      branch_ref: ${{ steps.get-branch-name.outputs.BRANCH_REF }}
      branch_sha: ${{ steps.get-branch-sha.outputs.BRANCH_SHA }}
    steps:
    - uses: actions/checkout@v4

    - name: Get branch name
      id: get-branch-name
      env:
        GITHUB_REF: ${{ github.ref }}
        GITHUB_REF_NAME: ${{ github.ref_name }}
        GITHUB_HEAD_REF: ${{ github.head_ref }}
      #run: echo "${{ env.GITHUB_REF_NAME }} | grep -P '[0-9]+/merge' &> /dev/null && BRANCH_REF=${{ env.GITHUB_HEAD_REF }} || BRANCH_REF=${{ env.GITHUB_REF_NAME }}" >> $GITHUB_OUTPUT
      run: echo "BRANCH_REF=${{ env.GITHUB_HEAD_REF || env.GITHUB_REF_NAME }}" >> $GITHUB_OUTPUT

    - name: Get branch sha
      id: get-branch-sha
      env:
        GITHUB_SHA: ${{ github.sha }}
        GITHUB_WF_SHA: ${{ github.workflow_sha }}
      run: |
        SHORT_SHA=$(echo "${{ env.GITHUB_WF_SHA }}" | cut -c1-7)
        echo "BRANCH_SHA=$SHORT_SHA" >> $GITHUB_OUTPUT

    - name: Check for changed source
      id: check-new-commits
      uses: adriangl/check-new-commits-action@v1
      with:
        seconds: 86400 # One day in seconds
        branch: '${{ steps.get-branch-name.outputs.branch_ref }}'
      if: ${{ (inputs.use_environ == 'snapshots' && inputs.use_ignore == 'check') }}

    - run: echo "You have ${{ steps.check-new-commits.outputs.new-commits-number }} new commit(s) in ${{ steps.get-branch-name.outputs.BRANCH_REF }} âœ…!"
      if: ${{ steps.check-new-commits.outputs.has-new-commits == 'true' }}

    - run: echo "Short commit sha is ${{ steps.get-branch-sha.outputs.BRANCH_SHA }}!"

  create_tarball:
    name: Create a source tarball
    runs-on: ubuntu-latest
    needs: check_commits
    if: ${{ ((inputs.use_environ == 'snapshots') && ((needs.check_commits.outputs.has_changes == 'true') || (inputs.use_ignore == 'ignore'))) || (inputs.use_environ  == 'release') }}
    outputs:
      file_base: ${{ steps.set-file-base.outputs.FILE_BASE }}
      source_base: ${{ steps.version.outputs.TAG_VERSION }}
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Get Sources
        uses: actions/checkout@v4
        with:
          path: hdfsrc

      - name: Read VERSION file
        id: getversion
        run: echo "version=$(cat hdfsrc/VERSION)" >> $GITHUB_OUTPUT

      - name: Retrieve version
        id: version
        run: |
          cd "$GITHUB_WORKSPACE/hdfsrc"
          VERSION_BASE=$(echo "${{ steps.getversion.outputs.version }}" | sed -r "s/.*-([0-9]+\.[0-9]+\.[0-9]+).*/\1/")
          echo "TAG_VERSION=$VERSION_BASE" >> $GITHUB_OUTPUT

      - name: Set file base name
        id: set-file-base
        run: |
          if [[ '${{ inputs.use_environ }}' == 'snapshots' ]]
          then
            FILE_NAME_BASE=$(echo "hdfview-${{ needs.check_commits.outputs.branch_ref }}-${{ needs.check_commits.outputs.branch_sha }}")
          else
            if [[ '${{ inputs.use_tag }}' == 'snapshot' ]]
            then
              FILE_NAME_BASE=$(echo "snapshot")
            else
              FILE_NAME_BASE=$(echo "HDFView-${{ steps.version.outputs.TAG_VERSION }}")
            fi
          fi
          echo "FILE_BASE=$FILE_NAME_BASE" >> $GITHUB_OUTPUT
        shell: bash

      - name: List files in the repository
        run: |
              ls -l ${{ github.workspace }}
              ls $GITHUB_WORKSPACE/hdfsrc

      - name: Save NEWSLETTER
        uses: actions/upload-artifact@v4
        with:
              name: NEWSLETTER
              path: ./hdfsrc/docs/RELEASE.txt
              if-no-files-found: error # 'warn' or 'ignore' are also available, defaults to `warn`

      # Save User Guide
      - name: Save User Guide (Linux)
        uses: actions/upload-artifact@v4
        with:
              name: docs-usersguide
              path: ./hdfsrc/docs/UsersGuide
              if-no-files-found: error # 'warn' or 'ignore' are also available, defaults to `warn`

      - name: Create release source file (tgz and zip)
        id: create-snapshot-files
        if: ${{ (inputs.use_environ == 'release') }}
        run: |
              mv hdfsrc ${{ steps.set-file-base.outputs.FILE_BASE }}
              zip -r ${{ steps.set-file-base.outputs.FILE_BASE }}.zip ./${{ steps.set-file-base.outputs.FILE_BASE }}
              tar -zcvf ${{ steps.set-file-base.outputs.FILE_BASE }}.tar.gz ./${{ steps.set-file-base.outputs.FILE_BASE }}
        shell: bash

      - name: Create snapshot source file (tgz and zip)
        id: create-release-files
        if: ${{ (inputs.use_environ == 'snapshots') }}
        run: |
              zip -r ${{ steps.set-file-base.outputs.FILE_BASE }}.zip ./hdfsrc
              tar -zcvf ${{ steps.set-file-base.outputs.FILE_BASE }}.tar.gz ./hdfsrc
        shell: bash

      - name: Rename release file base name
        id: ren-basename
        if: ${{ (inputs.use_environ == 'release') && (inputs.use_tag  == 'snapshot') }}
        run: |
          mv hdfview-${{ steps.version.outputs.TAG_VERSION }}.tar.gz ${{ inputs.use_tag }}.tar.gz
          mv hdfview-${{ steps.version.outputs.TAG_VERSION }}.zip ${{ inputs.use_tag }}.zip
        shell: bash

      - name: List files in the repository
        run: |
              ls -l ${{ github.workspace }}
              ls $GITHUB_WORKSPACE

      # Save files created by release script
      - name: Save tgz-tarball
        uses: actions/upload-artifact@v4
        with:
              name: tgz-tarball
              path: ${{ steps.set-file-base.outputs.FILE_BASE }}.tar.gz
              if-no-files-found: error # 'warn' or 'ignore' are also available, defaults to `warn`

      - name: Save zip-tarball
        uses: actions/upload-artifact@v4
        with:
              name: zip-tarball
              path: ${{ steps.set-file-base.outputs.FILE_BASE }}.zip
              if-no-files-found: error # 'warn' or 'ignore' are also available, defaults to `warn`
