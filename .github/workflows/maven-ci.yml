name: Maven CI Pipeline

on:
  push:
    branches: [ master-maven, develop, main ]
  pull_request:
    branches: [ master-maven, develop, main ]

permissions:
  contents: read
  checks: write
  pull-requests: write

env:
  # JVM configuration for CI performance
  MAVEN_OPTS: >-
    -Xmx2g
    -Xms1g
    -XX:+UseParallelGC
    -XX:+TieredCompilation
    -XX:TieredStopAtLevel=1
    -Djava.awt.headless=true

jobs:
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    timeout-minutes: 15

    strategy:
      fail-fast: false

    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for better analysis

    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'

    - name: Cache Maven Dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.m2/repository
          !~/.m2/repository/org/hdfgroup
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-maven-

    - name: Cache HDF Libraries
      id: cache-hdf
      uses: actions/cache@v4
      with:
        path: |
          /usr/lib/x86_64-linux-gnu/libhdf*
          /usr/include/hdf*
        key: ${{ runner.os }}-hdf-libs-v1

    - name: Install HDF Libraries
      if: steps.cache-hdf.outputs.cache-hit != 'true'
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          libhdf5-dev \
          libhdf4-dev \
          libhdf5-103 \
          libhdf4-0-alt

        # Verify installation
        ldconfig -p | grep hdf || echo "HDF libraries may not be properly installed"

    - name: Set up build.properties
      run: |
        cat > build.properties << EOF
        # CI Build Properties for HDFView
        # Generated automatically for GitHub Actions

        # HDF5 Configuration
        hdf5.lib.dir=/usr/lib/x86_64-linux-gnu
        hdf5.plugin.dir=/usr/lib/x86_64-linux-gnu/hdf5/plugins

        # HDF4 Configuration (optional for CI)
        hdf.lib.dir=/usr/lib/x86_64-linux-gnu

        # Platform Configuration
        platform.hdf.lib=/usr/lib/x86_64-linux-gnu

        # CI-specific settings
        ci.build=true
        skip.native.tests=false
        EOF

        echo "Generated build.properties for CI:"
        cat build.properties

    - name: Validate Maven Configuration
      run: |
        mvn help:effective-pom -q > effective-pom.log
        echo "Maven configuration validated"
        echo "Active profiles:"
        mvn help:active-profiles

    - name: Maven Compile
      run: |
        echo "::group::Maven Compile"
        mvn clean compile -B \
          -Dmaven.compiler.showDeprecation=false \
          -Dmaven.compiler.showWarnings=false
        echo "::endgroup::"

    - name: Run Unit Tests
      run: |
        echo "::group::Unit Tests (Fast, Parallel)"
        mvn test \
          -Dgroups="unit & fast" \
          -B \
          -Dmaven.test.failure.ignore=false \
          -Djunit.jupiter.execution.parallel.enabled=true \
          -Djunit.jupiter.execution.parallel.mode.default=concurrent
        echo "::endgroup::"

    - name: Run Integration Tests
      run: |
        echo "::group::Integration Tests (Serial)"
        mvn test \
          -Dgroups="integration" \
          -B \
          -Dmaven.test.failure.ignore=false \
          -Djunit.jupiter.execution.parallel.enabled=false
        echo "::endgroup::"

    - name: Package Application
      run: |
        echo "::group::Package Application"
        mvn package -DskipTests -B
        echo "::endgroup::"

    - name: Verify Build Artifacts
      run: |
        echo "Build artifacts created:"
        find . -name "*.jar" -type f | head -10

        echo "Library artifacts:"
        ls -la libs/ || echo "No libs directory found"

        echo "Target artifacts:"
        find target -name "*.jar" -type f 2>/dev/null | head -5 || echo "No target JARs found"

    - name: Test Report
      uses: dorny/test-reporter@v1
      if: success() || failure()
      with:
        name: Maven Test Results
        path: '**/target/surefire-reports/*.xml'
        reporter: java-junit
        fail-on-error: true

    - name: Upload Test Results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-${{ github.run_number }}
        path: |
          **/target/surefire-reports/
          **/target/failsafe-reports/
        retention-days: 30

    - name: Upload Build Artifacts
      uses: actions/upload-artifact@v4
      if: success()
      with:
        name: build-artifacts-${{ github.run_number }}
        path: |
          libs/*.jar
          target/*.jar
          hdfview/target/*.jar
          object/target/*.jar
        retention-days: 7

    - name: Build Summary
      if: always()
      run: |
        echo "## Build Summary" >> $GITHUB_STEP_SUMMARY
        echo "- **Status**: ${{ job.status }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Java Version**: $(java -version 2>&1 | head -n1)" >> $GITHUB_STEP_SUMMARY
        echo "- **Maven Version**: $(mvn --version | head -n1)" >> $GITHUB_STEP_SUMMARY
        echo "- **Build Time**: $(date)" >> $GITHUB_STEP_SUMMARY

        if [ -f target/surefire-reports/TEST-*.xml ]; then
          echo "- **Test Results**: Available in artifacts" >> $GITHUB_STEP_SUMMARY
        fi

        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Artifacts Generated" >> $GITHUB_STEP_SUMMARY
        find . -name "*.jar" -newer build.properties 2>/dev/null | \
          head -5 | sed 's/^/- /' >> $GITHUB_STEP_SUMMARY || \
          echo "- No JAR artifacts found" >> $GITHUB_STEP_SUMMARY