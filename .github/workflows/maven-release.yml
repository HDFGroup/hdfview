name: Maven Release and Artifacts

on:
  push:
    tags:
      - 'v*.*.*'
      - 'release-*'
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Release type'
        required: true
        default: 'snapshot'
        type: choice
        options:
          - snapshot
          - release
          - hotfix
      create_github_release:
        description: 'Create GitHub release'
        required: false
        default: true
        type: boolean

permissions:
  contents: write
  packages: write
  actions: read
  security-events: write

env:
  MAVEN_OPTS: >-
    -Xmx4g
    -Xms2g
    -XX:+UseParallelGC
    -Djava.awt.headless=true

jobs:
  prepare-release:
    name: Prepare Release Artifacts
    runs-on: ubuntu-latest
    timeout-minutes: 30

    outputs:
      version: ${{ steps.version.outputs.version }}
      tag: ${{ steps.version.outputs.tag }}
      is_release: ${{ steps.version.outputs.is_release }}

    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'

    - name: Cache Maven Dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2/repository
        key: ${{ runner.os }}-maven-release-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-maven-

    - name: Install HDF Libraries
      run: |
        sudo apt-get update
        sudo apt-get install -y libhdf5-dev libhdf4-dev

    - name: Set up build.properties
      run: |
        cat > build.properties << EOF
        hdf5.lib.dir=/usr/lib/x86_64-linux-gnu
        hdf5.plugin.dir=/usr/lib/x86_64-linux-gnu/hdf5/plugins
        hdf.lib.dir=/usr/lib/x86_64-linux-gnu
        platform.hdf.lib=/usr/lib/x86_64-linux-gnu
        ci.build=true
        release.build=true
        EOF

    - name: Determine Version and Release Type
      id: version
      run: |
        if [[ "${{ github.event_name }}" == "push" && "${{ github.ref }}" == refs/tags/* ]]; then
          TAG=${GITHUB_REF#refs/tags/}
          VERSION=${TAG#v}
          IS_RELEASE=true
        elif [[ "${{ github.event.inputs.release_type }}" == "release" ]]; then
          VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout | sed 's/-SNAPSHOT//')
          TAG="v${VERSION}"
          IS_RELEASE=true
        else
          VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
          TAG="snapshot-$(date +%Y%m%d-%H%M%S)"
          IS_RELEASE=false
        fi

        echo "version=${VERSION}" >> $GITHUB_OUTPUT
        echo "tag=${TAG}" >> $GITHUB_OUTPUT
        echo "is_release=${IS_RELEASE}" >> $GITHUB_OUTPUT

        echo "Determined version: ${VERSION}"
        echo "Tag: ${TAG}"
        echo "Is release: ${IS_RELEASE}"

    - name: Run Quality Checks
      run: |
        echo "::group::Quality Validation for Release"

        # Run tests
        mvn test -B -Dmaven.test.failure.ignore=false

        # Run quality analysis
        mvn jacoco:prepare-agent test jacoco:report -B

        # Check coverage threshold for release
        if [[ "${{ steps.version.outputs.is_release }}" == "true" ]]; then
          mvn jacoco:check -Djacoco.haltOnFailure=true
        fi

        echo "::endgroup::"

    - name: Build Release Artifacts
      run: |
        echo "::group::Build Release Artifacts"

        # Clean build with all artifacts
        mvn clean package -B \
          -DskipTests \
          -Dmaven.javadoc.skip=false \
          -Dmaven.source.skip=false

        # Create distribution packages
        mvn assembly:single -B -DskipTests || echo "Assembly plugin not configured"

        echo "::endgroup::"

    - name: Generate Release Notes
      id: release-notes
      run: |
        echo "::group::Generate Release Notes"

        RELEASE_NOTES_FILE="release-notes-${{ steps.version.outputs.version }}.md"

        cat > "${RELEASE_NOTES_FILE}" << EOF
        # HDFView Release ${{ steps.version.outputs.version }}

        **Release Date**: $(date '+%Y-%m-%d')
        **Build**: ${{ github.run_number }}
        **Commit**: ${{ github.sha }}

        ## 📦 Artifacts

        ### Application JARs
        EOF

        # List main artifacts
        find . -name "*.jar" -not -path "*/target/lib/*" -not -name "*-tests.jar" | \
          grep -E "(hdfview|object)" | \
          sort | \
          sed 's/^/- `/' | sed 's/$/`/' >> "${RELEASE_NOTES_FILE}"

        cat >> "${RELEASE_NOTES_FILE}" << EOF

        ### Dependencies
        - Java 21+ required
        - HDF5 native libraries required
        - HDF4 native libraries (optional)

        ## 🔧 Installation

        1. Download the appropriate JAR files
        2. Ensure HDF5 native libraries are installed
        3. Run with: \`java -jar hdfview-${{ steps.version.outputs.version }}.jar\`

        ## 📋 Build Information

        - **Maven Version**: $(mvn --version | head -n1)
        - **Java Version**: $(java -version 2>&1 | head -n1)
        - **Platform**: Ubuntu Latest (GitHub Actions)

        ## 🔍 Quality Metrics

        EOF

        # Add coverage information if available
        if [ -f target/site/jacoco/index.html ]; then
          COVERAGE=$(grep -o 'Total[^%]*%' target/site/jacoco/index.html | grep -o '[0-9]*%' | head -1)
          echo "- **Code Coverage**: ${COVERAGE:-Unknown}" >> "${RELEASE_NOTES_FILE}"
        fi

        echo "release_notes_file=${RELEASE_NOTES_FILE}" >> $GITHUB_OUTPUT
        echo "::endgroup::"

    - name: Upload Release Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: release-artifacts-${{ steps.version.outputs.version }}
        path: |
          libs/*.jar
          target/*.jar
          hdfview/target/*.jar
          object/target/*.jar
          !**/*-tests.jar
          !**/original-*.jar
        retention-days: 90

    - name: Upload Release Documentation
      uses: actions/upload-artifact@v4
      with:
        name: release-documentation-${{ steps.version.outputs.version }}
        path: |
          target/site/apidocs/
          ${{ steps.release-notes.outputs.release_notes_file }}
        retention-days: 90

  create-github-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: prepare-release
    if: needs.prepare-release.outputs.is_release == 'true' && (github.event.inputs.create_github_release == 'true' || github.event_name == 'push')

    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Download Release Artifacts
      uses: actions/download-artifact@v4
      with:
        name: release-artifacts-${{ needs.prepare-release.outputs.version }}
        path: ./release-artifacts

    - name: Download Release Documentation
      uses: actions/download-artifact@v4
      with:
        name: release-documentation-${{ needs.prepare-release.outputs.version }}
        path: ./release-docs

    - name: Create GitHub Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ needs.prepare-release.outputs.tag }}
        release_name: HDFView ${{ needs.prepare-release.outputs.version }}
        body_path: ./release-docs/release-notes-${{ needs.prepare-release.outputs.version }}.md
        draft: false
        prerelease: ${{ contains(needs.prepare-release.outputs.version, '-') }}

    - name: Upload Release Assets
      run: |
        # Upload main JAR files to the release
        for jar_file in release-artifacts/*.jar; do
          if [ -f "$jar_file" ]; then
            echo "Uploading: $(basename "$jar_file")"
            gh release upload ${{ needs.prepare-release.outputs.tag }} "$jar_file"
          fi
        done
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  publish-packages:
    name: Publish Maven Packages
    runs-on: ubuntu-latest
    needs: prepare-release
    if: needs.prepare-release.outputs.is_release == 'true'

    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'

    - name: Cache Maven Dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2/repository
        key: ${{ runner.os }}-maven-publish-${{ hashFiles('**/pom.xml') }}

    - name: Install HDF Libraries
      run: |
        sudo apt-get update
        sudo apt-get install -y libhdf5-dev libhdf4-dev

    - name: Set up build.properties
      run: |
        cat > build.properties << EOF
        hdf5.lib.dir=/usr/lib/x86_64-linux-gnu
        hdf.lib.dir=/usr/lib/x86_64-linux-gnu
        platform.hdf.lib=/usr/lib/x86_64-linux-gnu
        ci.build=true
        release.build=true
        EOF

    - name: Configure Maven Settings
      run: |
        mkdir -p ~/.m2
        cat > ~/.m2/settings.xml << EOF
        <settings>
          <servers>
            <server>
              <id>github</id>
              <username>\${env.GITHUB_ACTOR}</username>
              <password>\${env.GITHUB_TOKEN}</password>
            </server>
          </servers>
        </settings>
        EOF

    - name: Publish to GitHub Packages
      run: |
        mvn deploy -B \
          -DskipTests \
          -Dmaven.javadoc.skip=false \
          -Dmaven.source.skip=false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}