<?xml version="1.0" encoding="UTF-8"?>

<project name="HDFView" basedir="." default="main"
    xmlns:fx="javafx:com.sun.javafx.tools.ant"
    xmlns:sonar="antlib:org.sonar.ant"
    xmlns:jacoco="antlib:org.jacoco.ant"
	xmlns:doxygen="antlib:org.doxygen.tools"
    xmlns:if="ant:if"
    xmlns:unless="ant:unless">
    <property environment="env" />

    <!-- Configuration files: -->
    <property file="build.properties" />
    <property file="package.properties" />

    <record name="antoutput.log" action="start" append="${build.antoutput.append}" loglevel="verbose" />

    <property name="sign_state" value="sign" />
    <condition property="sign.enable">
        <equals arg1="${sign_state}" arg2="sign" />
    </condition>
    <!-- MAC signing: -->
    <property name="sign.account" value="${env.SIGNER}" />
    <property name="pass.keychain_key" value="${env.KEYCHAIN_PASSWD}" />
    <property name="name.keychain_key" value="${env.KEYCHAIN_NAME}.keychain" />

    <!-- MAC notary: -->
    <property name="notarize.account" value="${env.NOTARY_USER}" />
    <property name="notarize.keychain_key" value="${env.NOTARY_KEY}" />

    <!-- Get HDFView, HDF4, HDF5 and HDF-Java version information -->
    <loadfile property="app.version" srcFile="${basedir}/VERSION">
        <filterchain>
            <tokenfilter>
                <stringtokenizer delims="-\r\n" suppressdelims="true" />
                <containsregex pattern="[0-9]+\.[0-9]+\.[0-9]+" />
            </tokenfilter>
        </filterchain>
    </loadfile>

    <!-- Optional hdf4 -->
    <property name="hdf4.settings.version" value="${hdf.lib.dir}/libhdf4.settings" />
    <condition property="h4path" value="${hdf.lib.dir}">
        <available file="${hdf4.settings.version}" />
    </condition>

    <property name="h4.object.path" value="hdf/object/h4/**"/>
    <condition property="h4.object.path.files" value="${h4.object.path}.java">
        <isset property="h4path"/>
    </condition>

    <!-- Required hdf5 -->
    <property name="hdf5.settings.version" value="${hdf5.lib.dir}/libhdf5.settings" />
    <condition property="h5path" value="${hdf5.lib.dir}">
        <available file="${hdf5.settings.version}" />
    </condition>

    <property name="h5.object.path" value="hdf/object/h5/**"/>
    <condition property="h5.object.path.files" value="${h5.object.path}.java">
        <isset property="h5path"/>
    </condition>

    <!-- Other types -->
    <property name="fits.object.path" value="hdf/object/fits/**"/>
    <property name="nc2.object.path" value="hdf/object/nc2/**"/>

    <property name="all.object.path" value="${fits.object.path} ${nc2.object.path} ${h4.object.path} ${h5.object.path}"/>

    <property name="hdf.view.path" value="hdf/view/**"/>

    <property name="examples.path" value="examples/**"/>
    <property name="test.path" value="test/**"/>
    <property name="examples.test.path" value="${examples.path} ${test.path}"/>

    <loadfile property="hdf4.version" srcFile="${hdf4.settings.version}" failonerror="false">
        <filterchain>
            <tokenfilter>
                <linetokenizer />
                <containsregex pattern="HDF4 Version:" />
            </tokenfilter>
            <tokenfilter>
                <stringtokenizer delims=":- \r\n" suppressdelims="true" />
                <containsregex pattern="[0-9]+\.[0-9]+\.[0-9]+" />
            </tokenfilter>
        </filterchain>
    </loadfile>

    <loadfile property="hdf5.version" srcFile="${hdf5.settings.version}">
        <filterchain>
            <tokenfilter>
                <linetokenizer />
                <containsregex pattern="HDF5 Version:" />
            </tokenfilter>
            <tokenfilter>
                <stringtokenizer delims=":- \r\n" suppressdelims="true" />
                <containsregex pattern="[0-9]+\.[0-9]+\.[0-9]+" />
            </tokenfilter>
        </filterchain>
    </loadfile>

    <!-- platform type -->
    <condition property="isWindows">
        <os family="windows" />
    </condition>

    <condition property="isMac">
        <os family="mac" />
    </condition>

    <condition property="isUnix">
        <and>
            <os family="unix" />
            <not>
                <equals arg1="${isMac}" arg2="true" />
            </not>
        </and>
    </condition>

    <condition property="machine.os" value="win">
        <equals arg1="${isWindows}" arg2="true" />
    </condition>

    <condition property="machine.os" value="osx">
        <and>
            <equals arg1="${isMac}" arg2="true" />
            <not>
                <equals arg1="${isWindows}" arg2="true" />
            </not>
            <not>
                <equals arg1="${isUnix}" arg2="true" />
            </not>
        </and>
    </condition>

    <condition property="machine.os" value="linux">
        <and>
            <equals arg1="${isUnix}" arg2="true" />
            <not>
                <equals arg1="${isWindows}" arg2="true" />
            </not>
            <not>
                <equals arg1="${isMac}" arg2="true" />
            </not>
        </and>
    </condition>

    <exec executable="hostname" outputproperty="computer.hostname"/>

    <condition property="isUbuntu">
        <contains string="${computer.hostname}" substring="ubuntu" />
    </condition>

    <!-- Build 64-bit binary.
       Note: os.arch gives the architecture of the JVM, NOT the OS;
       It is assumed that a ppc JVM is used for building on a powerpc system. -->
    <condition property="machine.arch" value="ppc64le">
        <and>
            <matches pattern="ppc64le" string="${os.arch}" />
            <equals arg1="${isUnix}" arg2="true" />
            <not>
                <equals arg1="${isWindows}" arg2="true" />
            </not>
            <not>
                <equals arg1="${isMac}" arg2="true" />
            </not>
        </and>
    </condition>

    <condition property="machine.arch" value="aarch64" else="x86_64">
        <matches pattern="aarch64" string="${os.arch}" />
    </condition>

    <condition property="machine.wix.arch" value="x64">
        <equals arg1="${isWindows}" arg2="true" />
    </condition>

    <!-- Sets variables which can later be used. -->
    <!-- The value of a property is accessed via ${} -->

    <property name="src.dir" value="src" />
    <property name="hdfview.dir" value="org.hdfgroup.hdfview" />
    <property name="object.dir" value="org.hdfgroup.object" />
    <property name="fits.dir" value="org.hdfgroup.object" />
    <property name="nc2.dir" value="org.hdfgroup.object" />
    <property name="h4.dir" value="org.hdfgroup.object" />
    <property name="h5.dir" value="org.hdfgroup.object" />
    <property name="testsrc.dir" value="test" />
    <property name="test.dir" value="org.hdfgroup.object.test" />
    <property name="examples.dir" value="org.hdfgroup.object.example.test" />
    <property name="test.hdfview.dir" value="org.hdfgroup.hdfview.test" />
    <property name="samples.dir" value="samples" />

    <property name="build.dir" value="build" />
    <property name="classes.dir" value="${build.dir}/classes" />
    <property name="testclasses.dir" value="${classes.dir}/${test.dir}" />
    <property name="uitestclasses.dir" value="${classes.dir}/${test.hdfview.dir}" />
    <property name="hdf4uitestclasses.dir" value="${uitestclasses.dir}/uitest/HDF4UITests" />
    <property name="hdf5uitestclasses.dir" value="${uitestclasses.dir}/uitest/HDF5UITests" />
    <property name="exclasses.dir" value="${classes.dir}/${examples.dir}" />
    <property name="jar.dir" value="${build.dir}/jar" />
    <property name="report.dir" value="${build.dir}/junitreport" />

    <property name="javadoc.dir" value="${build.dir}/javadocs" />
    <property name="docs.dir" value="docs" />
    <property name="bin.dir" value="bin" />
    <property name="lib.dir" value="lib" />
    <property name="packagefiles.dir" value="package_files" />
    <property name="dist.dir" value="${build.dir}/dist" />
    <property name="release.dir" value="${build.dir}/HDF_Group/${ant.project.name}/${app.version}" />
    <property name="includeantruntime" value="false" />
    <property name="jre.version" value="${ant.java.version}" />
    <property name="version.slf4j" value="-2.0.6" />

    <!-- Define the SonarQube global properties (the most usual way is to pass these properties via the command line) -->
    <property name="sonar.host.url" value="http://localhost:9000" />

    <!-- Define the SonarQube project properties -->
    <property name="sonar.projectKey" value="org.sonarqube:sonarqube-scanner-ant" />
    <property name="sonar.projectName" value="HDFView-development" />
    <property name="sonar.projectVersion" value="1.0" />
    <property name="sonar.sources" value="${src.dir}/hdf" />
    <property name="sonar.java.binaries" value="${classes.dir}" />
    <property name="sonar.tests" value="${testsrc.dir}" />
    <property name="sonar.sourceEncoding" value="UTF-8" />
    <property name="sonar.language" value="java" />
    <property name="sonar.core.codeCoveragePlugin" value="jacoco" />
    <property name="sonar.jacoco.reportPaths" value="${report.dir}/jacoco.exec" />
    <property name="sonar.dynamicAnalysis" value="reuseReports" />

    <path id="obj-classpath">
        <fileset dir="${lib.dir}" includes="fits.jar netcdf.jar" excludes="*sources.jar" />
    </path>
    <path id="swt-classpath">
        <fileset file="${lib.dir}/ext/swt/${machine.os}/${machine.arch}/swt.jar" />
        <fileset dir="${lib.dir}/ext/swt" includes="*.jar" />
    </path>
    <path id="jni4-classpath">
        <fileset dir="${hdf.lib.dir}" includes="jarhdf*.jar" />
    </path>
    <path id="jni5-classpath">
        <fileset dir="${hdf5.lib.dir}" includes="jarhdf5*.jar" />
    </path>
    <path id="slf4j-classpath">
        <fileset dir="${lib.dir}" includes="slf4j-api${version.slf4j}.jar" excludes="*sources.jar" />
    </path>
    <path id="log-classpath">
        <fileset dir="${lib.dir}/extra" includes="slf4j-simple${version.slf4j}.jar" excludes="*sources.jar" />
    </path>
    <path id="nop-classpath">
        <fileset dir="${lib.dir}/extra" includes="slf4j-nop${version.slf4j}.jar" excludes="*sources.jar" />
    </path>
    <path id="unit-classpath">
        <fileset dir="${lib.dir}" includes="org.junit.jar org.hamcrest.jar" excludes="*sources.jar" />
    </path>
    <path id="swtbot-classpath">
        <fileset dir="${lib.dir}/ext/swt/swtbot" includes="*swtbot*.jar *log4j*.jar" excludes="*sources.jar" />
    </path>
    <path id="build-classpath">
        <fileset dir="${classes.dir}" excludes="*.properties" />
    </path>
    <path id="ui-test4-sources">
        <fileset dir="${src.dir}/" includes="**/uitest/*Test*.java" excludes="**/uitest/*CLGeometry.java **/uitest/*All*.java" />
        <fileset dir="${src.dir}/" includes="**/uitest/HDF4UITests/*Test*.java" excludes="**/*All*.java" />
        <fileset dir="${src.dir}/" includes="**/uitest/HDF4UITests/BugFixTests/*Test*.java" excludes="**/*All*.java" />
        <fileset dir="${src.dir}/" includes="**/uitest/HDF4UITests/FeatureTests/*Test*.java" excludes="**/*All*.java" />
    </path>
    <path id="ui-test5-sources">
        <fileset dir="${src.dir}/" includes="**/uitest/*Test*.java" excludes="**/uitest/*CLGeometry.java **/uitest/*All*.java" />
        <fileset dir="${src.dir}/" includes="**/uitest/HDF5UITests/*Test*.java" excludes="**/*All*.java" />
        <fileset dir="${src.dir}/" includes="**/uitest/HDF5UITests/BugFixTests/*Test*.java" excludes="**/*All*.java" />
        <fileset dir="${src.dir}/" includes="**/uitest/HDF5UITests/FeatureTests/*Test*.java" excludes="**/*All*.java" />
    </path>
    <path id="object-classpath">
        <path refid="obj-classpath" />
        <path refid="jni4-classpath" />
        <path refid="jni5-classpath" />
        <path refid="slf4j-classpath" />
        <path refid="log-classpath" />
    </path>
    <path id="project-classpath">
        <path refid="obj-classpath" />
        <path refid="jni4-classpath" />
        <path refid="jni5-classpath" />
        <path refid="swt-classpath" />
        <path refid="slf4j-classpath" />
        <path refid="log-classpath" />
        <path refid="swtbot-classpath" />
    </path>
    <path id="view-classpath">
        <path refid="hdfobject-jar" />
        <path refid="swt-classpath" />
        <path refid="slf4j-classpath" />
        <path refid="nop-classpath" />
    </path>
    <path id="test-classpath">
        <path refid="project-classpath" />
        <path refid="unit-classpath" />
        <path refid="swtbot-classpath" />
        <path refid="hdfobject-jar" />
        <path refid="application" />
    </path>

    <property name="main-class" value="hdf.view.HDFView" />

    <echo>
     Application:      ${ant.project.name} ${app.version}
     Build File:       ${ant.file}
     <!-- Run Date   : ${build.time} -->
     Run by:           ${user.name}
     Build Dir:        ${build.dir}
     Base Dir:         ${basedir}
     Dist Dir:         ${dist.dir}
     Java Home:        ${java.home}
     HDF libpath:      ${hdf.lib.dir},${hdf5.lib.dir}
     HDF4 version:     ${hdf4.version}
     HDF5 version:     ${hdf5.version}
     Operating System: ${os.name} ${os.version} ${os.arch}
     Debug Build:      ${build.debug}
    </echo>
    <echo if:set="isMac">running on MacOS</echo>
    <echo if:set="isUnix">running on Unix</echo>
    <echo if:set="isWindows">running on Windows</echo>

    <target name="clean" description="Cleans up the build directory">
        <delete dir="${classes.dir}" />
        <delete dir="${jar.dir}" />
        <delete dir="${report.dir}" />
        <delete dir="${javadoc.dir}" />
        <delete dir="${dist.dir}" />
        <delete dir="${release.dir}" />
        <delete dir="${build.dir}" />

        <mkdir dir="${classes.dir}/${object.dir}" />
        <mkdir dir="${classes.dir}/${hdfview.dir}" />
        <mkdir dir="${classes.dir}/hdf" />
    </target>

    <target name="clean-build" depends="clean,objectjar,jar" />

    <target name="clean-package">
        <delete dir="${dist.dir}" />
    </target>

    <!-- Store compile-time Version information -->
    <target name="create-property-file">
        <propertyfile file="${classes.dir}/hdf/versions.properties">
            <entry key="JAVA_VERSION" value="${ant.java.version}"/>
            <entry key="HDF4_VERSION" value="${hdf4.version}"/>
            <entry key="HDF5_VERSION" value="${hdf5.version}"/>
            <entry key="HDFVIEW_VERSION" value="${app.version}"/>
        </propertyfile>
    </target>

    <target name="compile" depends="clean, create-property-file, compileobj, compilehdf4, compilefits, compilenc2, compilehdf5">
        <javac modulesourcepath="${src.dir}" modulepathref="project-classpath" destdir="${classes.dir}"
            classpathref="project-classpath"
            excludes="${examples.test.path} **/*.in **/*.gif **/*.png **/*.icns **/*.html **/*.properties"
            includeantruntime="false" debug="${build.debug}" />
        <copy todir="${classes.dir}/${hdfview.dir}">
            <fileset dir="${src.dir}/${hdfview.dir}"
                excludes="${all.object.path} **/*.in **/*.java ${examples.test.path}" />
        </copy>
    </target>
    <path id="build-classpath" location="${classes.dir}" />

    <target name="compileobj" depends="clean">
        <copy todir="${classes.dir}/${object.dir}">
            <fileset dir="${src.dir}/${object.dir}"
                excludes="${hdf.view.path} ${all.object.path} **/*.in **/*.java ${examples.test.path}" />
        </copy>
    </target>

    <target name="compilehdf4" depends="clean" if="h4path">
        <copy todir="${classes.dir}/${h4.dir}">
            <fileset dir="${src.dir}/${h4.dir}"
                excludes="${hdf.view.path} ${fits.object.path} ${nc2.object.path} ${h5.object.path} **/*.in **/*.java ${examples.test.path}" />
        </copy>
    </target>

    <target name="compilefits" depends="clean">
        <copy todir="${classes.dir}/${fits.dir}">
            <fileset dir="${src.dir}/${fits.dir}"
                excludes="${hdf.view.path} ${nc2.object.path} ${h4.object.path} ${h5.object.path}  **/*.in **/*.java ${examples.test.path}" />
        </copy>
    </target>

   <target name="compilenc2" depends="clean">
        <copy todir="${classes.dir}/${nc2.dir}">
            <fileset dir="${src.dir}/${nc2.dir}"
                excludes="${hdf.view.path} ${fits.object.path}  ${h4.object.path} ${h5.object.path}  **/*.in **/*.java ${examples.test.path}" />
        </copy>
    </target>

    <target name="compilehdf5" depends="clean">
        <copy todir="${classes.dir}/${h5.dir}">
            <fileset dir="${src.dir}/${h5.dir}"
                excludes="${hdf.view.path} ${fits.object.path} ${nc2.object.path} ${h4.object.path} **/*.in **/*.java ${examples.test.path}" />
        </copy>
    </target>

    <target name="objectjar" depends="compile">
        <mkdir dir="${jar.dir}" />

        <pathconvert property="manifest.classpath" pathsep=" ">
            <path refid="object-classpath" />
            <mapper>
                <chainedmapper>
                    <flattenmapper />
                </chainedmapper>
            </mapper>
        </pathconvert>

        <jar destfile="${jar.dir}/hdfobject.jar"
                excludes="${hdf.view.path} ${examples.test.path} *.log *.h5 *.data">
            <fileset dir="${classes.dir}/${object.dir}">
                  <include name="**/*.class"/>
            </fileset>
            <fileset dir="${classes.dir}/${fits.dir}">
                  <include name="**/*.class"/>
            </fileset>
            <fileset dir="${classes.dir}/${nc2.dir}">
                  <include name="**/*.class"/>
            </fileset>
            <fileset dir="${classes.dir}/${h4.dir}">
                  <include name="**/*.class"/>
            </fileset>
            <fileset dir="${classes.dir}/${h5.dir}">
                  <include name="**/*.class"/>
            </fileset>

            <manifest>
                <attribute name="Class-Path" value="${manifest.classpath}" />
            </manifest>
        </jar>
    </target>
    <path id="hdfobject-jar" location="${jar.dir}/hdfobject.jar" />

    <target name="modulejar" depends="compile-uitest, compile-test">
        <mkdir dir="${testclasses.dir}/lib/ext" />

        <pathconvert property="manifest.classpath" pathsep=" ">
            <path refid="view-classpath" />
            <mapper>
                <chainedmapper>
                    <flattenmapper />
                </chainedmapper>
            </mapper>
        </pathconvert>

        <jar destfile="${testclasses.dir}/lib/ext/test.modules.TestModuleLoading.jar"
            includes="test/modules/**" excludes="Test*.java *.h5" />
    </target>

    <target name="jar" depends="compile, objectjar">
        <mkdir dir="${jar.dir}" />

        <pathconvert property="manifest.classpath" pathsep=" ">
            <path refid="view-classpath" />
            <mapper>
                <chainedmapper>
                    <flattenmapper />
                </chainedmapper>
            </mapper>
        </pathconvert>

        <jar destfile="${jar.dir}/${ant.project.name}.jar" excludes="${examples.test.path} *.log *.h5 *.data">
            <fileset dir="${classes.dir}/${hdfview.dir}">
                  <include name="**/*.class"/>
            </fileset>
            <fileset dir="${classes.dir}/${hdfview.dir}">
                  <include name="**/*.ico"/>
            </fileset>
            <fileset dir="${classes.dir}/${hdfview.dir}">
                  <include name="**/*.gif"/>
                  <include name="**/*.png"/>
            </fileset>
            <fileset dir="${classes.dir}/hdf">
                  <include name="versions.properties"/>
            </fileset>
            <manifest>
                <attribute name="Main-Class" value="${main-class}" />
                <attribute name="Class-Path" value="${manifest.classpath}" />
            </manifest>
        </jar>
    </target>
    <path id="application" location="${jar.dir}/${ant.project.name}.jar" />

    <!-- SWT on Mac requires the -XstartOnFirstThreadFlag. -->
    <condition property="XstartOnFirstThreadFlag" value="-XstartOnFirstThread" else="-Dgwt.dummy.arg1=">
        <os family="mac" />
    </condition>

    <target name="rundebug" depends="deploy,jar" description="Runs the application with remote debugger">
        <mkdir dir="${jar.dir}/lib/ext" />
        <java fork="true" classname="${main-class}">
            <jvmarg value="-Dorg.slf4j.simpleLogger.defaultLogLevel=${build.log.level.run}" />
            <jvmarg value="${XstartOnFirstThreadFlag}" />
            <jvmarg value="-Xdebug" />
            <jvmarg value="-Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=5432" />
            <classpath>
                <path refid="project-classpath" />
                <path refid="log-classpath" />
                <path refid="hdfobject-jar" />
                <path refid="application" />
            </classpath>
            <sysproperty key="java.library.path" path="${release.dir}${path.separator}${release.dir}/bin" />
            <sysproperty key="hdfview.root" path="${basedir}/${jar.dir}" />
            <!--  <sysproperty key="hdfview.workdir" path="${basedir}/${jar.dir}" />  -->
            <env key="HDF5_PLUGIN_PATH" path="${hdf5.plugin.dir}" />
            <env key="${platform.hdf.lib}" path="${release.dir}${path.separator}${release.dir}/bin${path.separator}${platform.hdf.lib}" />
        </java>
    </target>

    <target name="run" depends="deploy,jar" description="Runs the application">
        <mkdir dir="${jar.dir}/lib/ext" />
        <java fork="true" classname="${main-class}">
            <jvmarg value="-Dorg.slf4j.simpleLogger.defaultLogLevel=${build.log.level.run}" />
            <jvmarg value="${XstartOnFirstThreadFlag}" />
            <classpath>
                <path refid="project-classpath" />
                <path refid="log-classpath" />
                <path refid="obj-classpath" />
                <path refid="hdfobject-jar" />
                <path refid="application" />
            </classpath>
            <sysproperty key="java.library.path" path="${release.dir}${path.separator}${release.dir}/bin" />
            <sysproperty key="hdfview.root" path="${basedir}/${jar.dir}" />
            <!--  <sysproperty key="hdfview.workdir" path="${basedir}/${jar.dir}" />  -->
            <env key="HDF5_PLUGIN_PATH" path="${hdf5.plugin.dir}" />
            <env key="${platform.hdf.lib}" path="${release.dir}${path.separator}${release.dir}/bin${path.separator}${platform.hdf.lib}" />
        </java>
    </target>

    <target name="run-jar" depends="jar" description="Runs the application directly from the .jar file">
        <mkdir dir="${jar.dir}/lib" />
        <mkdir dir="${jar.dir}/lib/ext" />
        <copy todir="${jar.dir}/lib">
            <fileset dir="${lib.dir}" includes="fits.jar netcdf.jar" excludes="*sources.jar" />
            <fileset dir="${hdf.lib.dir}" includes="*.jar" excludes="slf4j*.jar" />
            <fileset dir="${hdf5.lib.dir}" includes="*.jar" excludes="slf4j*.jar" />
        </copy>
        <java fork="true" jar="${jar.dir}/${ant.project.name}.jar">
            <jvmarg value="-Dorg.slf4j.simpleLogger.defaultLogLevel=${build.log.level.run}" />
            <jvmarg value="${XstartOnFirstThreadFlag}" />
            <sysproperty key="java.library.path" path="${hdf.lib.dir}${path.separator}${hdf5.lib.dir}" />
            <sysproperty key="hdfview.root" path="${basedir}/${jar.dir}" />
            <!-- <sysproperty key="hdfview.workdir" path="${basedir}/${jar.dir}" />  -->
            <env key="HDF5_PLUGIN_PATH" path="${hdf5.plugin.dir}" />
        </java>
    </target>

    <!-- =================================================================
          EXAMPLES
          ================================================================= -->

    <target name="compile-examples" depends="compile, jar">
        <copy todir="${exclasses.dir}">
            <fileset dir="${testsrc.dir}/${examples.dir}" excludes=" **/*.in **/*.java hdf/** ${test.path}" />
        </copy>
    </target>

    <target name="run-examples" depends="compile-examples" description="Runs the examples">
        <fileset dir="${exclasses.dir}" includes="**/*.class" excludes="**/*$* **/*.txt testfiles/**" />
    </target>

    <target name="run-one-example" depends="deploy,compile-test" description="Runs one example">
        <dirname property="exfile.dir" file="${build.exfile}" />
        <basename property="exdir.name" file="${exfile.dir}" />
        <basename property="exfile.name" file="${build.exfile}" suffix=".class" />
        <property name="exdir.rel" value="${exclasses.dir}" relative="yes" />
        <basename property="exdirrel.name" file="${exdir.rel}" />
        <echo message="Test example: ${exfile.name}" />
        <java fork="true" classname="${exfile.name}" dir="${classes.dir}">
            <jvmarg value="-Dorg.slf4j.simpleLogger.defaultLogLevel=${build.log.level.test}" />
            <jvmarg value="${XstartOnFirstThreadFlag}" />
            <jvmarg line="${exfile.name}.class" />
            <classpath>
                <path refid="project-classpath" />
                <path refid="log-classpath" />
                <path refid="hdfobject-jar" />
                <pathelement location="${exclasses.dir}" />
            </classpath>
            <sysproperty key="java.library.path" path="${release.dir}${path.separator}${release.dir}/bin" />
            <env key="${platform.hdf.lib}" path="${release.dir}${path.separator}${release.dir}/bin${path.separator}${platform.hdf.lib}" />
        </java>
    </target>

    <target name="clean-examples">
        <delete>
            <fileset dir="${exclasses.dir}" includes="**/*.h5" />
        </delete>
    </target>

    <!-- =================================================================
          TESTS
          ================================================================= -->

    <target name="compile-test" depends="objectjar, jar, compile-objtest, compile-uitest, compile-examples">
        <javac modulesourcepath="${testsrc.dir}" modulepathref="test-classpath" modulepath="build-classpath"
            destdir="${classes.dir}"
            classpathref="test-classpath"
            includes="**/*.java"
            includeantruntime="false" debug="${build.debug}">
            <compilerarg value="-Xlint:deprecation" />
            <compilerarg value="-Xlint:unchecked" />
        </javac>

    </target>

    <target name="compile-objtest" depends="objectjar, jar">
        <copy todir="${testclasses.dir}">
            <fileset dir="${testsrc.dir}/${test.dir}" excludes=" **/JUnit*.txt **/*.err **/*.in **/*.java hdf/** ${examples.path}" />
        </copy>
        <mkdir dir="${testclasses.dir}/lib/ext" />
    </target>

    <target name="compile-uitest" depends="objectjar, jar">
        <copy todir="${uitestclasses.dir}">
            <fileset dir="${testsrc.dir}/${test.hdfview.dir}" excludes=" **/JUnit*.txt **/*.err **/*.in **/*.java hdf/** ${examples.path}" />
        </copy>
        <mkdir dir="${uitestclasses.dir}/lib/ext" />
    </target>

    <target name="compile-uimodtest" depends="modulejar, jar">
        <copy todir="${testclasses.dir}/${test.dir}">
            <fileset dir="${testsrc.dir}/${test.dir}" excludes=" **/JUnit*.txt **/*.err **/*.in **/*.java hdf/** ${examples.path}" />
        </copy>
        <!--<mkdir dir="${testclasses.dir}/lib/ext" /> -->
    </target>

    <path id="alltest-classes" location="${testclasses.dir}" />

    <target name="clean-junit-uitest">
        <delete>
            <filelist dir="${uitestclasses.dir}" files="
        closebutton.hdf,
        dataset_saveto_test.h5,
        image_saveto_test.h5,
        group_saveto_test.h5,
        testopenbutton.hdf,
        testopenfile.hdf,
        testopenrofile.h5,
        testfile.hdf,
        testfile.h5,
        apollo17_earth.jpg.hdf,
        apollo17_earth.jpg.h5,
        test_libversion.h5,
        closefile.hdf,
        closeallfile.hdf,
        closeallfile.h5,
        testsavefile.h5,
        testsaveasfile.h5,
        testsaveasfile2.h5,
        test_tab_import.h5,
        test_comma_import.h5,
        test_space_import.h5,
        test_colon_import.h5,
        test_semicolon_import.h5,
        test_large_dataset.h5,
        testintsfile2.h5,
        testlinks.h5,
        testgrp.h5,
        testds.h5,
        DS16BITS.txt,
        float3D.txt,
        DU32BITS.txt,
        chunked.txt,
        CompoundInts.txt,
        DS64BITS.txt,
        DU64BITS.bin" />
        </delete>
        <mkdir dir="${uitestclasses.dir}" />
    </target>

    <target name="jacoco" depends="jacoco-skip, jacoco-run" />

    <!-- Define jacoco Scanner for Ant Target -->
    <target name="jacoco-run" if="${build.jacoco}">
        <taskdef uri="antlib:org.jacoco.ant" resource="org/jacoco/ant/antlib.xml" onerror="ignore">
            <classpath path="/opt/jacoco-0.8.3/lib/jacocoant.jar" />
        </taskdef>

        <jacoco:agent property="agentvmparam" destfile="${report.dir}/jacoco.exec" xmlns:jacoco="antlib:org.jacoco.ant" />
    </target>

    <target name="jacoco-skip" unless="${build.jacoco}">
        <property name="agentvmparam" value="" />
    </target>

    <target name="junit-debug-test" depends="deploy,objectjar,clean-junit-uitest,compile-test,jacoco">
        <mkdir dir="${report.dir}" />
        <junit showoutput="yes" enabletestlistenerevents="true" fork="yes" printsummary="withOutAndErr" dir="${classes.dir}">
            <jvmarg value="-Dorg.slf4j.simpleLogger.defaultLogLevel=${build.log.level.test}" />
            <jvmarg value="${XstartOnFirstThreadFlag}" />
            <jvmarg line="${agentvmparam}" />
            <jvmarg value="-Xdebug" />
            <jvmarg value="-Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=5432" />
            <classpath>
                <path refid="test-classpath" />
                <path refid="build-classpath" />
                <pathelement location="${testclasses.dir}" />
            </classpath>
            <sysproperty key="java.library.path" path="${release.dir}${path.separator}${release.dir}/bin" />
            <env key="${platform.hdf.lib}" path="${release.dir}${path.separator}${release.dir}/bin${path.separator}${platform.hdf.lib}" />
            <test name="${build.object.test}" todir="${report.dir}" outfile="TEST-${build.object.test}">
                <formatter type="plain" />
            </test>
        </junit>
    </target>

    <target name="junit-single-test" depends="deploy,objectjar,clean-junit-uitest,compile-test,jacoco">
        <mkdir dir="${report.dir}" />
        <junit showoutput="yes" enabletestlistenerevents="true" fork="yes" printsummary="withOutAndErr" dir="${classes.dir}">
            <jvmarg value="-Dorg.slf4j.simpleLogger.defaultLogLevel=${build.log.level.test}" />
            <jvmarg value="${XstartOnFirstThreadFlag}" />
            <jvmarg line="${agentvmparam}" />
            <classpath>
                <path refid="test-classpath" />
                <path refid="build-classpath" />
                <pathelement location="${testclasses.dir}" />
            </classpath>
            <sysproperty key="java.library.path" path="${release.dir}${path.separator}${release.dir}/bin" />
            <env key="${platform.hdf.lib}" path="${release.dir}${path.separator}${release.dir}/bin${path.separator}${platform.hdf.lib}" />
            <test name="${build.object.test}" todir="${report.dir}" outfile="TEST-${build.object.test}">
                <formatter type="plain" />
            </test>
        </junit>
    </target>

    <target name="junit" depends="deploy,objectjar,clean-junit-uitest,compile-test,jacoco" description="Runs the Object Library tests">
        <mkdir dir="${report.dir}" />
        <junit showoutput="yes" enabletestlistenerevents="true" fork="yes" printsummary="withOutAndErr" dir="${classes.dir}">
            <jvmarg value="-Dorg.slf4j.simpleLogger.defaultLogLevel=${build.log.level.test}" />
            <jvmarg value="${XstartOnFirstThreadFlag}" />
            <jvmarg line="${agentvmparam}" />
            <classpath>
                <path refid="test-classpath" />
                <path refid="build-classpath" />
                <pathelement location="${testclasses.dir}" />
            </classpath>
            <sysproperty key="java.library.path" path="${release.dir}${path.separator}${release.dir}/bin" />
            <env key="${platform.hdf.lib}" path="${release.dir}${path.separator}${release.dir}/bin${path.separator}${platform.hdf.lib}" />

            <formatter type="xml" />
            <formatter type="plain" />

            <batchtest fork="yes" todir="${report.dir}">
                <fileset dir="${testclasses.dir}/" includes="**/object/*Test*" excludes="**/object/*All*,**/object/H5Test*" />
            </batchtest>
        </junit>
    </target>

    <!-- Define SonarQube Scanner for Ant Target -->
    <target name="sonar" depends="jacoco, junit, junit-uitest">
        <taskdef uri="antlib:org.sonar.ant" resource="org/sonar/ant/antlib.xml" onerror="ignore">
            <!-- Update the following line, or put the "sonarqube-ant-task-*.jar" file in your "$HOME/.ant/lib" folder -->
            <classpath path="~/.ant/lib/sonarqube-ant-task-*.jar" />
        </taskdef>

        <!-- Execute SonarQube Scanner for Ant Analysis -->
        <sonar:sonar />
    </target>

    <target name="ensure-test4-name" unless="test">
        <!-- Capture the path as a delimited property using the refid attribute -->
        <pathconvert pathsep="${line.separator}" property="filesetref" refid="ui-test4-sources">
            <!-- the path stripped -->
            <mapper>
                <flattenmapper />
            </mapper>
        </pathconvert>

        <!-- Emit the property to the ant console -->
        <echo message="Where TestName is the the base name of: ${filesetref}" />
        <fail message="You must run this target with -Dtest=TestName" />
    </target>

    <target name="ensure-test5-name" unless="test">
        <!-- Capture the path as a delimited property using the refid attribute -->
        <pathconvert pathsep="${line.separator}" property="fileset5ref" refid="ui-test5-sources">
            <!-- the path stripped -->
            <mapper>
                <flattenmapper />
            </mapper>
        </pathconvert>

        <!-- Emit the property to the ant console -->
        <echo message="Where TestName is the the base name of: ${filesetref}" />
        <fail message="You must run this target with -Dtest=TestName" />
    </target>

    <!-- Macro for common code for running a junit task. The two attributes that are changeable
         correspond to the HDFView sysproperties 'hdfview.root' and 'hdfview.workdir'. By changing
         these to the appropriate paths, UI tests in different nested folder structures are able
         to find the test files they are looking for simply by name, instead of having to specify
         a relative pathname.  -->
    <macrodef name="run-ui-junit">
        <attribute name="rootdir" default="${basedir}/${uitestclasses.dir}" />
        <attribute name="workdir" default="${basedir}/${uitestclasses.dir}/uitest" />
        <attribute name="propfile" default="${user.home}/.hdfview${app.version}" />
        <attribute name="includes" default="**/*Test*" />
        <attribute name="excludes" default="**/*All* **/*$*" />
        <attribute name="if" default="" />
        <sequential>
        <echo message="JUnit Testing: @{includes}" />
        <junit showoutput="yes" enabletestlistenerevents="true" fork="yes" printsummary="withOutAndErr" dir="${classes.dir}">
                <!-- Run in debug logging level because trace generates way too much output.
                     We will run manually using trace logging output when there are UI test failures. -->
                <jvmarg value="-Dorg.slf4j.simpleLogger.defaultLogLevel=${build.log.level.test}" />
                <jvmarg value="${XstartOnFirstThreadFlag}" />
                <jvmarg line="${agentvmparam}" />

                <classpath>
                    <path refid="test-classpath" />
                    <path refid="build-classpath" />
                    <pathelement location="${uitestclasses.dir}" />
                </classpath>

                <sysproperty key="java.library.path" path="${release.dir}${path.separator}${release.dir}/bin" />
                <sysproperty key="hdfview.root" path="@{rootdir}" />
                <sysproperty key="hdfview.workdir" path="@{workdir}" />
                <sysproperty key="hdfview.propfile" path="@{propfile}" />
                <env key="${platform.hdf.lib}" path="${release.dir}${path.separator}${release.dir}/bin${path.separator}${platform.hdf.lib}" />

                <test name="uitest.${test}" todir="${report.dir}" outfile="TEST-uitest.${test}">
                  <formatter type="xml" />
                  <formatter type="plain" />
                </test>
            </junit>
        </sequential>
    </macrodef>

    <target name="runauitest" description="Runs the test you specify on the command line with -Dtest=" depends="deploy,jar, clean-junit-uitest, compile-test, ensure-test5-name, ensure-test4-name, jacoco">
        <mkdir dir="${report.dir}" />

        <run-ui-junit
            rootdir="${basedir}/${jar.dir}"
            workdir="${basedir}/${uitestclasses.dir}/uitest"
            propfile="${basedir}/${uitestclasses.dir}/.hdfview${app.version}"
            includes="**/${uitestclasses.dir}/${test}.class"
            excludes="**/*All* **/*$*"
        />
    </target>

    <!-- Top-level target for UI tests. Calls separate targets for HDFView UI tests, HDF4 UI tests and HDF5 UI tests. -->
    <target name="junit-uitest" depends="jar, clean-junit-uitest, jacoco, compile-test, deploy, -hdfview-ui-tests" description="Runs the UI tests" />

    <!-- Internal target to run HDFView UI tests that are independent of FileFormats. -->
    <target name="-hdfview-ui-tests" depends="jar, compile-uitest, clean-junit-uitest">
        <mkdir dir="${report.dir}" />

        <run-ui-junit
            rootdir="${basedir}/${jar.dir}"
            workdir="${basedir}/${uitestclasses.dir}/uitest"
            propfile="${basedir}/${uitestclasses.dir}/.hdfview${app.version}"
            includes="**/${uitestclasses.dir}/${test}.class"
            excludes="**/*All* **/*$*"
        />
    </target>

    <!-- Internal target to run HDF4-related HDFView UI tests. -->
    <target name="-hdf4-ui-tests" if="h4path">
        <mkdir dir="${report.dir}" />

        <!-- Run the top-level HDF4 UI tests -->
        <run-ui-junit
            rootdir="${basedir}/${jar.dir}"
            workdir="${basedir}/${hdf4uitestclasses.dir}"
            propfile="${basedir}/${uitestclasses.dir}/.hdfview${app.version}"
            includes="**/${hdf4uitestclasses.dir}/${test}.class"
            excludes="**/*All* **/*$*"
            if="h4path"
        />
    </target>

    <target name="-hdf5-ui-tests">
        <mkdir dir="${report.dir}" />

        <!-- Run the top-level HDF5 UI tests -->
        <run-ui-junit
            rootdir="${basedir}/${jar.dir}"
            workdir="${basedir}/${hdf5uitestclasses.dir}"
            propfile="${basedir}/${uitestclasses.dir}/.hdfview${app.version}"
            includes="${hdf5uitestclasses.dir}/${test}.class"
            excludes="**/*All* **/*$*"
        />
    </target>

    <target name="junit-uimodules" depends="jar,modulejar,compile-uimodtest,clean-junit-uitest,jacoco" description="Runs the tests for the UI modules">
        <mkdir dir="${report.dir}" />

        <run-ui-junit
            rootdir="${basedir}/${jar.dir}"
            workdir="${basedir}/${testclasses.dir}/modules"
            includes="**/modules/*Test*"
            excludes="**/modules/*$*"
        />
    </target>

    <target name="junitreport">
        <junitreport todir="${report.dir}">
            <fileset dir="${report.dir}" includes="TEST-*.xml" />
            <report todir="${report.dir}" />
        </junitreport>
    </target>

    <!-- =================================================================
          JAVADOC
          ================================================================= -->


    <target name="javadoc" depends="jar">
        <javadoc
            modulesourcepath="${src.dir}"
            modulepathref="project-classpath"
            packagenames="hdf.*"
            use="true"
            author="true"
            version="true"
            access="package"
            destdir="${javadoc.dir}"
            windowtitle="${ant.project.name} ${app.version}"
            noqualifier="java.*:javax.*:com.sun.*"
            linksource="true"
            failonerror="false">

            <fileset dir="${src.dir}" />

            <doctitle>
                <![CDATA[= HDFView Application =]]>
            </doctitle>

            <bottom>
                <![CDATA[Copyright © 2022. All Rights Reserved.]]>
            </bottom>

            <group title="object packages" packages="hdf.object.*" />
            <group title="view packages" packages="hdf.view.*" />
            <classpath>
                <path refid="project-classpath" />
                <path refid="application" />
            </classpath>
        </javadoc>
    </target>

    <target name="createDocumentationTGZ" description="Compresses the application User's Guide project pointed to by userguide.dir into a .tar.gz file to be distributed">
        <mkdir dir="${build.dir}/docs" />
        <tar destfile="${build.dir}/docs/UserGuide.tar.gz" compression="gzip">
            <tarfileset dir="${userguide.dir}" includes="images/** javadocs/** *.html RELEASE.txt" />
        </tar>
    </target>

    <macrodef name="jdepslink" description="Generate a stand-alone application">
        <attribute name="java.bindir" default="${java.home}/bin" description="The directory in which Java executables can be found" />
        <sequential>
            <!-- Use generated list of Java modules to create custom JRE -->
            <exec executable="@{java.bindir}/jlink">
                <arg value="--no-header-files" />
                <arg value="--no-man-pages" />
                <arg value="--output" />
                <arg value="${jar.dir}/jre" />
                <arg value="--module-path" />
                <arg value="${release.dir}" />
                <arg value="--add-modules" />
                <arg value="java.desktop" />
            </exec>
        </sequential>
    </macrodef>

    <target name="createREADME" depends="clean-package" description="Creates the project README.txt file">
        <mkdir dir="${dist.dir}" />

        <echo>Create README.txt and add appropriate information</echo>
        <copy file="${packagefiles.dir}/README.txt.in" tofile="${dist.dir}/README.txt" />
        <replace file="${dist.dir}/README.txt" token="@HDFJAVA_PACKAGE_NAME@" value="${ant.project.name}" />
        <replace file="${dist.dir}/README.txt" token="@HDFVIEW_PACKAGE_VERSION_STRING@" value="${app.version}" />
        <replace file="${dist.dir}/README.txt" token="@HDFVIEW_PACKAGE_VERSION@" value="${app.version}" />
        <replace file="${dist.dir}/README.txt" token="@JDK_VERSION@" value="${java.version}" />
        <replace file="${dist.dir}/README.txt" token="@LIB_TYPE@" value="SHARED" />
        <replace file="${dist.dir}/README.txt" token="@HDF4_VERSION_STRING@" value="${hdf4.version}" />
        <replace file="${dist.dir}/README.txt" token="@HDF5_VERSION_STRING@" value="${hdf5.version}" />
        <replace file="${dist.dir}/README.txt" token="@JRE_VERSION@" value="${jre.version}" />
        <replace file="${dist.dir}/README.txt" token="@FILE_SEP@" value="${file.separator}" />
    </target>

    <target name="createWindowsREADME" depends="createREADME" if="${isXWindows}">
        <!-- Windows-specific README.txt replacements -->
        <echo>Create Windows-specific README.txt and add appropriate version information</echo>
        <replace file="${dist.dir}/README.txt" token="@BINARY_PLATFORM@" value="Windows win-${os.arch}" />
        <replace file="${dist.dir}/README.txt" token="@BINARY_FILE@" value="${ant.project.name}-${app.version}.exe (or .msi)  - ${ant.project.name} Installer" />
        <replace file="${dist.dir}/README.txt" token="@EXECUTABLE@" value="C:\Users\user-name\AppData\Local\HDF_Group\HDFView" />
        <replace file="${dist.dir}/README.txt" token="@INSTALL_TYPE@" value="Running" />
        <replace file="${dist.dir}/README.txt" token="@INSTALL_PREFIX_HEADER@" value="To install ${ant.project.name} for Windows:${line.separator}" />
        <replace file="${dist.dir}/README.txt" token="@INSTALL_OR_RUN_FILE@" value="1. Execute ${ant.project.name}-${app.version}.exe (or .msi)" />
        <replace file="${dist.dir}/README.txt" token="@OPTIONAL_STEP@" value="2. Follow prompts${line.separator}3. Execute install-dir\${ant.project.name}.exe" />
    </target>

    <target name="createWindowsAppREADME" depends="createREADME" if="${isAppWindows}">
        <!-- Windows-specific README.txt replacements -->
        <echo>Create Windows-specific README.txt and add appropriate version information</echo>
        <replace file="${dist.dir}/README.txt" token="@BINARY_PLATFORM@" value="Windows win-${os.arch}" />
        <replace file="${dist.dir}/README.txt" token="@BINARY_FILE@" value="${ant.project.name}       - ${ant.project.name} Directory" />
        <replace file="${dist.dir}/README.txt" token="@EXECUTABLE@" value="current-dir\HDFView" />
        <replace file="${dist.dir}/README.txt" token="@INSTALL_TYPE@" value="Running" />
        <replace file="${dist.dir}/README.txt" token="@INSTALL_PREFIX_HEADER@" value="To install ${ant.project.name} for Windows, copy ${ant.project.name} directory to where you want${line.separator}to install ${ant.project.name} and:${line.separator}" />
        <replace file="${dist.dir}/README.txt" token="@INSTALL_OR_RUN_FILE@" value="1. cd into the new ${ant.project.name}" />
        <replace file="${dist.dir}/README.txt" token="@OPTIONAL_STEP@" value="2. Execute ./${ant.project.name}.exe${line.separator}3. Or execute .\app\${ant.project.name}.bat" />
    </target>

    <target name="createUnixREADME" depends="createREADME" if="${isAppUnix}">
        <exec executable="uname" outputproperty="uname.os">
            <arg value="-s" />
        </exec>

        <exec executable="uname" outputproperty="uname.version">
            <arg value="-r" />
        </exec>

        <!-- Unix-specific README.txt replacements -->
        <echo>Create Unix-specific README.txt and add appropriate version information</echo>
        <replace file="${dist.dir}/README.txt" token="@BINARY_PLATFORM@" value="${uname.os} ${uname.version}" />
        <replace file="${dist.dir}/README.txt" token="@BINARY_FILE@" value="${ant.project.name} - ${ant.project.name} Directory" />
        <replace file="${dist.dir}/README.txt" token="@EXECUTABLE@" value="current-dir/bin/HDFView" />
        <replace file="${dist.dir}/README.txt" token="@INSTALL_TYPE@" value="Running" />
        <replace file="${dist.dir}/README.txt" token="@INSTALL_PREFIX_HEADER@" value="To install ${ant.project.name} for ${uname.os}, copy ${ant.project.name} directory to where you want${line.separator}to install ${ant.project.name} and:${line.separator}" />
        <replace file="${dist.dir}/README.txt" token="@INSTALL_OR_RUN_FILE@" value="1. cd into the new ${ant.project.name}" />
        <replace file="${dist.dir}/README.txt" token="@OPTIONAL_STEP@" value="2. Execute ./bin/${ant.project.name}${line.separator}3. Or execute ./lib/app/${ant.project.name}.sh" />
    </target>

    <target name="createRPMREADME" depends="createREADME" if="${isXrpm}">
        <exec executable="uname" outputproperty="uname.os">
            <arg value="-s" />
        </exec>

        <exec executable="uname" outputproperty="uname.version">
            <arg value="-r" />
        </exec>

        <!-- Unix-specific README.txt replacements -->
        <echo>Create RPM Unix-specific README.txt and add appropriate version information</echo>
        <replace file="${dist.dir}/README.txt" token="@BINARY_PLATFORM@" value="${uname.os} ${uname.version}" />
        <replace file="${dist.dir}/README.txt" token="@BINARY_FILE@" value="hdfview-${app.version}-${uname.os}.rpm - ${ant.project.name} Installer" />
        <replace file="${dist.dir}/README.txt" token="@EXECUTABLE@" value="/opt/hdfview/bin/HDFView" />
        <replace file="${dist.dir}/README.txt" token="@INSTALL_TYPE@" value="Installation" />
        <replace file="${dist.dir}/README.txt" token="@INSTALL_PREFIX_HEADER@" value="To install ${ant.project.name} for ${uname.os}${line.separator}    Install RPM File Using RPM Command${line.separator}    ------------------------------------------------------------------------------${line.separator}
            To install a .rpm package in CentOS Linux, enter the following:${line.separator}        sudo rpm -i hdfview-${app.version}-1.x86_64.rpm${line.separator}
            The -i switch tells the package manager you want to install the file.${line.separator}${line.separator}    More information on the RPM installer can be found in the RPM documentation.${line.separator}
            ------------------------------------------------------------------------------${line.separator}${line.separator}" />
        <replace file="${dist.dir}/README.txt" token="@INSTALL_OR_RUN_FILE@" value="1. Install RPM File with dnf${line.separator}
            ------------------------------------------------------------------------------${line.separator}
            Alternately, you can use the dnf utility to install .rpm files.${line.separator}${line.separator}
            Enter the following:${line.separator}
                sudo dnf localinstall hdfview-${app.version}-1.x86_64.rpm${line.separator}
            The localinstall option instructions dnf to look at your current working directory for the installation${line.separator}${line.separator}" />
        <replace file="${dist.dir}/README.txt" token="@OPTIONAL_STEP@" value="    Remove RPM Package${line.separator}
            ------------------------------------------------------------------------------${line.separator}
            The RPM installer can be used to remove (or uninstall) a software package.${line.separator}${line.separator}
            Enter the following into a terminal window:${line.separator}
            sudo rpm -e ${ant.project.name}-${app.version}-1.x86_64${line.separator}
            The -e option instructs RPM to erase the software.${line.separator}${line.separator}" />
    </target>

    <target name="createDEBREADME" depends="createREADME" if="${isXdebian}">
        <exec executable="uname" outputproperty="uname.os">
            <arg value="-s" />
        </exec>

        <exec executable="uname" outputproperty="uname.version">
            <arg value="-r" />
        </exec>

        <!-- Unix-specific README.txt replacements -->
        <echo>Create DEB Unix-specific README.txt and add appropriate version information</echo>
        <replace file="${dist.dir}/README.txt" token="@BINARY_PLATFORM@" value="${uname.os} ${uname.version}" />
        <replace file="${dist.dir}/README.txt" token="@BINARY_FILE@" value="hdfview-${app.version}-${uname.os}.deb - ${ant.project.name} Installer" />
        <replace file="${dist.dir}/README.txt" token="@EXECUTABLE@" value="/opt/hdfview/bin/HDFView" />
        <replace file="${dist.dir}/README.txt" token="@INSTALL_TYPE@" value="Installation" />
        <replace file="${dist.dir}/README.txt" token="@INSTALL_PREFIX_HEADER@" value="To install ${ant.project.name} for ${uname.os}${line.separator}    Install DEB File Using dpkg Command${line.separator}    ------------------------------------------------------------------------------${line.separator}
            To install a .deb package in Ubuntu Linux, enter the following:${line.separator}        sudo dpkg -i hdfview-${app.version}-1_amd64.deb${line.separator}
            The –i switch tells the package manager you want to install the file.${line.separator}${line.separator}    More information on the dpkg installer can be found in the dpkg documentation.${line.separator}
            ------------------------------------------------------------------------------${line.separator}${line.separator}" />
        <replace file="${dist.dir}/README.txt" token="@INSTALL_OR_RUN_FILE@" value="1. Install deb File with dpkg${line.separator}
            ------------------------------------------------------------------------------${line.separator}
            Alternately, you can use the apt utility to install .deb files.${line.separator}${line.separator}
            Enter the following:${line.separator}
                sudo apt install ./hdfview-${app.version}-1_amd64.deb${line.separator}
            The ./ relative path (or an absolute path) cause apt to look at your current working directory for the installation${line.separator}${line.separator}" />
        <replace file="${dist.dir}/README.txt" token="@OPTIONAL_STEP@" value="    Remove deb Package${line.separator}
            ------------------------------------------------------------------------------${line.separator}
            The dpkg installer can be used to remove (or uninstall) a software package.${line.separator}${line.separator}
            Enter the following into a terminal window:${line.separator}
            sudo dpkg -r hdfview-${app.version}-1_amd64${line.separator}
            The -r option instructs dpkg to erase the software.${line.separator}${line.separator}
            The remove option instructs apt to erase the software.${line.separator}${line.separator}" />
    </target>

    <target name="createMacREADME" depends="createREADME" if="isMac">
        <exec executable="uname" outputproperty="uname.os">
            <arg value="-s" />
        </exec>

        <exec executable="uname" outputproperty="uname.version">
            <arg value="-r" />
        </exec>

        <!-- Mac-specific README.txt replacements -->
        <echo>Create Mac-specific README.txt and add appropriate version information</echo>
        <replace file="${dist.dir}/README.txt" token="@BINARY_PLATFORM@" value="Mac OS X Darwin ${uname.version}" />
        <replace file="${dist.dir}/README.txt" token="@BINARY_FILE@" value="${ant.project.name}-${app.version}.dmg - ${ant.project.name} Installer" />
        <replace file="${dist.dir}/README.txt" token="@EXECUTABLE@" value="/Applications/HDFView" />
        <replace file="${dist.dir}/README.txt" token="@JAVAMOD_TEXT@" value="" />
        <replace file="${dist.dir}/README.txt" token="@INSTALL_TYPE@" value="" />
        <replace file="${dist.dir}/README.txt" token="@INSTALL_PREFIX_HEADER@" value="To install ${ant.project.name} for ${uname.os}:" />
        <replace file="${dist.dir}/README.txt" token="@INSTALL_OR_RUN_FILE@" value="1. Execute ${ant.project.name}-${app.version}.dmg" />
        <replace file="${dist.dir}/README.txt" token="@OPTIONAL_STEP@" value="" />
    </target>

    <!-- =================================================================
          DEPLOY
          ================================================================= -->

    <target name="deploy" depends="deployWindows, deployUnix, deployMac" description="Creates the release directory containing the fully-prepared application binaries, libraries, etc. ready to be packaged up for distribution" />

    <target name="deployBase" depends="objectjar,jar,javadoc">
        <mkdir dir="${release.dir}" />
        <mkdir dir="${release.dir}/extra" />
        <mkdir dir="${release.dir}/samples" />
        <mkdir dir="${release.dir}/doc" />
        <mkdir dir="${release.dir}/plugin" />

        <!-- Copy the application and dependencies -->
        <copy todir="${release.dir}">
            <fileset dir="${jar.dir}" includes="${ant.project.name}.jar" />
            <fileset dir="${jar.dir}" includes="hdfobject.jar" />
            <fileset dir="${lib.dir}" includes="fits.jar netcdf.jar" excludes="*sources.jar" />
            <fileset dir="${lib.dir}/extra" includes="slf4j-api${version.slf4j}.jar" excludes="*sources.jar" />
            <fileset dir="${lib.dir}/extra" includes="slf4j-nop${version.slf4j}.jar" excludes="*sources.jar" />
            <fileset dir="${lib.dir}/ext/swt" includes="*.jar" />
            <fileset file="${lib.dir}/ext/swt/${machine.os}/${machine.arch}/swt.jar" />
            <fileset file="${packagefiles.dir}/simplelogger.properties" />
        </copy>

        <copy todir="${release.dir}/extra">
            <fileset dir="${lib.dir}/extra" includes="slf4j-simple${version.slf4j}.jar" excludes="*sources.jar" />
        </copy>

        <!-- Copy the documentation -->
        <copy todir="${release.dir}/doc/javadocs" failonerror="false">
            <fileset dir="${javadoc.dir}" />
        </copy>
        <copy todir="${release.dir}/doc">
            <fileset dir="${docs.dir}" />
        </copy>

        <!-- Change to unzip task -->
        <!-- <untar src="${userguide.dir}/UsersGuide.tar.gz" dest="${release.dir}/doc" compression="gzip" /> -->

        <!-- Copy the samples -->
        <copy todir="${release.dir}/samples">
            <fileset dir="${samples.dir}" />
        </copy>
        <echo if:set="isWindows">isWindows=${isWindows}</echo>
        <echo if:set="isUnix">isUnix=${isUnix}</echo>
        <echo if:set="isMac">isMac=${isMac}</echo>
    </target>

    <target name="deployWindows" depends="deployBase, objectjar,jar,javadoc" if="isWindows">
        <!-- Copy the application and dependencies -->
        <mkdir dir="${release.dir}/bin" />
        <echo> Copy the windows application and dependencies</echo>
        <copy todir="${release.dir}">
            <fileset dir="${hdf.lib.dir}">
                <include name="*.jar" />
                <include name="hdf_java.dll" />
                <exclude name="slf4j*.jar" />
                <exclude name="*.lib" />
            </fileset>
            <fileset dir="${hdf5.lib.dir}">
                <include name="*.jar" />
                <include name="hdf5_java.dll" />
                <exclude name="slf4j*.jar" />
                <exclude name="*.lib" />
            </fileset>
        </copy>
        <copy todir="${release.dir}/bin">
            <fileset dir="${hdf.lib.dir}">
                <include name="hdf_java.dll" />
            </fileset>
            <fileset dir="${hdf.lib.dir}/../bin">
                <include name="hdf_java.dll" />
                <include name="hdf.dll"/>
                <include name="mfhdf.dll"/>
            </fileset>
            <fileset dir="${hdf5.lib.dir}">
                <include name="hdf5_java.dll" />
            </fileset>
            <fileset dir="${hdf5.lib.dir}/../bin">
                <include name="hdf5_java.dll" />
                <include name="hdf5.dll"/>
            </fileset>
        </copy>
        <!-- Optional copy xdr -->
        <copy todir="${release.dir}/bin" failonerror="false">
            <fileset dir="${hdf.lib.dir}/../bin">
                <include name="xdr.dll"/>
            </fileset>
        </copy>
        <!-- Optional copy plugins -->
        <copy todir="${release.dir}/bin/plugin" failonerror="false">
            <fileset dir="${hdf5.lib.dir}/plugin">
                <include name="*.dll" />
            </fileset>
        </copy>

        <!-- Create the run batch file -->
        <copy file="${packagefiles.dir}/hdfview.bat.in" tofile="${release.dir}/hdfview.bat" />

        <property name="runscript.slf4j" value="slf4j-nop${version.slf4j}.jar" />
        <replace file="${release.dir}/hdfview.bat" token="@SLF4J@" value="${runscript.slf4j}" />
    </target>

    <target name="deployUnix" depends="deployBase, objectjar, jar, javadoc" if="isUnix">
        <!-- Copy the application and dependencies -->
        <echo> Copy the unix application and dependencies</echo>
        <copy todir="${release.dir}">
            <fileset dir="${hdf.lib.dir}" followsymlinks="true">
                <include name="libhdf_java.so" />
                <include name="*.jar" />
                <exclude name="slf4j*.jar" />
            </fileset>
            <fileset dir="${hdf.lib.dir}" followsymlinks="true">
                <filename regex="libhdf\.so(\.[0-9][0-9])$"/>
            </fileset>
            <fileset dir="${hdf.lib.dir}" followsymlinks="true">
                <filename regex="libmfhdf\.so(\.[0-9][0-9])$"/>
            </fileset>
            <fileset dir="${hdf5.lib.dir}" followsymlinks="true">
                <include name="libhdf5_java.so" />
                <include name="*.jar" />
                <exclude name="slf4j*.jar" />
            </fileset>
            <fileset dir="${hdf5.lib.dir}" followsymlinks="true">
                <filename regex="libhdf5\.so(\.[0-9][0-9][0-9][0-9]?)$"/>
            </fileset>
        </copy>
        <!-- Optional copy xdr -->
        <copy todir="${release.dir}" failonerror="false">
            <fileset dir="${hdf.lib.dir}" followsymlinks="true">
                <filename regex="libxdr\.so(\.[0-9])$"/>
                <exclude name="*.a" />
            </fileset>
        </copy>
        <!-- Optional copy plugins -->
        <copy todir="${release.dir}/plugin" failonerror="false">
            <fileset dir="${hdf5.lib.dir}/plugin">
                <include name="*.so" />
            </fileset>
        </copy>

        <!-- Create the .sh run script -->
        <copy file="${packagefiles.dir}/hdfview.sh.in" tofile="${release.dir}/hdfview.sh" />

        <!-- Set the correct classpath for the run script -->
        <property name="runscript.slf4j" value="slf4j-nop${version.slf4j}.jar" />
        <replace file="${release.dir}/hdfview.sh" token="@SLF4J@" value="${runscript.slf4j}" />

        <chmod perm="ugo+rx">
            <fileset dir="${release.dir}" includes="**/**" excludes="doc/** samples/**" />
        </chmod>
    </target>

    <target name="deployMac" depends="deployBase, objectjar,jar,javadoc" if="isMac">
        <!-- Copy the application and dependencies -->
        <echo> Copy the mac application and dependencies</echo>
        <copy todir="${release.dir}">
            <fileset dir="${hdf.lib.dir}" followsymlinks="true">
                <include name="libhdf_java.dylib" />
                <include name="*.jar" />
                <exclude name="slf4j*.jar" />
            </fileset>
            <fileset dir="${hdf.lib.dir}" followsymlinks="true">
                <filename regex="libhdf(\.[0-9][0-9]?)(\.dylib)$"/>
                <exclude name="*.a" />
            </fileset>
            <fileset dir="${hdf.lib.dir}" followsymlinks="true">
                <filename regex="libmfhdf(\.[0-9][0-9]?)(\.dylib)$"/>
                <exclude name="*.a" />
            </fileset>
            <fileset dir="${hdf5.lib.dir}" followsymlinks="true">
                <include name="libhdf5_java.dylib" />
                <include name="*.jar" />
                <exclude name="slf4j*.jar" />
            </fileset>
            <fileset dir="${hdf5.lib.dir}" followsymlinks="true">
                <filename regex="libhdf5(\.[0-9][0-9][0-9][0-9]?)(\.dylib)$"/>
                <exclude name="*.a" />
            </fileset>
        </copy>
        <!-- Optional copy xdr -->
        <copy todir="${release.dir}" failonerror="false">
            <fileset dir="${hdf.lib.dir}" followsymlinks="true">
                <filename regex="libxdr(\.[0-9])(\.dylib)$"/>
                <exclude name="*.a" />
            </fileset>
        </copy>
        <!-- Optional copy plugins -->
        <copy todir="${release.dir}/plugin" failonerror="false">
            <fileset dir="${hdf5.lib.dir}/plugin">
                <include name="*.dylib" />
            </fileset>
        </copy>
    </target>

    <!-- =================================================================
          PACKAGE SOURCE
          ================================================================= -->

    <target name="packageSource" depends="packageSourceWindows, packageSourceUnix" description="Packages the application source files into a compressed archive" />

    <target name="packageSourceWindows" depends="clean-package" if="isWindows">
        <zip destfile="${build.dir}/${ant.project.name}-${app.version}-source.zip">
            <zipfileset dir="${basedir}" excludes="bin/** build/** .*
                  lib/eos/**
                  lib/*sources.jar
                  lib/fest-assert-*.jar
                  lib/fest-reflect-*.jar
                  lib/fest-swing-*.jar
                  lib/fest-util-*.jar
                  lib/jcip-annotations-*.jar
                  lib/extra/hamcrest*.jar
                  lib/extra/junit*.jar
                  lib/extra/netcdf*.jar
                  lib/extra/*sources.jar" />
        </zip>
    </target>

    <target name="packageSourceUnix" depends="clean-package" if="isUnix">
        <tar destfile="${build.dir}/${ant.project.name}-${app.version}-source.tar.gz" compression="gzip">
            <tarfileset dir="${basedir}" excludes="bin/** build/** .*
                  lib/eos/**
                  lib/*sources.jar
                  lib/fest-assert-*.jar
                  lib/fest-reflect-*.jar
                  lib/fest-swing-*.jar
                  lib/fest-util-*.jar
                  lib/jcip-annotations-*.jar
                  lib/extra/hamcrest*.jar
                  lib/extra/junit*.jar
                  lib/extra/netcdf*.jar
                  lib/extra/*sources.jar" />
        </tar>
    </target>

    <!-- =================================================================
          JPackage
         ================================================================= -->

    <target name="createJPackageBase" depends="clean-package, deploy">
        <mkdir dir="${dist.dir}" />

        <!-- Bundle jre -->
        <echo>Bundling JRE with jdeps and jlink...</echo>
        <jdepslink java.bindir="${java.home}/bin" />

        <condition property="isXMac" else="false">
            <and>
                <equals arg1="${isMac}" arg2="true" />
                <equals arg1="${XPackage}" arg2="true" />
            </and>
        </condition>
        <echo if:set="isXMac">isXMac=${isXMac}</echo>

        <condition property="isXUnix" else="false">
            <and>
                <equals arg1="${isUnix}" arg2="true" />
                <equals arg1="${XPackage}" arg2="true" />
            </and>
        </condition>
        <echo if:set="isXUnix">isXUnix=${isXUnix}</echo>

        <condition property="isXdebian" else="false">
            <and>
                <equals arg1="${isUnix}" arg2="true" />
                <equals arg1="${isUbuntu}" arg2="true" />
                <equals arg1="${XPackage}" arg2="true" />
            </and>
        </condition>
        <echo if:set="isXdebian">isXdebian=${isXdebian}</echo>

        <condition property="isXrpm" else="false">
            <and>
                <equals arg1="${isUnix}" arg2="true" />
                <equals arg1="${XPackage}" arg2="true" />
                <not>
                    <equals arg1="${isUbuntu}" arg2="true" />
                </not>
            </and>
        </condition>
        <echo if:set="isXrpm">isXrpm=${isXrpm}</echo>

        <condition property="isXWindows" else="false">
            <and>
                <equals arg1="${isWindows}" arg2="true" />
                <equals arg1="${XPackage}" arg2="true" />
            </and>
        </condition>
        <echo if:set="isXWindows">isXWindows=${isXWindows}</echo>

        <condition property="isAppMac" else="false">
            <and>
                <equals arg1="${isMac}" arg2="true" />
                <not>
                    <equals arg1="${XPackage}" arg2="true" />
                </not>
            </and>
        </condition>
        <echo if:set="isAppMac">isAppMac=${isAppMac}</echo>

        <condition property="isAppUnix" else="false">
            <and>
                <equals arg1="${isUnix}" arg2="true" />
                <not>
                    <equals arg1="${XPackage}" arg2="true" />
                </not>
            </and>
        </condition>
        <echo if:set="isAppUnix">isAppUnix=${isAppUnix}</echo>

        <condition property="isAppWindows" else="false">
            <and>
                <equals arg1="${isWindows}" arg2="true" />
                <not>
                    <equals arg1="${XPackage}" arg2="true" />
                </not>
            </and>
        </condition>
        <echo if:set="isAppWindows">isAppWindows=${isAppWindows}</echo>
    </target>

    <!-- =================================================================
          BINARY - PACKAGE
          ================================================================= -->
    <target name="binaryPackage" depends="binaryPackX"
        description="Packages into a distributable form"  />

    <target name="binaryAppPackage" depends="binaryPack"
        description="Packages the app image into a distributable form"  />

    <!-- =================================================================
          BINARY - PACKX
          ================================================================= -->
    <target name="setXPackage">
        <property name="XPackage" value="true" />
    </target>

    <target name="binaryPackX" depends="setXPackage, binaryPackXWindows, binaryPackXUnix, binaryPackXMac"
        description="Packages up the installer, the license file and the README file into a distributable form"  />

    <target name="binaryPackXWindows" depends="createJXPackage, createWindowsREADME" if="${isXWindows}">
        <mkdir dir="${dist.dir}" />

        <attrib file="${basedir}\${dist.dir}\${ant.project.name}-${app.version}.exe" readonly="false" />
        <echo message="xxxx Sign the windows binary xxxx"/>
        <!-- Sign the generated exe -->
        <exec executable="${env.SIGNTOOLDIR}\signtool.exe" failifexecutionfails="false">
            <arg value="sign" />
            <arg value="/v" />
            <arg value="/debug" />
            <arg value="/fd" />
            <arg value="SHA256" />
            <arg value="/d" />
            <arg value="${ant.project.name} ${app.version} Utility" />
            <arg value="/f" />
            <arg value="${env.CERTIFICATE}" />
            <arg value="/p" />
            <arg value="${env.SIGNPASSWORD}" />
            <arg value="/t" />
            <arg value="http://timestamp.digicert.com" />
            <arg value="${basedir}\${dist.dir}\${ant.project.name}-${app.version}.exe" />
        </exec>

        <echo message="xxxx Package the windows binary xxxx"/>
        <!-- Copy over license file -->
        <copy todir="${dist.dir}">
            <fileset dir="${basedir}" includes="COPYING" />
        </copy>

        <!-- Compress everything into one zip file -->
        <condition property="win.extension" value="win64" else="win32">
            <contains string="${os.arch}" substring="64" />
        </condition>
        <zip destfile="${dist.dir}/${ant.project.name}-${app.version}-${win.extension}.zip" basedir="${dist.dir}" />
    </target>

    <target name="binaryPackXUnix" depends="createJXPackage, createDEBREADME, createRPMREADME" if="${isXUnix}">
        <echo message="xxxx Package the unix binary xxxx"/>
        <!-- Copy over license file -->
        <copy todir="${dist.dir}">
            <fileset dir="${basedir}" includes="COPYING" />
        </copy>

        <exec executable="uname" outputproperty="uname.os">
            <arg value="-s" />
        </exec>

        <exec executable="uname" outputproperty="uname.version">
            <arg value="-r" />
        </exec>

        <!-- Compress everything into one tar.gz file -->
        <tar destfile="${dist.dir}/${ant.project.name}-${app.version}-${uname.os}-${machine.arch}.tar.gz" compression="gzip">
            <tarfileset dir="${dist.dir}" filemode="755">
                <exclude name="temp.tar.gz" />
            </tarfileset>
        </tar>
        <chmod perm="ugo+rx" file="${dist.dir}/${ant.project.name}-${app.version}-${uname.os}-${machine.arch}.tar.gz" />
        <chmod perm="u+w" file="${dist.dir}/${ant.project.name}-${app.version}-${uname.os}-${machine.arch}.tar.gz" />
    </target>

    <target name="binaryPackXMac" depends="createJXPackageMac, createMacREADME" if="${isXMac}">
        <!-- unlock keychain -->
        <exec executable="security" dir="${dist.dir}" failonerror="true">
            <arg value="unlock-keychain" />
            <arg value="-p" />
            <arg value="${pass.keychain_key}" />
            <arg value="${name.keychain_key}" />
        </exec>

        <echo message="xxxx Code sign the mac dmg xxxx"/>
        <!-- Code signing the dmg -->
        <exec executable="codesign" dir="${dist.dir}" failonerror="true">
            <arg value="--force" />
            <arg value="--timestamp" />
            <arg value="--options" />
            <arg value="runtime" />
            <arg value="--entitlements" />
            <arg value="${basedir}/${lib.dir}/macosx/distribution.entitlements" />
            <arg value="--verbose=4" />
            <arg value="--strict" />
            <arg value="--sign" />
            <arg value="${sign.account}" />
            <arg value="--deep" />
            <arg value="${ant.project.name}-${app.version}.dmg" />
        </exec>

        <echo message="xxxx Check for secure dmg timestamp xxxx"/>
        <!-- Code signing the application image -->
        <exec executable="codesign" dir="${dist.dir}" failonerror="true">
            <arg value="-dvv" />
            <arg value="${ant.project.name}-${app.version}.dmg" />
        </exec>

        <echo message="xxxx Verify dmg xxxx"/>
        <exec dir="${dist.dir}" executable="hdiutil">
            <arg value="verify" />
            <arg value="${ant.project.name}-${app.version}.dmg" />
        </exec>

        <echo message="xxxx Notarize dmg xxxx"/>
        <antcall target="submit-notary" />

        <echo message="xxxx Staple notary ID to dmg xxxx"/>
        <antcall target="staple-notary" />

        <echo message="xxxx Package the mac dmg binary xxxx"/>
        <!-- Copy over license file -->
        <copy tofile="${dist.dir}/COPYING.txt">
            <fileset dir="${basedir}" includes="COPYING" />
        </copy>

        <exec executable="uname" outputproperty="uname.os">
            <arg value="-s" />
        </exec>

        <exec executable="uname" outputproperty="uname.version">
            <arg value="-r" />
        </exec>

        <exec dir="${dist.dir}" executable="hdiutil">
            <arg value="verify" />
            <arg value="${ant.project.name}-${app.version}.dmg" />
        </exec>

        <echo message="xxxx Compress the mac dmg binary xxxx"/>
        <!-- Copy over license file -->
        <copy tofile="${dist.dir}/COPYING.txt">
            <fileset dir="${basedir}" includes="COPYING" />
        </copy>

        <!-- Compress everything into one tar.gz file -->
        <tar destfile="${dist.dir}/${ant.project.name}-${app.version}-${uname.os}.tar.gz" compression="gzip">
            <tarfileset dir="${dist.dir}" filemode="755">
                <include name="COPYING.txt" />
                <include name="README.txt" />
                <include name="${ant.project.name}-${app.version}.dmg" />
            </tarfileset>
        </tar>

    </target>

    <!-- =================================================================
          JXPackage - native
         ================================================================= -->

    <target name="createJXPackage" depends="createJXPackageWindows, createJXPackageUnix, createJXPackageMac"
            description="Create the final package for distribution" />

    <!-- package args for fixed jpackage -->
    <target name="createJXPackageMac" depends="createJPackageBase" if="${isXMac}">
        <!-- unlock keychain -->
        <exec executable="security" dir="${dist.dir}" failonerror="true">
            <arg value="unlock-keychain" />
            <arg value="-p" />
            <arg value="${pass.keychain_key}" />
            <arg value="${name.keychain_key}" />
        </exec>

        <echo> JXPackage the mac application</echo>
        <exec executable="${java.home}/bin/jpackage">
            <!-- Basic usage -->
            <arg value="--verbose" />
            <arg value="--name" />
            <arg value="${ant.project.name}" />
            <arg value="--module-path" />
            <arg value="${basedir}/${release.dir}" />
            <arg value="--input" />
            <arg value="${release.dir}" />
            <arg value="--main-jar" />
            <arg value="${ant.project.name}.jar"/>
            <arg value="--main-class" />
            <arg value="${main-class}"/>
            <arg value="--dest" />
            <arg value="${dist.dir}" />
            <!-- Package metadata -->
            <arg value="--app-version" />
            <arg value="${app.version}" />
            <arg value="--copyright" />
            <arg value="Copyright 2006 by The HDF Group" />
            <arg value="--description" />
            <arg value="A visual tool for browsing and editing HDF files" />
            <arg value="--vendor" />
            <arg value="The HDF Group" />
            <arg value="--license-file" />
            <arg value="${basedir}/COPYING" />
            <!-- File associations -->
            <arg value="--file-associations" />
            <arg value="${basedir}/package_files/HDFViewHDF.properties" />
            <arg value="--file-associations" />
            <arg value="${basedir}/package_files/HDFViewH4.properties" />
            <arg value="--file-associations" />
            <arg value="${basedir}/package_files/HDFViewHDF4.properties" />
            <arg value="--file-associations" />
            <arg value="${basedir}/package_files/HDFViewH5.properties" />
            <arg value="--file-associations" />
            <arg value="${basedir}/package_files/HDFViewHDF5.properties" />
            <!-- Launchers -->
            <!-- <arg value="- -arguments" />
            <arg value="-Dhdfview.root='/Applications/HDF_Group/${ant.project.name}'" /> -->
            <arg value="--arguments" />
            <arg value="-Dhdfview.root='$APPDIR'" />
            <arg value="--java-options" />
            <arg value="-Xmx1024M" />
            <arg value="--java-options" />
            <arg value="-XstartOnFirstThread" />
            <!-- <arg value="- -java-options" />
            <arg value="-Djava.library.path='/Applications/HDF_Group/${ant.project.name}/lib:/Applications/HDF_Group/${ant.project.name}/lib/ext'" /> -->
            <arg value="--java-options" />
            <arg value="-Djava.library.path='$APPDIR'" />
            <!-- Application images -->
            <arg value="--resource-dir" />
            <arg value="${basedir}/package_files/macosx" />

            <!-- Runtime images -->
            <arg value="--runtime-image" />
            <arg value="${jar.dir}/jre" />
            <!-- Platform-specific details -->
            <!-- <arg value="- -install-dir" /> -->
            <!-- <arg value="/Applications/HDF_Group/${ant.project.name}" /> -->
            <arg value="--type" />
            <arg value="dmg" />
            <arg value="--icon" />
            <arg value="${basedir}/package_files/macosx/HDFView.icns" />
            <arg value="--mac-sign" />
            <arg value="--mac-package-identifier" />
            <arg value="HDFView.hdfgroup.org" />
            <arg value="--mac-package-name" />
            <arg value="${ant.project.name}-${app.version}" />
            <arg value="--mac-package-signing-prefix" />
            <arg value="org.hdfgroup.HDFView" />
            <arg value="--mac-signing-key-user-name" />
            <arg value="The HDF Group (${sign.account})" />
            <arg value="--mac-signing-keychain" />
            <arg value="${name.keychain_key}" />
        </exec>
    </target>

    <target name="createJXPackageUnix" depends="createJPackageBase" if="${isXUnix}">
        <echo> JXPackage the unix application</echo>
        <exec executable="${java.home}/bin/jpackage">
            <!-- Basic usage -->
            <arg value="--verbose" />
            <arg value="--name" />
            <arg value="${ant.project.name}" />
            <arg value="--module-path" />
            <arg value="${basedir}/${release.dir}" />
            <arg value="--input" />
            <arg value="${release.dir}" />
            <arg value="--main-jar" />
            <arg value="${ant.project.name}.jar"/>
            <arg value="--main-class" />
            <arg value="${main-class}"/>
            <arg value="--dest" />
            <arg value="${dist.dir}" />
            <!-- Package metadata -->
            <arg value="--app-version" />
            <arg value="${app.version}" />
            <arg value="--copyright" />
            <arg value="Copyright 2006 by The HDF Group" />
            <arg value="--description" />
            <arg value="A visual tool for browsing and editing HDF files" />
            <arg value="--vendor" />
            <arg value="The HDF Group" />
            <!-- <arg value="- -license-file" />
            <arg value="${basedir}/COPYING" /> -->
            <!-- File associations -->
            <arg value="--file-associations" />
            <arg value="${basedir}/package_files/HDFViewHDF.properties" />
            <arg value="--file-associations" />
            <arg value="${basedir}/package_files/HDFViewH4.properties" />
            <arg value="--file-associations" />
            <arg value="${basedir}/package_files/HDFViewHDF4.properties" />
            <arg value="--file-associations" />
            <arg value="${basedir}/package_files/HDFViewH5.properties" />
            <arg value="--file-associations" />
            <arg value="${basedir}/package_files/HDFViewHDF5.properties" />
            <!-- Launchers -->
            <arg value="--arguments" />
            <arg value="-Dhdfview.root='$APPDIR'" />
            <arg value="--java-options" />
            <arg value="-Xmx1024M" />
            <arg value="--java-options" />
            <arg value="-Djava.library.path='$APPDIR'" />
            <!-- Application images -->
            <arg value="--icon" />
            <arg value="${basedir}/package_files/hdfview.png" />
            <arg value="--linux-menu-group" />
            <arg value="The HDF Group" />
            <!-- Runtime images -->
            <!-- <arg value="- -install-dir" />
            <arg value="/opt/HDF_Group/${ant.project.name}" /> -->
            <arg value="--runtime-image" />
            <arg value="${jar.dir}/jre" />
            <!-- Platform-specific details -->
        </exec>
    </target>

    <target name="createJXPackageWindows" depends="createJPackageBase" if="${isXWindows}">
        <echo> JXPackage the windows application</echo>

        <copy todir="${jar.dir}/jre/bin">
            <fileset dir="${release.dir}/bin">
                <include name="*.dll"/>
            </fileset>
        </copy>

        <exec executable="${java.home}/bin/jpackage">
            <!-- Basic usage -->
            <arg value="--verbose" />
            <arg value="--name" />
            <arg value="${ant.project.name}" />
            <arg value="--module-path" />
            <arg value="${basedir}/${release.dir}" />
            <arg value="--input" />
            <arg value="${release.dir}" />
            <arg value="--main-jar" />
            <arg value="${ant.project.name}.jar"/>
            <arg value="--main-class" />
            <arg value="${main-class}"/>
            <arg value="--dest" />
            <arg value="${dist.dir}" />
            <!-- Package metadata -->
            <arg value="--app-version" />
            <arg value="${app.version}" />
            <arg value="--copyright" />
            <arg value="&quot;Copyright 2006 by The HDF Group&quot;" />
            <arg value="--description" />
            <arg value="&quot;A visual tool for browsing and editing HDF files&quot;" />
            <arg value="--vendor" />
            <arg value="&quot;The HDF Group&quot;" />
            <arg value="--license-file" />
            <arg value="${basedir}/COPYING" />
            <!-- File associations -->
            <arg value="--file-associations" />
            <arg value="${basedir}/package_files/HDFViewHDF.properties" />
            <arg value="--file-associations" />
            <arg value="${basedir}/package_files/HDFViewH4.properties" />
            <arg value="--file-associations" />
            <arg value="${basedir}/package_files/HDFViewHDF4.properties" />
            <arg value="--file-associations" />
            <arg value="${basedir}/package_files/HDFViewH5.properties" />
            <arg value="--file-associations" />
            <arg value="${basedir}/package_files/HDFViewHDF5.properties" />
            <!-- Launchers -->
            <arg value="--arguments" />
            <arg value="-Dhdfview.root=$APPDIR" />
            <arg value="--java-options" />
            <arg value="-Xmx1024M" />
            <arg value="--java-options" />
            <arg value="-Djava.library.path=$APPDIR" />
            <!-- Application images -->
            <arg value="--icon" />
            <arg value="${basedir}/package_files/hdfview.ico" />
            <arg value="--temp" />
            <arg value="${build.dir}/temp" />
            <!-- Runtime images -->
            <arg value="--install-dir" />
            <arg value="${ant.project.name}" />
            <arg value="--runtime-image" />
            <arg value="${jar.dir}/jre" />
            <!-- Platform-specific details -->
            <arg value="--win-console" />
            <arg value="--win-dir-chooser" />
            <arg value="--win-per-user-install" />
            <arg value="--win-menu" />
            <arg value="--win-menu-group" />
            <arg value="The HDF Group" />
            <!-- create exe installer - msi needs more work -->
            <!-- <arg value="- -type" />
            <arg value="msi" /> -->
        </exec>
    </target>

    <!-- =================================================================
          MAC NOTARY FOR JXPACKAGE
          ================================================================= -->

    <target name="zip-submit-notary" if="sign.enable">
        <exec executable="/usr/bin/xcrun" failonerror="true"
              outputproperty="zipUUID.txt">
            <arg value="notarytool"/>
            <arg value="submit"/>
            <arg value="--wait"/>
            <arg value="--output-format"/>
            <arg value="json"/>
            <arg value="--apple-id"/>
            <arg value="${notarize.account}"/>
            <arg value="--password"/>
            <arg value="${notarize.keychain_key}"/>
            <arg value="--team-id"/>
            <arg value="${sign.account}"/>
            <arg value="${dist.dir}/${ant.project.name}-${app.version}.zip"/>
        </exec>
        <echo>.....notarize-zip-app output:${zipUUID.txt}.....</echo>
        <loadresource property="zipUUID">
            <concat>${zipUUID.txt}</concat>
            <filterchain>
                <tokenfilter>
                    <stringtokenizer delims=",:&quot;" suppressdelims="true" />
                    <containsregex pattern="([0-9a-fA-F]+\-[0-9a-fA-F]+\-[0-9a-fA-F]+\-[0-9a-fA-F]+\-[0-9a-fA-F]+)" replace="\1" />
                </tokenfilter>
                <striplinebreaks/>
            </filterchain>
        </loadresource>
        <echo>*** notarize-zip-app:${zipUUID} ***</echo>
    </target>

    <target name="zip-post-notary" if="sign.enable">
        <exec executable="/usr/bin/xcrun" failonerror="true" outputproperty="logInfo" resultproperty="logUUID">
            <redirector output="notary.txt" alwayslog="true"/>
            <arg value="notarytool"/>
            <arg value="info"/>
            <arg value="--apple-id"/>
            <arg value="${notarize.account}"/>
            <arg value="--password"/>
            <arg value="${notarize.keychain_key}"/>
            <arg value="--team-id"/>
            <arg value="${sign.account}"/>
            <arg value="${zipUUID}"/>
        </exec>
        <condition property="isnotarized">
            <resourcecontains resource="notary.txt" substring="success"/>
        </condition>
        <echo>*** zip-notarize-info:${logInfo} ***</echo>
    </target>

    <!-- Staple the received notarization to the app -->
    <!-- run this after notarization is completed -->
    <target name="zip-staple-notary" if="sign.enable">
        <echo message="*** Stapling notarization to Mac Build ***"/>
        <exec executable="/usr/bin/xcrun" dir="${dist.dir}" failonerror="true">
            <arg value="stapler"/>
            <arg value="staple"/>
            <arg value="${ant.project.name}.app"/>
        </exec>

        <!-- verify staple -->
        <exec executable="/usr/bin/xcrun" dir="${dist.dir}">
            <arg value="stapler"/>
            <arg value="validate"/>
            <arg value="-v" />
            <arg value="${ant.project.name}.app"/>
        </exec>
    </target>

    <!-- =================================================================
          BINARY - PACK
          ================================================================= -->
    <target name="binaryPack" depends="clean-package, binaryPackWindows, binaryPackUnix, binaryPackMac"
        description="Packages up the release directory, the license file and the README file into a distributable form" />

    <target name="binaryPackWindows" depends="createJPackage, createWindowsAppREADME" if="${isAppWindows}">
        <mkdir dir="${dist.dir}" />

        <echo message="---- Create the windows installer binary ----"/>
        <!-- Copy over license file -->
        <copy todir="${dist.dir}">
            <fileset dir="${basedir}" includes="COPYING" />
        </copy>

        <!-- Compress everything into one zip file -->
        <condition property="win.extension" value="win64" else="win32">
            <contains string="${os.arch}" substring="64" />
        </condition>
        <zip destfile="${dist.dir}/${ant.project.name}-${app.version}-${win.extension}.zip" basedir="${dist.dir}" />
    </target>

    <target name="binaryPackUnix" depends="createJPackage, createUnixREADME" if="${isAppUnix}">
        <mkdir dir="${dist.dir}" />

        <echo message="---- Create the unix installer binary ----"/>
        <!-- Copy over license file -->
        <copy todir="${dist.dir}">
            <fileset dir="${basedir}" includes="COPYING" />
        </copy>

        <!-- Compress everything into one tar.gz file -->
        <tar destfile="${dist.dir}/${ant.project.name}-${app.version}-${uname.os}-${machine.arch}.tar.gz" compression="gzip">
            <tarfileset dir="${dist.dir}" filemode="755">
                <exclude name="temp.tar.gz" />
            </tarfileset>
        </tar>
        <chmod perm="ugo+rx" file="${dist.dir}/${ant.project.name}-${app.version}-${uname.os}-${machine.arch}.tar.gz" />
        <chmod perm="u+w" file="${dist.dir}/${ant.project.name}-${app.version}-${uname.os}-${machine.arch}.tar.gz" />
    </target>

    <target name="binaryPackMac" depends="createJPackageMac, createMacREADME" if="${isAppMac}">
        <!-- unlock keychain -->
        <exec executable="security" dir="${dist.dir}" failonerror="true">
            <arg value="unlock-keychain" />
            <arg value="-p" />
            <arg value="${pass.keychain_key}" />
            <arg value="${name.keychain_key}" />
        </exec>

        <echo message="---- Create the mac zip ----"/>
        <!-- create zip -->
        <exec executable="ditto" dir="${dist.dir}" failonerror="true">
            <arg value="-c" />
            <arg value="-k" />
            <arg value="--sequesterRsrc" />
            <arg value="--keepParent" />
            <arg value="${ant.project.name}.app" />
            <arg value="${ant.project.name}-${app.version}.zip" />
        </exec>

        <echo message="---- Code sign the mac zip ----"/>
        <!-- Code signing the dmg -->
        <exec executable="codesign" dir="${dist.dir}" failonerror="true">
            <arg value="--force" />
            <arg value="--timestamp" />
            <arg value="--options" />
            <arg value="runtime" />
            <arg value="--entitlements" />
            <arg value="${basedir}/${lib.dir}/macosx/distribution.entitlements" />
            <arg value="--verbose=4" />
            <arg value="--strict" />
            <arg value="--sign" />
            <arg value="${sign.account}" />
            <arg value="--deep" />
            <arg value="${ant.project.name}-${app.version}.zip" />
        </exec>

        <echo message="---- Check for secure timestamp ----"/>
        <!-- Code signing the application image -->
        <exec executable="codesign" dir="${dist.dir}" failonerror="true">
            <arg value="-dvv" />
            <arg value="${ant.project.name}-${app.version}.zip" />
        </exec>

        <echo message="---- Notarize zip AppImage ----"/>
        <antcall target="zip-submit-notary" />

        <!-- <antcall target="zip-post-notary" /> -->

        <echo message="---- Staple zip AppImage ----"/>
        <antcall target="zip-staple-notary" />

        <!-- verify codesign -->
        <echo message="---- Verify app codesign ----"/>
        <exec executable="codesign" dir="${dist.dir}">
            <arg value="-vvvv" />
            <arg value="--strict" />
            <arg value="${ant.project.name}.app" />
        </exec>

        <!-- verify gatekeeper -->
        <echo message="---- Verify app gatekeeper ----"/>
        <exec executable="spctl" dir="${dist.dir}" failonerror="true">
            <arg value="-vvvv" />
            <arg value="--assess" />
            <arg value="--type" />
            <arg value="execute" />
            <arg value="${ant.project.name}.app" />
        </exec>

        <exec executable="uname" outputproperty="uname.os">
            <arg value="-s" />
        </exec>

        <exec executable="uname" outputproperty="uname.version">
            <arg value="-r" />
        </exec>

        <!-- verify gatekeeper -->
        <exec executable="spctl" dir="${dist.dir}" failonerror="false">
            <arg value="-vvvv" />
            <arg value="--assess" />
            <arg value="--type" />
            <arg value="install" />
            <arg value="${ant.project.name}.app" />
        </exec>

        <echo message="---- Compress the mac app binary ----"/>
        <!-- Copy over license file -->
        <copy tofile="${dist.dir}/COPYING.txt">
            <fileset dir="${basedir}" includes="COPYING" />
        </copy>

        <!-- Compress everything into one tar.gz file -->
        <tar destfile="${dist.dir}/${ant.project.name}-${app.version}-${uname.os}.tar.gz" compression="gzip">
            <tarfileset dir="${dist.dir}" filemode="755">
                <include name="COPYING.txt" />
                <include name="README.txt" />
                <include name="${ant.project.name}.app/**" />
            </tarfileset>
        </tar>
    </target>

    <!-- =================================================================
          JPACKAGE APP-IMAGE
          ================================================================= -->

    <target name="createJPackage" depends="createJPackageWindows, createJPackageUnix, createJPackageMac"
            description="Create the final package for distribution" />

    <target name="createJPackageMac" depends="createJPackageBase" if="${isAppMac}">
        <!-- unlock keychain -->
        <exec executable="security" dir="${dist.dir}" failonerror="true">
            <arg value="unlock-keychain" />
            <arg value="-p" />
            <arg value="${pass.keychain_key}" />
            <arg value="${name.keychain_key}" />
        </exec>

        <echo> Create the mac jpackage</echo>
        <exec executable="${java.home}/bin/jpackage">
            <!-- Basic usage -->
            <arg value="--verbose" />
            <arg value="--name" />
            <arg value="${ant.project.name}" />
            <arg value="--module-path" />
            <arg value="${basedir}/${release.dir}" />
            <arg value="--input" />
            <arg value="${release.dir}" />
            <arg value="--main-jar" />
            <arg value="${ant.project.name}.jar"/>
            <arg value="--main-class" />
            <arg value="${main-class}"/>
            <arg value="--dest" />
            <arg value="${dist.dir}" />
            <!-- Package metadata -->
            <arg value="--app-version" />
            <arg value="${app.version}" />
            <arg value="--copyright" />
            <arg value="Copyright 2006 by The HDF Group" />
            <arg value="--description" />
            <arg value="A visual tool for browsing and editing HDF files" />
            <arg value="--vendor" />
            <arg value="The HDF Group" />
            <!-- <arg value="- -license-file" />
            <arg value="${basedir}/COPYING" /> -->
            <!-- Launchers -->
            <!-- <arg value="- -arguments" />
            <arg value="-Dhdfview.root='/Applications/HDF_Group/${ant.project.name}'" /> -->
            <arg value="--arguments" />
            <arg value="-Dhdfview.root='$APPDIR'" />
            <arg value="--java-options" />
            <arg value="-Xmx1024M" />
            <arg value="--java-options" />
            <arg value="-XstartOnFirstThread" />
            <!-- <arg value="- -java-options" />
            <arg value="-Djava.library.path='/Applications/HDF_Group/${ant.project.name}/lib:/Applications/HDF_Group/${ant.project.name}/lib/ext'" /> -->
            <arg value="--java-options" />
            <arg value="-Djava.library.path='$APPDIR'" />
            <!-- Application images -->
            <arg value="--resource-dir" />
            <arg value="${basedir}/package_files/macosx" />

            <!-- Runtime images -->
            <!-- <arg value="- -install-dir" />
            <arg value="/Applications/HDF_Group/${ant.project.name}" /> -->
            <arg value="--runtime-image" />
            <arg value="${jar.dir}/jre" />
            <!-- Platform-specific details -->
            <arg value="--type" />
            <arg value="app-image" />
            <arg value="--icon" />
            <arg value="${basedir}/package_files/macosx/HDFView.icns" />
            <arg value="--mac-sign" />
            <arg value="--mac-package-identifier" />
            <arg value="HDFView.hdfgroup.org" />
            <arg value="--mac-package-name" />
            <arg value="${ant.project.name}-${app.version}" />
            <arg value="--mac-package-signing-prefix" />
            <arg value="org.hdfgroup.HDFView" />
            <arg value="--mac-signing-key-user-name" />
            <arg value="The HDF Group (${sign.account})" />
        </exec>
    </target>

    <target name="createJPackageUnix" depends="createJPackageBase" if="${isAppUnix}">
        <echo> Create the unix jpackage</echo>
        <exec executable="${java.home}/bin/jpackage">
            <!-- Basic usage -->
            <arg value="--verbose" />
            <arg value="--name" />
            <arg value="${ant.project.name}" />
            <arg value="--module-path" />
            <arg value="${basedir}/${release.dir}" />
            <arg value="--input" />
            <arg value="${release.dir}" />
            <arg value="--main-jar" />
            <arg value="${ant.project.name}.jar"/>
            <arg value="--main-class" />
            <arg value="${main-class}"/>
            <arg value="--dest" />
            <arg value="${dist.dir}" />
            <!-- Package metadata -->
            <arg value="--app-version" />
            <arg value="${app.version}" />
            <arg value="--copyright" />
            <arg value="Copyright 2006 by The HDF Group" />
            <arg value="--description" />
            <arg value="A visual tool for browsing and editing HDF files" />
            <arg value="--vendor" />
            <arg value="The HDF Group" />
            <!-- <arg value="- -license-file" />
            <arg value="${basedir}/COPYING" /> -->
            <!-- File associations -->
            <!-- <arg value="- -file-associations" />
            <arg value="${basedir}/package_files/HDFViewHDF.properties" /> -->
            <!-- <arg value="- -file-associations" />
            <arg value="${basedir}/package_files/HDFViewHDF5.properties" /> -->
            <!-- Launchers -->
            <arg value="--arguments" />
            <arg value="-Dhdfview.root='$APPDIR'" />
            <arg value="--java-options" />
            <arg value="-Xmx1024M" />
            <arg value="--java-options" />
            <arg value="-Djava.library.path='$APPDIR'" />
            <!-- Application images -->

            <!-- Runtime images -->
            <!-- <arg value="- -install-dir" />
            <arg value="/opt/HDF_Group/${ant.project.name}" /> -->
            <arg value="--runtime-image" />
            <arg value="${jar.dir}/jre" />
            <!-- Platform-specific details -->
            <arg value="--type" />
            <arg value="app-image" />
        </exec>
    </target>

    <target name="createJPackageWindows" depends="createJPackageBase" if="${isAppWindows}">
        <mkdir dir="${dist.dir}" />
        <echo> Create the windows jpackage</echo>

        <copy todir="${jar.dir}/jre/bin">
            <fileset dir="${release.dir}/bin">
                <include name="*.dll"/>
            </fileset>
        </copy>

        <exec executable="${java.home}/bin/jpackage">
            <!-- Basic usage -->
            <arg value="--verbose" />
            <arg value="--name" />
            <arg value="${ant.project.name}" />
            <arg value="--module-path" />
            <arg value="${basedir}/${release.dir}" />
            <arg value="--input" />
            <arg value="${release.dir}" />
            <arg value="--main-jar" />
            <arg value="${ant.project.name}.jar"/>
            <arg value="--main-class" />
            <arg value="${main-class}"/>
            <arg value="--dest" />
            <arg value="${dist.dir}" />
            <!-- Package metadata -->
            <arg value="--app-version" />
            <arg value="${app.version}" />
            <arg value="--copyright" />
            <arg value="&quot;Copyright 2006 by The HDF Group&quot;" />
            <arg value="--description" />
            <arg value="&quot;A visual tool for browsing and editing HDF files&quot;" />
            <arg value="--vendor" />
            <arg value="&quot;The HDF Group&quot;" />
            <!-- Launchers -->
            <arg value="--arguments" />
            <arg value="-Dhdfview.root=$APPDIR" />
            <arg value="--java-options" />
            <arg value="-Xmx1024M" />
            <arg value="--java-options" />
            <arg value="-Djava.library.path=$APPDIR" />
            <!-- Application images -->
            <!-- Runtime images -->
            <arg value="--runtime-image" />
            <arg value="${jar.dir}/jre" />
            <!-- Platform-specific details -->
            <arg value="--win-console" />
            <arg value="--type" />
            <arg value="app-image" />
        </exec>
    </target>

    <!-- =================================================================
          MAC NOTARY FOR JPACKAGE
          ================================================================= -->

    <target name="submit-notary" if="sign.enable">
        <exec executable="/usr/bin/xcrun" failonerror="true"
              outputproperty="retUUID.txt">
            <arg value="notarytool"/>
            <arg value="submit"/>
            <arg value="--wait"/>
            <arg value="--output-format"/>
            <arg value="json"/>
            <arg value="--apple-id"/>
            <arg value="${notarize.account}"/>
            <arg value="--password"/>
            <arg value="${notarize.keychain_key}"/>
            <arg value="--team-id"/>
            <arg value="${sign.account}"/>
            <arg value="${dist.dir}/${ant.project.name}-${app.version}.dmg"/>
        </exec>
        <echo>.....notarize-app output:${retUUID.txt}.....</echo>
        <loadresource property="retUUID">
            <concat>${retUUID.txt}</concat>
            <filterchain>
                <tokenfilter>
                    <stringtokenizer delims=",:&quot;" suppressdelims="true" />
                    <containsregex pattern="([0-9a-fA-F]+\-[0-9a-fA-F]+\-[0-9a-fA-F]+\-[0-9a-fA-F]+\-[0-9a-fA-F]+)" replace="\1" />
                </tokenfilter>
                <striplinebreaks/>
            </filterchain>
        </loadresource>
        <echo>*** notarize-app:${retUUID} ***</echo>
    </target>

    <target name="post-notary" if="sign.enable">
        <exec executable="/usr/bin/xcrun" failonerror="true" outputproperty="logInfo" resultproperty="logUUID">
            <redirector output="notary.txt" alwayslog="true"/>
            <arg value="notarytool"/>
            <arg value="info"/>
            <arg value="--apple-id"/>
            <arg value="${notarize.account}"/>
            <arg value="--password"/>
            <arg value="${notarize.keychain_key}"/>
            <arg value="--team-id"/>
            <arg value="${sign.account}"/>
            <arg value="${retUUID}"/>
        </exec>
        <condition property="isnotarized">
            <resourcecontains resource="notary.txt" substring="success"/>
        </condition>
        <echo>*** notarize-info:${logInfo} ***</echo>
    </target>

    <!-- Staple the received notarization to the app -->
    <!-- run this after notarization is completed -->
    <target name="staple-notary" if="sign.enable">
        <echo message="*** Stapling notarization to Mac Build ***"/>
        <exec executable="/usr/bin/xcrun" dir="${dist.dir}" failonerror="true">
            <arg value="stapler"/>
            <arg value="staple"/>
            <arg value="${ant.project.name}-${app.version}.dmg"/>
        </exec>

        <!-- verify staple -->
        <exec executable="/usr/bin/xcrun" dir="${dist.dir}">
            <arg value="stapler"/>
            <arg value="validate"/>
            <arg value="-v" />
            <arg value="${ant.project.name}-${app.version}.dmg"/>
        </exec>
    </target>

   <target name="main" depends="clean,run" />

</project>
