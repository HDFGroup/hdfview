package test.uitest;

import static org.eclipse.swtbot.swt.finder.matchers.WidgetMatcherFactory.widgetOfType;
import static org.junit.Assert.assertTrue;
import static org.junit.Assert.fail;

import java.io.File;

import org.eclipse.nebula.widgets.nattable.NatTable;
import org.eclipse.swt.widgets.Shell;
import org.eclipse.swtbot.nebula.nattable.finder.widgets.SWTBotNatTable;
import org.eclipse.swtbot.swt.finder.matchers.WithRegex;
import org.eclipse.swtbot.swt.finder.waits.Conditions;
import org.eclipse.swtbot.swt.finder.widgets.SWTBotShell;
import org.eclipse.swtbot.swt.finder.widgets.SWTBotTree;
import org.eclipse.swtbot.swt.finder.widgets.SWTBotTreeItem;
import org.junit.Test;

/*
 * Tests the ability of HDFView to display integer values as Hexadecimal
 * or Binary values.
 *
 * Note: Since the conversion of data values in the table to Hexadecimal
 * or Binary is simply a display conversion, the underlying data doesn't
 * change and calling something like table.getCellDataValueByPosition()
 * will not return the converted value. The displayed text values of
 * individual cells in the table also cannot be conveniently retrieved,
 * so as a workaround, the text field above the table is checked for
 * the correct value. So long as this text field is functioning properly,
 * it is guaranteed that we are retrieving the correct converted data
 * value.
 */
public class TestHDFViewIntConversions extends AbstractWindowTest {
    @Test
    public void checkHDF5GroupDS08() {
        String[][] expectedData =
            { { "-1", "-2", "-4", "-8", "-16", "-32", "-64", "-128" },
              { "-2", "-4", "-8", "-16", "-32", "-64", "-128", "0" },
              { "-4", "-8", "-16", "-32", "-64", "-128", "0", "0" },
              { "-8", "-16", "-32", "-64", "-128", "0", "0", "0" },
              { "-16", "-32", "-64", "-128", "0", "0", "0", "0" },
              { "-32", "-64", "-128", "0", "0", "0", "0", "0" },
              { "-64", "-128", "0", "0", "0", "0", "0", "0" },
              { "-128", "0", "0", "0", "0", "0", "0", "0" } };
        String[][] expectedDataHex =
            { { "FF", "FE", "FC", "F8", "F0", "E0", "C0", "80" },
              { "FE", "FC", "F8", "F0", "E0", "C0", "80", "00" },
              { "FC", "F8", "F0", "E0", "C0", "80", "00", "00" },
              { "F8", "F0", "E0", "C0", "80", "00", "00", "00" },
              { "F0", "E0", "C0", "80", "00", "00", "00", "00" },
              { "E0", "C0", "80", "00", "00", "00", "00", "00" },
              { "C0", "80", "00", "00", "00", "00", "00", "00" },
              { "80", "00", "00", "00", "00", "00", "00", "00" } };
        String[][] expectedDataBin =
            { { "11111111", "11111110", "11111100", "11111000", "11110000", "11100000", "11000000", "10000000" },
              { "11111110", "11111100", "11111000", "11110000", "11100000", "11000000", "10000000", "00000000" },
              { "11111100", "11111000", "11110000", "11100000", "11000000", "10000000", "00000000", "00000000" },
              { "11111000", "11110000", "11100000", "11000000", "10000000", "00000000", "00000000", "00000000" },
              { "11110000", "11100000", "11000000", "10000000", "00000000", "00000000", "00000000", "00000000" },
              { "11100000", "11000000", "10000000", "00000000", "00000000", "00000000", "00000000", "00000000" },
              { "11000000", "10000000", "00000000", "00000000", "00000000", "00000000", "00000000", "00000000" },
              { "10000000", "00000000", "00000000", "00000000", "00000000", "00000000", "00000000", "00000000" } };
        String[][] expectedDataSci =
            { { "-1.0E0", "-2.0E0", "-4.0E0", "-8.0E0", "-1.6E1", "-3.2E1", "-6.4E1", "-1.28E2" },
              { "-2.0E0", "-4.0E0", "-8.0E0", "-1.6E1", "-3.2E1", "-6.4E1", "-1.28E2", "0.0E0" },
              { "-4.0E0", "-8.0E0", "-1.6E1", "-3.2E1", "-6.4E1", "-1.28E2", "0.0E0", "0.0E0" },
              { "-8.0E0", "-1.6E1", "-3.2E1", "-6.4E1", "-1.28E2", "0.0E0", "0.0E0", "0.0E0" },
              { "-1.6E1", "-3.2E1", "-6.4E1", "-1.28E2", "0.0E0", "0.0E0", "0.0E0", "0.0E0" },
              { "-3.2E1", "-6.4E1", "-1.28E2", "0.0E0", "0.0E0", "0.0E0", "0.0E0", "0.0E0" },
              { "-6.4E1", "-1.28E2", "0.0E0", "0.0E0", "0.0E0", "0.0E0", "0.0E0", "0.0E0" },
              { "-1.28E2", "0.0E0", "0.0E0", "0.0E0", "0.0E0", "0.0E0", "0.0E0", "0.0E0" } };
        SWTBotShell tableShell = null;
        final String filename = "tintsize.h5";
        final String datasetName = "/DS08BITS";
        File hdf_file = openFile(filename, FILE_MODE.READ_ONLY);

        try {
            SWTBotTree filetree = bot.tree();

            checkFileTree(filetree, "checkHDF5GroupDS08()", 10, filename);

            // Open dataset 'DS08BITS'
            tableShell = openDataObject(filetree, filename, datasetName);
            final SWTBotNatTable dataTable = getNatTable(tableShell);

            testAllTableLocations(dataTable, expectedData, "checkHDF5GroupDS08()");

            tableShell.bot().menu("Show Hexadecimal").click();
            testAllTableLocations(dataTable, expectedDataHex, "checkHDF5GroupDS08()");

            tableShell.bot().menu("Show Binary").click();
            testAllTableLocations(dataTable, expectedDataBin, "checkHDF5GroupDS08()");

            tableShell.bot().menu("Show Scientific Notation").click();
            testAllTableLocations(dataTable, expectedDataSci, "checkHDF5GroupDS08()");
        }
        catch (Exception ex) {
            ex.printStackTrace();
            fail(ex.getMessage());
        }
        catch (AssertionError ae) {
            ae.printStackTrace();
            fail(ae.getMessage());
        }
        finally {
            /*
             * TODO: refactor into common method.
             */
            if (tableShell != null && tableShell.isOpen()) {
                tableShell.bot().menu("Close").click();
                bot.waitUntil(Conditions.shellCloses(tableShell));
            }

            try {
                closeFile(hdf_file, false);
            }
            catch (Exception ex) {
                ex.printStackTrace();
            }
        }
    }

    @Test
    public void checkHDF5GroupDU08() {
        String[][] expectedData =
            { { "255", "254", "252", "248", "240", "224", "192", "128" },
              { "254", "252", "248", "240", "224", "192", "128", "0" },
              { "252", "248", "240", "224", "192", "128", "0", "0" },
              { "248", "240", "224", "192", "128", "0", "0", "0" },
              { "240", "224", "192", "128", "0", "0", "0", "0" },
              { "224", "192", "128", "0", "0", "0", "0", "0" },
              { "192", "128", "0", "0", "0", "0", "0", "0" },
              { "128", "0", "0", "0", "0", "0", "0", "0" } };
        String[][] expectedDataHex =
            { { "FF", "FE", "FC", "F8", "F0", "E0", "C0", "80" },
              { "FE", "FC", "F8", "F0", "E0", "C0", "80", "00" },
              { "FC", "F8", "F0", "E0", "C0", "80", "00", "00" },
              { "F8", "F0", "E0", "C0", "80", "00", "00", "00" },
              { "F0", "E0", "C0", "80", "00", "00", "00", "00" },
              { "E0", "C0", "80", "00", "00", "00", "00", "00" },
              { "C0", "80", "00", "00", "00", "00", "00", "00" },
              { "80", "00", "00", "00", "00", "00", "00", "00" } };
        String[][] expectedDataBin =
            { { "11111111", "11111110", "11111100", "11111000", "11110000", "11100000", "11000000", "10000000" },
              { "11111110", "11111100", "11111000", "11110000", "11100000", "11000000", "10000000", "00000000" },
              { "11111100", "11111000", "11110000", "11100000", "11000000", "10000000", "00000000", "00000000" },
              { "11111000", "11110000", "11100000", "11000000", "10000000", "00000000", "00000000", "00000000" },
              { "11110000", "11100000", "11000000", "10000000", "00000000", "00000000", "00000000", "00000000" },
              { "11100000", "11000000", "10000000", "00000000", "00000000", "00000000", "00000000", "00000000" },
              { "11000000", "10000000", "00000000", "00000000", "00000000", "00000000", "00000000", "00000000" },
              { "10000000", "00000000", "00000000", "00000000", "00000000", "00000000", "00000000", "00000000" } };
        String[][] expectedDataSci =
            { { "2.55E2", "2.54E2", "2.52E2", "2.48E2", "2.4E2", "2.24E2", "1.92E2", "1.28E2" },
              { "2.54E2", "2.52E2", "2.48E2", "2.4E2", "2.24E2", "1.92E2", "1.28E2", "0.0E0" },
              { "2.52E2", "2.48E2", "2.4E2", "2.24E2", "1.92E2", "1.28E2", "0.0E0", "0.0E0" },
              { "2.48E2", "2.4E2", "2.24E2", "1.92E2", "1.28E2", "0.0E0", "0.0E0", "0.0E0" },
              { "2.4E2", "2.24E2", "1.92E2", "1.28E2", "0.0E0", "0.0E0", "0.0E0", "0.0E0" },
              { "2.24E2", "1.92E2", "1.28E2", "0.0E0", "0.0E0", "0.0E0", "0.0E0", "0.0E0" },
              { "1.92E2", "1.28E2", "0.0E0", "0.0E0", "0.0E0", "0.0E0", "0.0E0", "0.0E0" },
              { "1.28E2", "0.0E0", "0.0E0", "0.0E0", "0.0E0", "0.0E0", "0.0E0", "0.0E0" } };
        SWTBotShell tableShell = null;
        String filename = "tintsize.h5";
        String datasetName = "/DU08BITS";
        File hdf_file = openFile(filename, FILE_MODE.READ_ONLY);

        try {
            SWTBotTree filetree = bot.tree();

            checkFileTree(filetree, "checkHDF5GroupDU08()", 10, filename);

            // Open dataset 'DU08BITS'
            tableShell = openDataObject(filetree, filename, datasetName);
            final SWTBotNatTable dataTable = getNatTable(tableShell);

            testAllTableLocations(dataTable, expectedData, "checkHDF5GroupDU08()");

            tableShell.bot().menu("Show Hexadecimal").click();
            testAllTableLocations(dataTable, expectedDataHex, "checkHDF5GroupDU08()");

            tableShell.bot().menu("Show Binary").click();
            testAllTableLocations(dataTable, expectedDataBin, "checkHDF5GroupDU08()");

            tableShell.bot().menu("Show Scientific Notation").click();
            testAllTableLocations(dataTable, expectedDataSci, "checkHDF5GroupDU08()");
        }
        catch (Exception ex) {
            ex.printStackTrace();
            fail(ex.getMessage());
        }
        catch (AssertionError ae) {
            ae.printStackTrace();
            fail(ae.getMessage());
        }
        finally {
            if(tableShell != null && tableShell.isOpen()) {
                tableShell.bot().menu("Close").click();
                bot.waitUntil(Conditions.shellCloses(tableShell));
            }

            try {
                closeFile(hdf_file, false);
            }
            catch (Exception ex) {
                ex.printStackTrace();
            }
        }
    }

    @Test
    public void checkHDF5GroupDS16() {
        String[][] expectedData =
            { { "-1", "-2", "-4", "-8", "-16", "-32", "-64", "-128", "-256", "-512", "-1024", "-2048", "-4096", "-8192", "-16384", "-32768" },
              { "-2", "-4", "-8", "-16", "-32", "-64", "-128", "-256", "-512", "-1024", "-2048", "-4096", "-8192", "-16384", "-32768", "0" },
              { "-4", "-8", "-16", "-32", "-64", "-128", "-256", "-512", "-1024", "-2048", "-4096", "-8192", "-16384", "-32768", "0", "0" },
              { "-8", "-16", "-32", "-64", "-128", "-256", "-512", "-1024", "-2048", "-4096", "-8192", "-16384", "-32768", "0", "0", "0" },
              { "-16", "-32", "-64", "-128", "-256", "-512", "-1024", "-2048", "-4096", "-8192", "-16384", "-32768", "0", "0", "0", "0" },
              { "-32", "-64", "-128", "-256", "-512", "-1024", "-2048", "-4096", "-8192", "-16384", "-32768", "0", "0", "0", "0", "0" },
              { "-64", "-128", "-256", "-512", "-1024", "-2048", "-4096", "-8192", "-16384", "-32768", "0", "0", "0", "0", "0", "0" },
              { "-128", "-256", "-512", "-1024", "-2048", "-4096", "-8192", "-16384", "-32768", "0", "0", "0", "0", "0", "0", "0" } };
        String[][] expectedDataHex =
            { { "FFFF", "FFFE", "FFFC", "FFF8", "FFF0", "FFE0", "FFC0", "FF80", "FF00", "FE00", "FC00", "F800", "F000", "E000", "C000", "8000" },
              { "FFFE", "FFFC", "FFF8", "FFF0", "FFE0", "FFC0", "FF80", "FF00", "FE00", "FC00", "F800", "F000", "E000", "C000", "8000", "0000" },
              { "FFFC", "FFF8", "FFF0", "FFE0", "FFC0", "FF80", "FF00", "FE00", "FC00", "F800", "F000", "E000", "C000", "8000", "0000", "0000" },
              { "FFF8", "FFF0", "FFE0", "FFC0", "FF80", "FF00", "FE00", "FC00", "F800", "F000", "E000", "C000", "8000", "0000", "0000", "0000" },
              { "FFF0", "FFE0", "FFC0", "FF80", "FF00", "FE00", "FC00", "F800", "F000", "E000", "C000", "8000", "0000", "0000", "0000", "0000" },
              { "FFE0", "FFC0", "FF80", "FF00", "FE00", "FC00", "F800", "F000", "E000", "C000", "8000", "0000", "0000", "0000", "0000", "0000" },
              { "FFC0", "FF80", "FF00", "FE00", "FC00", "F800", "F000", "E000", "C000", "8000", "0000", "0000", "0000", "0000", "0000", "0000" },
              { "FF80", "FF00", "FE00", "FC00", "F800", "F000", "E000", "C000", "8000", "0000", "0000", "0000", "0000", "0000", "0000", "0000" } };
        String[][] expectedDataBin =
            { { "11111111 11111111", "11111111 11111110", "11111111 11111100", "11111111 11111000", "11111111 11110000", "11111111 11100000", "11111111 11000000", "11111111 10000000", "11111111 00000000", "11111110 00000000", "11111100 00000000", "11111000 00000000", "11110000 00000000", "11100000 00000000", "11000000 00000000", "10000000 00000000" },
              { "11111111 11111110", "11111111 11111100", "11111111 11111000", "11111111 11110000", "11111111 11100000", "11111111 11000000", "11111111 10000000", "11111111 00000000", "11111110 00000000", "11111100 00000000", "11111000 00000000", "11110000 00000000", "11100000 00000000", "11000000 00000000", "10000000 00000000", "00000000 00000000" },
              { "11111111 11111100", "11111111 11111000", "11111111 11110000", "11111111 11100000", "11111111 11000000", "11111111 10000000", "11111111 00000000", "11111110 00000000", "11111100 00000000", "11111000 00000000", "11110000 00000000", "11100000 00000000", "11000000 00000000", "10000000 00000000", "00000000 00000000", "00000000 00000000" },
              { "11111111 11111000", "11111111 11110000", "11111111 11100000", "11111111 11000000", "11111111 10000000", "11111111 00000000", "11111110 00000000", "11111100 00000000", "11111000 00000000", "11110000 00000000", "11100000 00000000", "11000000 00000000", "10000000 00000000", "00000000 00000000", "00000000 00000000", "00000000 00000000" },
              { "11111111 11110000", "11111111 11100000", "11111111 11000000", "11111111 10000000", "11111111 00000000", "11111110 00000000", "11111100 00000000", "11111000 00000000", "11110000 00000000", "11100000 00000000", "11000000 00000000", "10000000 00000000", "00000000 00000000", "00000000 00000000", "00000000 00000000", "00000000 00000000" },
              { "11111111 11100000", "11111111 11000000", "11111111 10000000", "11111111 00000000", "11111110 00000000", "11111100 00000000", "11111000 00000000", "11110000 00000000", "11100000 00000000", "11000000 00000000", "10000000 00000000", "00000000 00000000", "00000000 00000000", "00000000 00000000", "00000000 00000000", "00000000 00000000" },
              { "11111111 11000000", "11111111 10000000", "11111111 00000000", "11111110 00000000", "11111100 00000000", "11111000 00000000", "11110000 00000000", "11100000 00000000", "11000000 00000000", "10000000 00000000", "00000000 00000000", "00000000 00000000", "00000000 00000000", "00000000 00000000", "00000000 00000000", "00000000 00000000" },
              { "11111111 10000000", "11111111 00000000", "11111110 00000000", "11111100 00000000", "11111000 00000000", "11110000 00000000", "11100000 00000000", "11000000 00000000", "10000000 00000000", "00000000 00000000", "00000000 00000000", "00000000 00000000", "00000000 00000000", "00000000 00000000", "00000000 00000000", "00000000 00000000" } };
        String[][] expectedDataSci =
            { { "-1.0E0", "-2.0E0", "-4.0E0", "-8.0E0", "-1.6E1", "-3.2E1", "-6.4E1", "-1.28E2", "-2.56E2", "-5.12E2", "-1.024E3", "-2.048E3", "-4.096E3", "-8.192E3", "-1.6384E4", "-3.2768E4" },
              { "-2.0E0", "-4.0E0", "-8.0E0", "-1.6E1", "-3.2E1", "-6.4E1", "-1.28E2", "-2.56E2", "-5.12E2", "-1.024E3", "-2.048E3", "-4.096E3", "-8.192E3", "-1.6384E4", "-3.2768E4", "0.0E0" },
              { "-4.0E0", "-8.0E0", "-1.6E1", "-3.2E1", "-6.4E1", "-1.28E2", "-2.56E2", "-5.12E2", "-1.024E3", "-2.048E3", "-4.096E3", "-8.192E3", "-1.6384E4", "-3.2768E4", "0.0E0", "0.0E0" },
              { "-8.0E0", "-1.6E1", "-3.2E1", "-6.4E1", "-1.28E2", "-2.56E2", "-5.12E2", "-1.024E3", "-2.048E3", "-4.096E3", "-8.192E3", "-1.6384E4", "-3.2768E4", "0.0E0", "0.0E0", "0.0E0" },
              { "-1.6E1", "-3.2E1", "-6.4E1", "-1.28E2", "-2.56E2", "-5.12E2", "-1.024E3", "-2.048E3", "-4.096E3", "-8.192E3", "-1.6384E4", "-3.2768E4", "0.0E0", "0.0E0", "0.0E0", "0.0E0" },
              { "-3.2E1", "-6.4E1", "-1.28E2", "-2.56E2", "-5.12E2", "-1.024E3", "-2.048E3", "-4.096E3", "-8.192E3", "-1.6384E4", "-3.2768E4", "0.0E0", "0.0E0", "0.0E0", "0.0E0", "0.0E0" },
              { "-6.4E1", "-1.28E2", "-2.56E2", "-5.12E2", "-1.024E3", "-2.048E3", "-4.096E3", "-8.192E3", "-1.6384E4", "-3.2768E4", "0.0E0", "0.0E0", "0.0E0", "0.0E0", "0.0E0", "0.0E0" },
              { "-1.28E2", "-2.56E2", "-5.12E2", "-1.024E3", "-2.048E3", "-4.096E3", "-8.192E3", "-1.6384E4", "-3.2768E4", "0.0E0", "0.0E0", "0.0E0", "0.0E0", "0.0E0", "0.0E0", "0.0E0" } };
        SWTBotShell tableShell = null;
        String filename = "tintsize.h5";
        String datasetName = "/DS16BITS";
        File hdf_file = openFile(filename, FILE_MODE.READ_ONLY);

        try {
            SWTBotTree filetree = bot.tree();

            checkFileTree(filetree, "checkHDF5GroupDS16()", 10, filename);

            // Open dataset 'DS16BITS'
            tableShell = openDataObject(filetree, filename, datasetName);
            final SWTBotNatTable dataTable = getNatTable(tableShell);

            testAllTableLocations(dataTable, expectedData, "checkHDF5GroupDS16()");

            tableShell.bot().menu("Show Hexadecimal").click();
            testAllTableLocations(dataTable, expectedDataHex, "checkHDF5GroupDS16()");

            tableShell.bot().menu("Show Binary").click();
            testAllTableLocations(dataTable, expectedDataBin, "checkHDF5GroupDS16()");

            tableShell.bot().menu("Show Scientific Notation").click();
            testAllTableLocations(dataTable, expectedDataSci, "checkHDF5GroupDS16()");
        }
        catch (Exception ex) {
            ex.printStackTrace();
            fail(ex.getMessage());
        }
        catch (AssertionError ae) {
            ae.printStackTrace();
            fail(ae.getMessage());
        }
        finally {
            if(tableShell != null && tableShell.isOpen()) {
                tableShell.bot().menu("Close").click();
                bot.waitUntil(Conditions.shellCloses(tableShell));
            }

            try {
                closeFile(hdf_file, false);
            }
            catch (Exception ex) {
                ex.printStackTrace();
            }
        }
    }

    @Test
    public void checkHDF5GroupDU16() {
        String[][] expectedData =
            { { "65535", "65534", "65532", "65528", "65520", "65504", "65472", "65408", "65280", "65024", "64512", "63488", "61440", "57344", "49152", "32768" },
              { "65534", "65532", "65528", "65520", "65504", "65472", "65408", "65280", "65024", "64512", "63488", "61440", "57344", "49152", "32768", "0" },
              { "65532", "65528", "65520", "65504", "65472", "65408", "65280", "65024", "64512", "63488", "61440", "57344", "49152", "32768", "0", "0" },
              { "65528", "65520", "65504", "65472", "65408", "65280", "65024", "64512", "63488", "61440", "57344", "49152", "32768", "0", "0", "0" },
              { "65520", "65504", "65472", "65408", "65280", "65024", "64512", "63488", "61440", "57344", "49152", "32768", "0", "0", "0", "0" },
              { "65504", "65472", "65408", "65280", "65024", "64512", "63488", "61440", "57344", "49152", "32768", "0", "0", "0", "0", "0" },
              { "65472", "65408", "65280", "65024", "64512", "63488", "61440", "57344", "49152", "32768", "0", "0", "0", "0", "0", "0" },
              { "65408", "65280", "65024", "64512", "63488", "61440", "57344", "49152", "32768", "0", "0", "0", "0", "0", "0", "0" } };
        String[][] expectedDataHex =
            { { "FFFF", "FFFE", "FFFC", "FFF8", "FFF0", "FFE0", "FFC0", "FF80", "FF00", "FE00", "FC00", "F800", "F000", "E000", "C000", "8000" },
              { "FFFE", "FFFC", "FFF8", "FFF0", "FFE0", "FFC0", "FF80", "FF00", "FE00", "FC00", "F800", "F000", "E000", "C000", "8000", "0000" },
              { "FFFC", "FFF8", "FFF0", "FFE0", "FFC0", "FF80", "FF00", "FE00", "FC00", "F800", "F000", "E000", "C000", "8000", "0000", "0000" },
              { "FFF8", "FFF0", "FFE0", "FFC0", "FF80", "FF00", "FE00", "FC00", "F800", "F000", "E000", "C000", "8000", "0000", "0000", "0000" },
              { "FFF0", "FFE0", "FFC0", "FF80", "FF00", "FE00", "FC00", "F800", "F000", "E000", "C000", "8000", "0000", "0000", "0000", "0000" },
              { "FFE0", "FFC0", "FF80", "FF00", "FE00", "FC00", "F800", "F000", "E000", "C000", "8000", "0000", "0000", "0000", "0000", "0000" },
              { "FFC0", "FF80", "FF00", "FE00", "FC00", "F800", "F000", "E000", "C000", "8000", "0000", "0000", "0000", "0000", "0000", "0000" },
              { "FF80", "FF00", "FE00", "FC00", "F800", "F000", "E000", "C000", "8000", "0000", "0000", "0000", "0000", "0000", "0000", "0000" } };
        String[][] expectedDataBin =
            { { "11111111 11111111", "11111111 11111110", "11111111 11111100", "11111111 11111000", "11111111 11110000", "11111111 11100000", "11111111 11000000", "11111111 10000000", "11111111 00000000", "11111110 00000000", "11111100 00000000", "11111000 00000000", "11110000 00000000", "11100000 00000000", "11000000 00000000", "10000000 00000000" },
              { "11111111 11111110", "11111111 11111100", "11111111 11111000", "11111111 11110000", "11111111 11100000", "11111111 11000000", "11111111 10000000", "11111111 00000000", "11111110 00000000", "11111100 00000000", "11111000 00000000", "11110000 00000000", "11100000 00000000", "11000000 00000000", "10000000 00000000", "00000000 00000000" },
              { "11111111 11111100", "11111111 11111000", "11111111 11110000", "11111111 11100000", "11111111 11000000", "11111111 10000000", "11111111 00000000", "11111110 00000000", "11111100 00000000", "11111000 00000000", "11110000 00000000", "11100000 00000000", "11000000 00000000", "10000000 00000000", "00000000 00000000", "00000000 00000000" },
              { "11111111 11111000", "11111111 11110000", "11111111 11100000", "11111111 11000000", "11111111 10000000", "11111111 00000000", "11111110 00000000", "11111100 00000000", "11111000 00000000", "11110000 00000000", "11100000 00000000", "11000000 00000000", "10000000 00000000", "00000000 00000000", "00000000 00000000", "00000000 00000000" },
              { "11111111 11110000", "11111111 11100000", "11111111 11000000", "11111111 10000000", "11111111 00000000", "11111110 00000000", "11111100 00000000", "11111000 00000000", "11110000 00000000", "11100000 00000000", "11000000 00000000", "10000000 00000000", "00000000 00000000", "00000000 00000000", "00000000 00000000", "00000000 00000000" },
              { "11111111 11100000", "11111111 11000000", "11111111 10000000", "11111111 00000000", "11111110 00000000", "11111100 00000000", "11111000 00000000", "11110000 00000000", "11100000 00000000", "11000000 00000000", "10000000 00000000", "00000000 00000000", "00000000 00000000", "00000000 00000000", "00000000 00000000", "00000000 00000000" },
              { "11111111 11000000", "11111111 10000000", "11111111 00000000", "11111110 00000000", "11111100 00000000", "11111000 00000000", "11110000 00000000", "11100000 00000000", "11000000 00000000", "10000000 00000000", "00000000 00000000", "00000000 00000000", "00000000 00000000", "00000000 00000000", "00000000 00000000", "00000000 00000000" },
              { "11111111 10000000", "11111111 00000000", "11111110 00000000", "11111100 00000000", "11111000 00000000", "11110000 00000000", "11100000 00000000", "11000000 00000000", "10000000 00000000", "00000000 00000000", "00000000 00000000", "00000000 00000000", "00000000 00000000", "00000000 00000000", "00000000 00000000", "00000000 00000000" } };
        String[][] expectedDataSci =
            { { "6.5535E4", "6.5534E4", "6.5532E4", "6.5528E4", "6.552E4", "6.5504E4", "6.5472E4", "6.5408E4", "6.528E4", "6.5024E4", "6.4512E4", "6.3488E4", "6.144E4", "5.7344E4", "4.9152E4", "3.2768E4" },
              { "6.5534E4", "6.5532E4", "6.5528E4", "6.552E4", "6.5504E4", "6.5472E4", "6.5408E4", "6.528E4", "6.5024E4", "6.4512E4", "6.3488E4", "6.144E4", "5.7344E4", "4.9152E4", "3.2768E4", "0.0E0" },
              { "6.5532E4", "6.5528E4", "6.552E4", "6.5504E4", "6.5472E4", "6.5408E4", "6.528E4", "6.5024E4", "6.4512E4", "6.3488E4", "6.144E4", "5.7344E4", "4.9152E4", "3.2768E4", "0.0E0", "0.0E0" },
              { "6.5528E4", "6.552E4", "6.5504E4", "6.5472E4", "6.5408E4", "6.528E4", "6.5024E4", "6.4512E4", "6.3488E4", "6.144E4", "5.7344E4", "4.9152E4", "3.2768E4", "0.0E0", "0.0E0", "0.0E0" },
              { "6.552E4", "6.5504E4", "6.5472E4", "6.5408E4", "6.528E4", "6.5024E4", "6.4512E4", "6.3488E4", "6.144E4", "5.7344E4", "4.9152E4", "3.2768E4", "0.0E0", "0.0E0", "0.0E0", "0.0E0" },
              { "6.5504E4", "6.5472E4", "6.5408E4", "6.528E4", "6.5024E4", "6.4512E4", "6.3488E4", "6.144E4", "5.7344E4", "4.9152E4", "3.2768E4", "0.0E0", "0.0E0", "0.0E0", "0.0E0", "0.0E0" },
              { "6.5472E4", "6.5408E4", "6.528E4", "6.5024E4", "6.4512E4", "6.3488E4", "6.144E4", "5.7344E4", "4.9152E4", "3.2768E4", "0.0E0", "0.0E0", "0.0E0", "0.0E0", "0.0E0", "0.0E0" },
              { "6.5408E4", "6.528E4", "6.5024E4", "6.4512E4", "6.3488E4", "6.144E4", "5.7344E4", "4.9152E4", "3.2768E4", "0.0E0", "0.0E0", "0.0E0", "0.0E0", "0.0E0", "0.0E0", "0.0E0" } };
        SWTBotShell tableShell = null;
        String filename = "tintsize.h5";
        String datasetName = "/DU16BITS";
        File hdf_file = openFile(filename, FILE_MODE.READ_ONLY);

        try {
            SWTBotTree filetree = bot.tree();

            checkFileTree(filetree, "checkHDF5GroupDU16()", 10, filename);

            // Open dataset 'DU16BITS'
            tableShell = openDataObject(filetree, filename, datasetName);
            final SWTBotNatTable dataTable = getNatTable(tableShell);

            testAllTableLocations(dataTable, expectedData, "checkHDF5GroupDU16()");

            tableShell.bot().menu("Show Hexadecimal").click();
            testAllTableLocations(dataTable, expectedDataHex, "checkHDF5GroupDU16()");

            tableShell.bot().menu("Show Binary").click();
            testAllTableLocations(dataTable, expectedDataBin, "checkHDF5GroupDU16()");

            tableShell.bot().menu("Show Scientific Notation").click();
            testAllTableLocations(dataTable, expectedDataSci, "checkHDF5GroupDU16()");
        }
        catch (Exception ex) {
            ex.printStackTrace();
            fail(ex.getMessage());
        }
        catch (AssertionError ae) {
            ae.printStackTrace();
            fail(ae.getMessage());
        }
        finally {
            if(tableShell != null && tableShell.isOpen()) {
                tableShell.bot().menu("Close").click();
                bot.waitUntil(Conditions.shellCloses(tableShell));
            }

            try {
                closeFile(hdf_file, false);
            }
            catch (Exception ex) {
                ex.printStackTrace();
            }
        }
    }

    @Test
    public void checkHDF5GroupDS32() {
        String[][] expectedData =
            { { "-1", "-2", "-4", "-8", "-16", "-32", "-64", "-128", "-256", "-512", "-1024", "-2048", "-4096", "-8192", "-16384", "-32768", "-65536", "-131072", "-262144", "-524288", "-1048576", "-2097152", "-4194304", "-8388608", "-16777216", "-33554432", "-67108864", "-134217728", "-268435456", "-536870912", "-1073741824", "-2147483648" },
              { "-2", "-4", "-8", "-16", "-32", "-64", "-128", "-256", "-512", "-1024", "-2048", "-4096", "-8192", "-16384", "-32768", "-65536", "-131072", "-262144", "-524288", "-1048576", "-2097152", "-4194304", "-8388608", "-16777216", "-33554432", "-67108864", "-134217728", "-268435456", "-536870912", "-1073741824", "-2147483648", "0" },
              { "-4", "-8", "-16", "-32", "-64", "-128", "-256", "-512", "-1024", "-2048", "-4096", "-8192", "-16384", "-32768", "-65536", "-131072", "-262144", "-524288", "-1048576", "-2097152", "-4194304", "-8388608", "-16777216", "-33554432", "-67108864", "-134217728", "-268435456", "-536870912", "-1073741824", "-2147483648", "0", "0" },
              { "-8", "-16", "-32", "-64", "-128", "-256", "-512", "-1024", "-2048", "-4096", "-8192", "-16384", "-32768", "-65536", "-131072", "-262144", "-524288", "-1048576", "-2097152", "-4194304", "-8388608", "-16777216", "-33554432", "-67108864", "-134217728", "-268435456", "-536870912", "-1073741824", "-2147483648", "0", "0", "0" },
              { "-16", "-32", "-64", "-128", "-256", "-512", "-1024", "-2048", "-4096", "-8192", "-16384", "-32768", "-65536", "-131072", "-262144", "-524288", "-1048576", "-2097152", "-4194304", "-8388608", "-16777216", "-33554432", "-67108864", "-134217728", "-268435456", "-536870912", "-1073741824", "-2147483648", "0", "0", "0", "0" },
              { "-32", "-64", "-128", "-256", "-512", "-1024", "-2048", "-4096", "-8192", "-16384", "-32768", "-65536", "-131072", "-262144", "-524288", "-1048576", "-2097152", "-4194304", "-8388608", "-16777216", "-33554432", "-67108864", "-134217728", "-268435456", "-536870912", "-1073741824", "-2147483648", "0", "0", "0", "0", "0" },
              { "-64", "-128", "-256", "-512", "-1024", "-2048", "-4096", "-8192", "-16384", "-32768", "-65536", "-131072", "-262144", "-524288", "-1048576", "-2097152", "-4194304", "-8388608", "-16777216", "-33554432", "-67108864", "-134217728", "-268435456", "-536870912", "-1073741824", "-2147483648", "0", "0", "0", "0", "0", "0" },
              { "-128", "-256", "-512", "-1024", "-2048", "-4096", "-8192", "-16384", "-32768", "-65536", "-131072", "-262144", "-524288", "-1048576", "-2097152", "-4194304", "-8388608", "-16777216", "-33554432", "-67108864", "-134217728", "-268435456", "-536870912", "-1073741824", "-2147483648", "0", "0", "0", "0", "0", "0", "0" } };
        String[][] expectedDataHex =
            { { "FFFFFFFF", "FFFFFFFE", "FFFFFFFC", "FFFFFFF8", "FFFFFFF0", "FFFFFFE0", "FFFFFFC0", "FFFFFF80", "FFFFFF00", "FFFFFE00", "FFFFFC00", "FFFFF800", "FFFFF000", "FFFFE000", "FFFFC000", "FFFF8000", "FFFF0000", "FFFE0000", "FFFC0000", "FFF80000", "FFF00000", "FFE00000", "FFC00000", "FF800000", "FF000000", "FE000000", "FC000000", "F8000000", "F0000000", "E0000000", "C0000000", "80000000" },
              { "FFFFFFFE", "FFFFFFFC", "FFFFFFF8", "FFFFFFF0", "FFFFFFE0", "FFFFFFC0", "FFFFFF80", "FFFFFF00", "FFFFFE00", "FFFFFC00", "FFFFF800", "FFFFF000", "FFFFE000", "FFFFC000", "FFFF8000", "FFFF0000", "FFFE0000", "FFFC0000", "FFF80000", "FFF00000", "FFE00000", "FFC00000", "FF800000", "FF000000", "FE000000", "FC000000", "F8000000", "F0000000", "E0000000", "C0000000", "80000000", "00000000" },
              { "FFFFFFFC", "FFFFFFF8", "FFFFFFF0", "FFFFFFE0", "FFFFFFC0", "FFFFFF80", "FFFFFF00", "FFFFFE00", "FFFFFC00", "FFFFF800", "FFFFF000", "FFFFE000", "FFFFC000", "FFFF8000", "FFFF0000", "FFFE0000", "FFFC0000", "FFF80000", "FFF00000", "FFE00000", "FFC00000", "FF800000", "FF000000", "FE000000", "FC000000", "F8000000", "F0000000", "E0000000", "C0000000", "80000000", "00000000", "00000000" },
              { "FFFFFFF8", "FFFFFFF0", "FFFFFFE0", "FFFFFFC0", "FFFFFF80", "FFFFFF00", "FFFFFE00", "FFFFFC00", "FFFFF800", "FFFFF000", "FFFFE000", "FFFFC000", "FFFF8000", "FFFF0000", "FFFE0000", "FFFC0000", "FFF80000", "FFF00000", "FFE00000", "FFC00000", "FF800000", "FF000000", "FE000000", "FC000000", "F8000000", "F0000000", "E0000000", "C0000000", "80000000", "00000000", "00000000", "00000000" },
              { "FFFFFFF0", "FFFFFFE0", "FFFFFFC0", "FFFFFF80", "FFFFFF00", "FFFFFE00", "FFFFFC00", "FFFFF800", "FFFFF000", "FFFFE000", "FFFFC000", "FFFF8000", "FFFF0000", "FFFE0000", "FFFC0000", "FFF80000", "FFF00000", "FFE00000", "FFC00000", "FF800000", "FF000000", "FE000000", "FC000000", "F8000000", "F0000000", "E0000000", "C0000000", "80000000", "00000000", "00000000", "00000000", "00000000" },
              { "FFFFFFE0", "FFFFFFC0", "FFFFFF80", "FFFFFF00", "FFFFFE00", "FFFFFC00", "FFFFF800", "FFFFF000", "FFFFE000", "FFFFC000", "FFFF8000", "FFFF0000", "FFFE0000", "FFFC0000", "FFF80000", "FFF00000", "FFE00000", "FFC00000", "FF800000", "FF000000", "FE000000", "FC000000", "F8000000", "F0000000", "E0000000", "C0000000", "80000000", "00000000", "00000000", "00000000", "00000000", "00000000" },
              { "FFFFFFC0", "FFFFFF80", "FFFFFF00", "FFFFFE00", "FFFFFC00", "FFFFF800", "FFFFF000", "FFFFE000", "FFFFC000", "FFFF8000", "FFFF0000", "FFFE0000", "FFFC0000", "FFF80000", "FFF00000", "FFE00000", "FFC00000", "FF800000", "FF000000", "FE000000", "FC000000", "F8000000", "F0000000", "E0000000", "C0000000", "80000000", "00000000", "00000000", "00000000", "00000000", "00000000", "00000000" },
              { "FFFFFF80", "FFFFFF00", "FFFFFE00", "FFFFFC00", "FFFFF800", "FFFFF000", "FFFFE000", "FFFFC000", "FFFF8000", "FFFF0000", "FFFE0000", "FFFC0000", "FFF80000", "FFF00000", "FFE00000", "FFC00000", "FF800000", "FF000000", "FE000000", "FC000000", "F8000000", "F0000000", "E0000000", "C0000000", "80000000", "00000000", "00000000", "00000000", "00000000", "00000000", "00000000", "00000000" } };
        String[][] expectedDataBin =
            { { "11111111 11111111 11111111 11111111", "11111111 11111111 11111111 11111110", "11111111 11111111 11111111 11111100", "11111111 11111111 11111111 11111000", "11111111 11111111 11111111 11110000", "11111111 11111111 11111111 11100000", "11111111 11111111 11111111 11000000", "11111111 11111111 11111111 10000000",
                "11111111 11111111 11111111 00000000", "11111111 11111111 11111110 00000000", "11111111 11111111 11111100 00000000", "11111111 11111111 11111000 00000000", "11111111 11111111 11110000 00000000", "11111111 11111111 11100000 00000000", "11111111 11111111 11000000 00000000", "11111111 11111111 10000000 00000000",
                "11111111 11111111 00000000 00000000", "11111111 11111110 00000000 00000000", "11111111 11111100 00000000 00000000", "11111111 11111000 00000000 00000000", "11111111 11110000 00000000 00000000", "11111111 11100000 00000000 00000000", "11111111 11000000 00000000 00000000", "11111111 10000000 00000000 00000000",
                "11111111 00000000 00000000 00000000", "11111110 00000000 00000000 00000000", "11111100 00000000 00000000 00000000", "11111000 00000000 00000000 00000000", "11110000 00000000 00000000 00000000", "11100000 00000000 00000000 00000000", "11000000 00000000 00000000 00000000", "10000000 00000000 00000000 00000000" },
              { "11111111 11111111 11111111 11111110", "11111111 11111111 11111111 11111100", "11111111 11111111 11111111 11111000", "11111111 11111111 11111111 11110000", "11111111 11111111 11111111 11100000", "11111111 11111111 11111111 11000000", "11111111 11111111 11111111 10000000", "11111111 11111111 11111111 00000000",
                "11111111 11111111 11111110 00000000", "11111111 11111111 11111100 00000000", "11111111 11111111 11111000 00000000", "11111111 11111111 11110000 00000000", "11111111 11111111 11100000 00000000", "11111111 11111111 11000000 00000000", "11111111 11111111 10000000 00000000", "11111111 11111111 00000000 00000000",
                "11111111 11111110 00000000 00000000", "11111111 11111100 00000000 00000000", "11111111 11111000 00000000 00000000", "11111111 11110000 00000000 00000000", "11111111 11100000 00000000 00000000", "11111111 11000000 00000000 00000000", "11111111 10000000 00000000 00000000", "11111111 00000000 00000000 00000000",
                "11111110 00000000 00000000 00000000", "11111100 00000000 00000000 00000000", "11111000 00000000 00000000 00000000", "11110000 00000000 00000000 00000000", "11100000 00000000 00000000 00000000", "11000000 00000000 00000000 00000000", "10000000 00000000 00000000 00000000", "00000000 00000000 00000000 00000000" },
              { "11111111 11111111 11111111 11111100", "11111111 11111111 11111111 11111000", "11111111 11111111 11111111 11110000", "11111111 11111111 11111111 11100000", "11111111 11111111 11111111 11000000", "11111111 11111111 11111111 10000000", "11111111 11111111 11111111 00000000", "11111111 11111111 11111110 00000000",
                "11111111 11111111 11111100 00000000", "11111111 11111111 11111000 00000000", "11111111 11111111 11110000 00000000", "11111111 11111111 11100000 00000000", "11111111 11111111 11000000 00000000", "11111111 11111111 10000000 00000000", "11111111 11111111 00000000 00000000", "11111111 11111110 00000000 00000000",
                "11111111 11111100 00000000 00000000", "11111111 11111000 00000000 00000000", "11111111 11110000 00000000 00000000", "11111111 11100000 00000000 00000000", "11111111 11000000 00000000 00000000", "11111111 10000000 00000000 00000000", "11111111 00000000 00000000 00000000", "11111110 00000000 00000000 00000000",
                "11111100 00000000 00000000 00000000", "11111000 00000000 00000000 00000000", "11110000 00000000 00000000 00000000", "11100000 00000000 00000000 00000000", "11000000 00000000 00000000 00000000", "10000000 00000000 00000000 00000000", "00000000 00000000 00000000 00000000", "00000000 00000000 00000000 00000000" },
              { "11111111 11111111 11111111 11111000", "11111111 11111111 11111111 11110000", "11111111 11111111 11111111 11100000", "11111111 11111111 11111111 11000000", "11111111 11111111 11111111 10000000", "11111111 11111111 11111111 00000000", "11111111 11111111 11111110 00000000", "11111111 11111111 11111100 00000000",
                "11111111 11111111 11111000 00000000", "11111111 11111111 11110000 00000000", "11111111 11111111 11100000 00000000", "11111111 11111111 11000000 00000000", "11111111 11111111 10000000 00000000", "11111111 11111111 00000000 00000000", "11111111 11111110 00000000 00000000", "11111111 11111100 00000000 00000000",
                "11111111 11111000 00000000 00000000", "11111111 11110000 00000000 00000000", "11111111 11100000 00000000 00000000", "11111111 11000000 00000000 00000000", "11111111 10000000 00000000 00000000", "11111111 00000000 00000000 00000000", "11111110 00000000 00000000 00000000", "11111100 00000000 00000000 00000000",
                "11111000 00000000 00000000 00000000", "11110000 00000000 00000000 00000000", "11100000 00000000 00000000 00000000", "11000000 00000000 00000000 00000000", "10000000 00000000 00000000 00000000", "00000000 00000000 00000000 00000000", "00000000 00000000 00000000 00000000", "00000000 00000000 00000000 00000000" },
              { "11111111 11111111 11111111 11110000", "11111111 11111111 11111111 11100000", "11111111 11111111 11111111 11000000", "11111111 11111111 11111111 10000000", "11111111 11111111 11111111 00000000", "11111111 11111111 11111110 00000000", "11111111 11111111 11111100 00000000", "11111111 11111111 11111000 00000000",
                "11111111 11111111 11110000 00000000", "11111111 11111111 11100000 00000000", "11111111 11111111 11000000 00000000", "11111111 11111111 10000000 00000000", "11111111 11111111 00000000 00000000", "11111111 11111110 00000000 00000000", "11111111 11111100 00000000 00000000", "11111111 11111000 00000000 00000000",
                "11111111 11110000 00000000 00000000", "11111111 11100000 00000000 00000000", "11111111 11000000 00000000 00000000", "11111111 10000000 00000000 00000000", "11111111 00000000 00000000 00000000", "11111110 00000000 00000000 00000000", "11111100 00000000 00000000 00000000", "11111000 00000000 00000000 00000000",
                "11110000 00000000 00000000 00000000", "11100000 00000000 00000000 00000000", "11000000 00000000 00000000 00000000", "10000000 00000000 00000000 00000000", "00000000 00000000 00000000 00000000", "00000000 00000000 00000000 00000000", "00000000 00000000 00000000 00000000", "00000000 00000000 00000000 00000000" },
              { "11111111 11111111 11111111 11100000", "11111111 11111111 11111111 11000000", "11111111 11111111 11111111 10000000", "11111111 11111111 11111111 00000000", "11111111 11111111 11111110 00000000", "11111111 11111111 11111100 00000000", "11111111 11111111 11111000 00000000", "11111111 11111111 11110000 00000000",
                "11111111 11111111 11100000 00000000", "11111111 11111111 11000000 00000000", "11111111 11111111 10000000 00000000", "11111111 11111111 00000000 00000000", "11111111 11111110 00000000 00000000", "11111111 11111100 00000000 00000000", "11111111 11111000 00000000 00000000", "11111111 11110000 00000000 00000000",
                "11111111 11100000 00000000 00000000", "11111111 11000000 00000000 00000000", "11111111 10000000 00000000 00000000", "11111111 00000000 00000000 00000000", "11111110 00000000 00000000 00000000", "11111100 00000000 00000000 00000000", "11111000 00000000 00000000 00000000", "11110000 00000000 00000000 00000000",
                "11100000 00000000 00000000 00000000", "11000000 00000000 00000000 00000000", "10000000 00000000 00000000 00000000", "00000000 00000000 00000000 00000000", "00000000 00000000 00000000 00000000", "00000000 00000000 00000000 00000000", "00000000 00000000 00000000 00000000", "00000000 00000000 00000000 00000000" },
              { "11111111 11111111 11111111 11000000", "11111111 11111111 11111111 10000000", "11111111 11111111 11111111 00000000", "11111111 11111111 11111110 00000000", "11111111 11111111 11111100 00000000", "11111111 11111111 11111000 00000000", "11111111 11111111 11110000 00000000", "11111111 11111111 11100000 00000000",
                "11111111 11111111 11000000 00000000", "11111111 11111111 10000000 00000000", "11111111 11111111 00000000 00000000", "11111111 11111110 00000000 00000000", "11111111 11111100 00000000 00000000", "11111111 11111000 00000000 00000000", "11111111 11110000 00000000 00000000", "11111111 11100000 00000000 00000000",
                "11111111 11000000 00000000 00000000", "11111111 10000000 00000000 00000000", "11111111 00000000 00000000 00000000", "11111110 00000000 00000000 00000000", "11111100 00000000 00000000 00000000", "11111000 00000000 00000000 00000000", "11110000 00000000 00000000 00000000", "11100000 00000000 00000000 00000000",
                "11000000 00000000 00000000 00000000", "10000000 00000000 00000000 00000000", "00000000 00000000 00000000 00000000", "00000000 00000000 00000000 00000000", "00000000 00000000 00000000 00000000", "00000000 00000000 00000000 00000000", "00000000 00000000 00000000 00000000", "00000000 00000000 00000000 00000000" },
              { "11111111 11111111 11111111 10000000", "11111111 11111111 11111111 00000000", "11111111 11111111 11111110 00000000", "11111111 11111111 11111100 00000000", "11111111 11111111 11111000 00000000", "11111111 11111111 11110000 00000000", "11111111 11111111 11100000 00000000", "11111111 11111111 11000000 00000000",
                "11111111 11111111 10000000 00000000", "11111111 11111111 00000000 00000000", "11111111 11111110 00000000 00000000", "11111111 11111100 00000000 00000000", "11111111 11111000 00000000 00000000", "11111111 11110000 00000000 00000000", "11111111 11100000 00000000 00000000", "11111111 11000000 00000000 00000000",
                "11111111 10000000 00000000 00000000", "11111111 00000000 00000000 00000000", "11111110 00000000 00000000 00000000", "11111100 00000000 00000000 00000000", "11111000 00000000 00000000 00000000", "11110000 00000000 00000000 00000000", "11100000 00000000 00000000 00000000", "11000000 00000000 00000000 00000000",
                "10000000 00000000 00000000 00000000", "00000000 00000000 00000000 00000000", "00000000 00000000 00000000 00000000", "00000000 00000000 00000000 00000000", "00000000 00000000 00000000 00000000", "00000000 00000000 00000000 00000000", "00000000 00000000 00000000 00000000", "00000000 00000000 00000000 00000000" } };
        String[][] expectedDataSci =
            { { "-1.0E0", "-2.0E0", "-4.0E0", "-8.0E0", "-1.6E1", "-3.2E1", "-6.4E1", "-1.28E2", "-2.56E2", "-5.12E2", "-1.024E3", "-2.048E3", "-4.096E3", "-8.192E3", "-1.6384E4", "-3.2768E4", "-6.5536E4", "-1.31072E5", "-2.62144E5", "-5.24288E5", "-1.048576E6", "-2.097152E6", "-4.194304E6", "-8.388608E6", "-1.6777216E7", "-3.3554432E7", "-6.7108864E7", "-1.3421773E8", "-2.6843546E8", "-5.3687091E8", "-1.0737418E9", "-2.1474836E9" },
              { "-2.0E0", "-4.0E0", "-8.0E0", "-1.6E1", "-3.2E1", "-6.4E1", "-1.28E2", "-2.56E2", "-5.12E2", "-1.024E3", "-2.048E3", "-4.096E3", "-8.192E3", "-1.6384E4", "-3.2768E4", "-6.5536E4", "-1.31072E5", "-2.62144E5", "-5.24288E5", "-1.048576E6", "-2.097152E6", "-4.194304E6", "-8.388608E6", "-1.6777216E7", "-3.3554432E7", "-6.7108864E7", "-1.3421773E8", "-2.6843546E8", "-5.3687091E8", "-1.0737418E9", "-2.1474836E9", "0.0E0" },
              { "-4.0E0", "-8.0E0", "-1.6E1", "-3.2E1", "-6.4E1", "-1.28E2", "-2.56E2", "-5.12E2", "-1.024E3", "-2.048E3", "-4.096E3", "-8.192E3", "-1.6384E4", "-3.2768E4", "-6.5536E4", "-1.31072E5", "-2.62144E5", "-5.24288E5", "-1.048576E6", "-2.097152E6", "-4.194304E6", "-8.388608E6", "-1.6777216E7", "-3.3554432E7", "-6.7108864E7", "-1.3421773E8", "-2.6843546E8", "-5.3687091E8", "-1.0737418E9", "-2.1474836E9", "0.0E0", "0.0E0" },
              { "-8.0E0", "-1.6E1", "-3.2E1", "-6.4E1", "-1.28E2", "-2.56E2", "-5.12E2", "-1.024E3", "-2.048E3", "-4.096E3", "-8.192E3", "-1.6384E4", "-3.2768E4", "-6.5536E4", "-1.31072E5", "-2.62144E5", "-5.24288E5", "-1.048576E6", "-2.097152E6", "-4.194304E6", "-8.388608E6", "-1.6777216E7", "-3.3554432E7", "-6.7108864E7", "-1.3421773E8", "-2.6843546E8", "-5.3687091E8", "-1.0737418E9", "-2.1474836E9", "0.0E0", "0.0E0", "0.0E0" },
              { "-1.6E1", "-3.2E1", "-6.4E1", "-1.28E2", "-2.56E2", "-5.12E2", "-1.024E3", "-2.048E3", "-4.096E3", "-8.192E3", "-1.6384E4", "-3.2768E4", "-6.5536E4", "-1.31072E5", "-2.62144E5", "-5.24288E5", "-1.048576E6", "-2.097152E6", "-4.194304E6", "-8.388608E6", "-1.6777216E7", "-3.3554432E7", "-6.7108864E7", "-1.3421773E8", "-2.6843546E8", "-5.3687091E8", "-1.0737418E9", "-2.1474836E9", "0.0E0", "0.0E0", "0.0E0", "0.0E0" },
              { "-3.2E1", "-6.4E1", "-1.28E2", "-2.56E2", "-5.12E2", "-1.024E3", "-2.048E3", "-4.096E3", "-8.192E3", "-1.6384E4", "-3.2768E4", "-6.5536E4", "-1.31072E5", "-2.62144E5", "-5.24288E5", "-1.048576E6", "-2.097152E6", "-4.194304E6", "-8.388608E6", "-1.6777216E7", "-3.3554432E7", "-6.7108864E7", "-1.3421773E8", "-2.6843546E8", "-5.3687091E8", "-1.0737418E9", "-2.1474836E9", "0.0E0", "0.0E0", "0.0E0", "0.0E0", "0.0E0" },
              { "-6.4E1", "-1.28E2", "-2.56E2", "-5.12E2", "-1.024E3", "-2.048E3", "-4.096E3", "-8.192E3", "-1.6384E4", "-3.2768E4", "-6.5536E4", "-1.31072E5", "-2.62144E5", "-5.24288E5", "-1.048576E6", "-2.097152E6", "-4.194304E6", "-8.388608E6", "-1.6777216E7", "-3.3554432E7", "-6.7108864E7", "-1.3421773E8", "-2.6843546E8", "-5.3687091E8", "-1.0737418E9", "-2.1474836E9", "0.0E0", "0.0E0", "0.0E0", "0.0E0", "0.0E0", "0.0E0" },
              { "-1.28E2", "-2.56E2", "-5.12E2", "-1.024E3", "-2.048E3", "-4.096E3", "-8.192E3", "-1.6384E4", "-3.2768E4", "-6.5536E4", "-1.31072E5", "-2.62144E5", "-5.24288E5", "-1.048576E6", "-2.097152E6", "-4.194304E6", "-8.388608E6", "-1.6777216E7", "-3.3554432E7", "-6.7108864E7", "-1.3421773E8", "-2.6843546E8", "-5.3687091E8", "-1.0737418E9", "-2.1474836E9", "0.0E0", "0.0E0", "0.0E0", "0.0E0", "0.0E0", "0.0E0", "0.0E0" } };
        SWTBotShell tableShell = null;
        String filename = "tintsize.h5";
        String datasetName = "/DS32BITS";
        File hdf_file = openFile(filename, FILE_MODE.READ_ONLY);

        try {
            SWTBotTree filetree = bot.tree();

            checkFileTree(filetree, "checkHDF5GroupDS32()", 10, filename);

            // Open dataset 'DS32BITS'
            tableShell = openDataObject(filetree, filename, datasetName);
            final SWTBotNatTable dataTable = getNatTable(tableShell);

            testAllTableLocations(dataTable, expectedData, "checkHDF5GroupDS32()");

            tableShell.bot().menu("Show Hexadecimal").click();
            testAllTableLocations(dataTable, expectedDataHex, "checkHDF5GroupDS32()");

            tableShell.bot().menu("Show Binary").click();
            testAllTableLocations(dataTable, expectedDataBin, "checkHDF5GroupDS32()");

            tableShell.bot().menu("Show Scientific Notation").click();
            testAllTableLocations(dataTable, expectedDataSci, "checkHDF5GroupDS32()");
        }
        catch (Exception ex) {
            ex.printStackTrace();
            fail(ex.getMessage());
        }
        catch (AssertionError ae) {
            ae.printStackTrace();
            fail(ae.getMessage());
        }
        finally {
            if(tableShell != null && tableShell.isOpen()) {
                tableShell.bot().menu("Close").click();
                bot.waitUntil(Conditions.shellCloses(tableShell));
            }

            try {
                closeFile(hdf_file, false);
            }
            catch (Exception ex) {
                ex.printStackTrace();
            }
        }
    }

    @Test
    public void checkHDF5GroupDU32() {
        String[][] expectedData =
            { { "4294967295", "4294967294", "4294967292", "4294967288", "4294967280", "4294967264", "4294967232", "4294967168", "4294967040", "4294966784", "4294966272", "4294965248", "4294963200", "4294959104", "4294950912", "4294934528", "4294901760", "4294836224", "4294705152", "4294443008", "4293918720", "4292870144", "4290772992", "4286578688", "4278190080", "4261412864", "4227858432", "4160749568", "4026531840", "3758096384", "3221225472", "2147483648" },
              { "4294967294", "4294967292", "4294967288", "4294967280", "4294967264", "4294967232", "4294967168", "4294967040", "4294966784", "4294966272", "4294965248", "4294963200", "4294959104", "4294950912", "4294934528", "4294901760", "4294836224", "4294705152", "4294443008", "4293918720", "4292870144", "4290772992", "4286578688", "4278190080", "4261412864", "4227858432", "4160749568", "4026531840", "3758096384", "3221225472", "2147483648", "0" },
              { "4294967292", "4294967288", "4294967280", "4294967264", "4294967232", "4294967168", "4294967040", "4294966784", "4294966272", "4294965248", "4294963200", "4294959104", "4294950912", "4294934528", "4294901760", "4294836224", "4294705152", "4294443008", "4293918720", "4292870144", "4290772992", "4286578688", "4278190080", "4261412864", "4227858432", "4160749568", "4026531840", "3758096384", "3221225472", "2147483648", "0", "0" },
              { "4294967288", "4294967280", "4294967264", "4294967232", "4294967168", "4294967040", "4294966784", "4294966272", "4294965248", "4294963200", "4294959104", "4294950912", "4294934528", "4294901760", "4294836224", "4294705152", "4294443008", "4293918720", "4292870144", "4290772992", "4286578688", "4278190080", "4261412864", "4227858432", "4160749568", "4026531840", "3758096384", "3221225472", "2147483648", "0", "0", "0" },
              { "4294967280", "4294967264", "4294967232", "4294967168", "4294967040", "4294966784", "4294966272", "4294965248", "4294963200", "4294959104", "4294950912", "4294934528", "4294901760", "4294836224", "4294705152", "4294443008", "4293918720", "4292870144", "4290772992", "4286578688", "4278190080", "4261412864", "4227858432", "4160749568", "4026531840", "3758096384", "3221225472", "2147483648", "0", "0", "0", "0" },
              { "4294967264", "4294967232", "4294967168", "4294967040", "4294966784", "4294966272", "4294965248", "4294963200", "4294959104", "4294950912", "4294934528", "4294901760", "4294836224", "4294705152", "4294443008", "4293918720", "4292870144", "4290772992", "4286578688", "4278190080", "4261412864", "4227858432", "4160749568", "4026531840", "3758096384", "3221225472", "2147483648", "0", "0", "0", "0", "0" },
              { "4294967232", "4294967168", "4294967040", "4294966784", "4294966272", "4294965248", "4294963200", "4294959104", "4294950912", "4294934528", "4294901760", "4294836224", "4294705152", "4294443008", "4293918720", "4292870144", "4290772992", "4286578688", "4278190080", "4261412864", "4227858432", "4160749568", "4026531840", "3758096384", "3221225472", "2147483648", "0", "0", "0", "0", "0", "0" },
              { "4294967168", "4294967040", "4294966784", "4294966272", "4294965248", "4294963200", "4294959104", "4294950912", "4294934528", "4294901760", "4294836224", "4294705152", "4294443008", "4293918720", "4292870144", "4290772992", "4286578688", "4278190080", "4261412864", "4227858432", "4160749568", "4026531840", "3758096384", "3221225472", "2147483648", "0", "0", "0", "0", "0", "0", "0" } };
        String[][] expectedDataHex =
            { { "FFFFFFFF", "FFFFFFFE", "FFFFFFFC", "FFFFFFF8", "FFFFFFF0", "FFFFFFE0", "FFFFFFC0", "FFFFFF80", "FFFFFF00", "FFFFFE00", "FFFFFC00", "FFFFF800", "FFFFF000", "FFFFE000", "FFFFC000", "FFFF8000", "FFFF0000", "FFFE0000", "FFFC0000", "FFF80000", "FFF00000", "FFE00000", "FFC00000", "FF800000", "FF000000", "FE000000", "FC000000", "F8000000", "F0000000", "E0000000", "C0000000", "80000000" },
              { "FFFFFFFE", "FFFFFFFC", "FFFFFFF8", "FFFFFFF0", "FFFFFFE0", "FFFFFFC0", "FFFFFF80", "FFFFFF00", "FFFFFE00", "FFFFFC00", "FFFFF800", "FFFFF000", "FFFFE000", "FFFFC000", "FFFF8000", "FFFF0000", "FFFE0000", "FFFC0000", "FFF80000", "FFF00000", "FFE00000", "FFC00000", "FF800000", "FF000000", "FE000000", "FC000000", "F8000000", "F0000000", "E0000000", "C0000000", "80000000", "00000000" },
              { "FFFFFFFC", "FFFFFFF8", "FFFFFFF0", "FFFFFFE0", "FFFFFFC0", "FFFFFF80", "FFFFFF00", "FFFFFE00", "FFFFFC00", "FFFFF800", "FFFFF000", "FFFFE000", "FFFFC000", "FFFF8000", "FFFF0000", "FFFE0000", "FFFC0000", "FFF80000", "FFF00000", "FFE00000", "FFC00000", "FF800000", "FF000000", "FE000000", "FC000000", "F8000000", "F0000000", "E0000000", "C0000000", "80000000", "00000000", "00000000" },
              { "FFFFFFF8", "FFFFFFF0", "FFFFFFE0", "FFFFFFC0", "FFFFFF80", "FFFFFF00", "FFFFFE00", "FFFFFC00", "FFFFF800", "FFFFF000", "FFFFE000", "FFFFC000", "FFFF8000", "FFFF0000", "FFFE0000", "FFFC0000", "FFF80000", "FFF00000", "FFE00000", "FFC00000", "FF800000", "FF000000", "FE000000", "FC000000", "F8000000", "F0000000", "E0000000", "C0000000", "80000000", "00000000", "00000000", "00000000" },
              { "FFFFFFF0", "FFFFFFE0", "FFFFFFC0", "FFFFFF80", "FFFFFF00", "FFFFFE00", "FFFFFC00", "FFFFF800", "FFFFF000", "FFFFE000", "FFFFC000", "FFFF8000", "FFFF0000", "FFFE0000", "FFFC0000", "FFF80000", "FFF00000", "FFE00000", "FFC00000", "FF800000", "FF000000", "FE000000", "FC000000", "F8000000", "F0000000", "E0000000", "C0000000", "80000000", "00000000", "00000000", "00000000", "00000000" },
              { "FFFFFFE0", "FFFFFFC0", "FFFFFF80", "FFFFFF00", "FFFFFE00", "FFFFFC00", "FFFFF800", "FFFFF000", "FFFFE000", "FFFFC000", "FFFF8000", "FFFF0000", "FFFE0000", "FFFC0000", "FFF80000", "FFF00000", "FFE00000", "FFC00000", "FF800000", "FF000000", "FE000000", "FC000000", "F8000000", "F0000000", "E0000000", "C0000000", "80000000", "00000000", "00000000", "00000000", "00000000", "00000000" },
              { "FFFFFFC0", "FFFFFF80", "FFFFFF00", "FFFFFE00", "FFFFFC00", "FFFFF800", "FFFFF000", "FFFFE000", "FFFFC000", "FFFF8000", "FFFF0000", "FFFE0000", "FFFC0000", "FFF80000", "FFF00000", "FFE00000", "FFC00000", "FF800000", "FF000000", "FE000000", "FC000000", "F8000000", "F0000000", "E0000000", "C0000000", "80000000", "00000000", "00000000", "00000000", "00000000", "00000000", "00000000" },
              { "FFFFFF80", "FFFFFF00", "FFFFFE00", "FFFFFC00", "FFFFF800", "FFFFF000", "FFFFE000", "FFFFC000", "FFFF8000", "FFFF0000", "FFFE0000", "FFFC0000", "FFF80000", "FFF00000", "FFE00000", "FFC00000", "FF800000", "FF000000", "FE000000", "FC000000", "F8000000", "F0000000", "E0000000", "C0000000", "80000000", "00000000", "00000000", "00000000", "00000000", "00000000", "00000000", "00000000" } };
        String[][] expectedDataBin =
            { { "11111111 11111111 11111111 11111111", "11111111 11111111 11111111 11111110", "11111111 11111111 11111111 11111100", "11111111 11111111 11111111 11111000", "11111111 11111111 11111111 11110000", "11111111 11111111 11111111 11100000", "11111111 11111111 11111111 11000000", "11111111 11111111 11111111 10000000",
                "11111111 11111111 11111111 00000000", "11111111 11111111 11111110 00000000", "11111111 11111111 11111100 00000000", "11111111 11111111 11111000 00000000", "11111111 11111111 11110000 00000000", "11111111 11111111 11100000 00000000", "11111111 11111111 11000000 00000000", "11111111 11111111 10000000 00000000",
                "11111111 11111111 00000000 00000000", "11111111 11111110 00000000 00000000", "11111111 11111100 00000000 00000000", "11111111 11111000 00000000 00000000", "11111111 11110000 00000000 00000000", "11111111 11100000 00000000 00000000", "11111111 11000000 00000000 00000000", "11111111 10000000 00000000 00000000",
                "11111111 00000000 00000000 00000000", "11111110 00000000 00000000 00000000", "11111100 00000000 00000000 00000000", "11111000 00000000 00000000 00000000", "11110000 00000000 00000000 00000000", "11100000 00000000 00000000 00000000", "11000000 00000000 00000000 00000000", "10000000 00000000 00000000 00000000" },
              { "11111111 11111111 11111111 11111110", "11111111 11111111 11111111 11111100", "11111111 11111111 11111111 11111000", "11111111 11111111 11111111 11110000", "11111111 11111111 11111111 11100000", "11111111 11111111 11111111 11000000", "11111111 11111111 11111111 10000000", "11111111 11111111 11111111 00000000",
                "11111111 11111111 11111110 00000000", "11111111 11111111 11111100 00000000", "11111111 11111111 11111000 00000000", "11111111 11111111 11110000 00000000", "11111111 11111111 11100000 00000000", "11111111 11111111 11000000 00000000", "11111111 11111111 10000000 00000000", "11111111 11111111 00000000 00000000",
                "11111111 11111110 00000000 00000000", "11111111 11111100 00000000 00000000", "11111111 11111000 00000000 00000000", "11111111 11110000 00000000 00000000", "11111111 11100000 00000000 00000000", "11111111 11000000 00000000 00000000", "11111111 10000000 00000000 00000000", "11111111 00000000 00000000 00000000",
                "11111110 00000000 00000000 00000000", "11111100 00000000 00000000 00000000", "11111000 00000000 00000000 00000000", "11110000 00000000 00000000 00000000", "11100000 00000000 00000000 00000000", "11000000 00000000 00000000 00000000", "10000000 00000000 00000000 00000000", "00000000 00000000 00000000 00000000" },
              { "11111111 11111111 11111111 11111100", "11111111 11111111 11111111 11111000", "11111111 11111111 11111111 11110000", "11111111 11111111 11111111 11100000", "11111111 11111111 11111111 11000000", "11111111 11111111 11111111 10000000", "11111111 11111111 11111111 00000000", "11111111 11111111 11111110 00000000",
                "11111111 11111111 11111100 00000000", "11111111 11111111 11111000 00000000", "11111111 11111111 11110000 00000000", "11111111 11111111 11100000 00000000", "11111111 11111111 11000000 00000000", "11111111 11111111 10000000 00000000", "11111111 11111111 00000000 00000000", "11111111 11111110 00000000 00000000",
                "11111111 11111100 00000000 00000000", "11111111 11111000 00000000 00000000", "11111111 11110000 00000000 00000000", "11111111 11100000 00000000 00000000", "11111111 11000000 00000000 00000000", "11111111 10000000 00000000 00000000", "11111111 00000000 00000000 00000000", "11111110 00000000 00000000 00000000",
                "11111100 00000000 00000000 00000000", "11111000 00000000 00000000 00000000", "11110000 00000000 00000000 00000000", "11100000 00000000 00000000 00000000", "11000000 00000000 00000000 00000000", "10000000 00000000 00000000 00000000", "00000000 00000000 00000000 00000000", "00000000 00000000 00000000 00000000" },
              { "11111111 11111111 11111111 11111000", "11111111 11111111 11111111 11110000", "11111111 11111111 11111111 11100000", "11111111 11111111 11111111 11000000", "11111111 11111111 11111111 10000000", "11111111 11111111 11111111 00000000", "11111111 11111111 11111110 00000000", "11111111 11111111 11111100 00000000",
                "11111111 11111111 11111000 00000000", "11111111 11111111 11110000 00000000", "11111111 11111111 11100000 00000000", "11111111 11111111 11000000 00000000", "11111111 11111111 10000000 00000000", "11111111 11111111 00000000 00000000", "11111111 11111110 00000000 00000000", "11111111 11111100 00000000 00000000",
                "11111111 11111000 00000000 00000000", "11111111 11110000 00000000 00000000", "11111111 11100000 00000000 00000000", "11111111 11000000 00000000 00000000", "11111111 10000000 00000000 00000000", "11111111 00000000 00000000 00000000", "11111110 00000000 00000000 00000000", "11111100 00000000 00000000 00000000",
                "11111000 00000000 00000000 00000000", "11110000 00000000 00000000 00000000", "11100000 00000000 00000000 00000000", "11000000 00000000 00000000 00000000", "10000000 00000000 00000000 00000000", "00000000 00000000 00000000 00000000", "00000000 00000000 00000000 00000000", "00000000 00000000 00000000 00000000" },
              { "11111111 11111111 11111111 11110000", "11111111 11111111 11111111 11100000", "11111111 11111111 11111111 11000000", "11111111 11111111 11111111 10000000", "11111111 11111111 11111111 00000000", "11111111 11111111 11111110 00000000", "11111111 11111111 11111100 00000000", "11111111 11111111 11111000 00000000",
                "11111111 11111111 11110000 00000000", "11111111 11111111 11100000 00000000", "11111111 11111111 11000000 00000000", "11111111 11111111 10000000 00000000", "11111111 11111111 00000000 00000000", "11111111 11111110 00000000 00000000", "11111111 11111100 00000000 00000000", "11111111 11111000 00000000 00000000",
                "11111111 11110000 00000000 00000000", "11111111 11100000 00000000 00000000", "11111111 11000000 00000000 00000000", "11111111 10000000 00000000 00000000", "11111111 00000000 00000000 00000000", "11111110 00000000 00000000 00000000", "11111100 00000000 00000000 00000000", "11111000 00000000 00000000 00000000",
                "11110000 00000000 00000000 00000000", "11100000 00000000 00000000 00000000", "11000000 00000000 00000000 00000000", "10000000 00000000 00000000 00000000", "00000000 00000000 00000000 00000000", "00000000 00000000 00000000 00000000", "00000000 00000000 00000000 00000000", "00000000 00000000 00000000 00000000" },
              { "11111111 11111111 11111111 11100000", "11111111 11111111 11111111 11000000", "11111111 11111111 11111111 10000000", "11111111 11111111 11111111 00000000", "11111111 11111111 11111110 00000000", "11111111 11111111 11111100 00000000", "11111111 11111111 11111000 00000000", "11111111 11111111 11110000 00000000",
                "11111111 11111111 11100000 00000000", "11111111 11111111 11000000 00000000", "11111111 11111111 10000000 00000000", "11111111 11111111 00000000 00000000", "11111111 11111110 00000000 00000000", "11111111 11111100 00000000 00000000", "11111111 11111000 00000000 00000000", "11111111 11110000 00000000 00000000",
                "11111111 11100000 00000000 00000000", "11111111 11000000 00000000 00000000", "11111111 10000000 00000000 00000000", "11111111 00000000 00000000 00000000", "11111110 00000000 00000000 00000000", "11111100 00000000 00000000 00000000", "11111000 00000000 00000000 00000000", "11110000 00000000 00000000 00000000",
                "11100000 00000000 00000000 00000000", "11000000 00000000 00000000 00000000", "10000000 00000000 00000000 00000000", "00000000 00000000 00000000 00000000", "00000000 00000000 00000000 00000000", "00000000 00000000 00000000 00000000", "00000000 00000000 00000000 00000000", "00000000 00000000 00000000 00000000" },
              { "11111111 11111111 11111111 11000000", "11111111 11111111 11111111 10000000", "11111111 11111111 11111111 00000000", "11111111 11111111 11111110 00000000", "11111111 11111111 11111100 00000000", "11111111 11111111 11111000 00000000", "11111111 11111111 11110000 00000000", "11111111 11111111 11100000 00000000",
                "11111111 11111111 11000000 00000000", "11111111 11111111 10000000 00000000", "11111111 11111111 00000000 00000000", "11111111 11111110 00000000 00000000", "11111111 11111100 00000000 00000000", "11111111 11111000 00000000 00000000", "11111111 11110000 00000000 00000000", "11111111 11100000 00000000 00000000",
                "11111111 11000000 00000000 00000000", "11111111 10000000 00000000 00000000", "11111111 00000000 00000000 00000000", "11111110 00000000 00000000 00000000", "11111100 00000000 00000000 00000000", "11111000 00000000 00000000 00000000", "11110000 00000000 00000000 00000000", "11100000 00000000 00000000 00000000",
                "11000000 00000000 00000000 00000000", "10000000 00000000 00000000 00000000", "00000000 00000000 00000000 00000000", "00000000 00000000 00000000 00000000", "00000000 00000000 00000000 00000000", "00000000 00000000 00000000 00000000", "00000000 00000000 00000000 00000000", "00000000 00000000 00000000 00000000" },
              { "11111111 11111111 11111111 10000000", "11111111 11111111 11111111 00000000", "11111111 11111111 11111110 00000000", "11111111 11111111 11111100 00000000", "11111111 11111111 11111000 00000000", "11111111 11111111 11110000 00000000", "11111111 11111111 11100000 00000000", "11111111 11111111 11000000 00000000",
                "11111111 11111111 10000000 00000000", "11111111 11111111 00000000 00000000", "11111111 11111110 00000000 00000000", "11111111 11111100 00000000 00000000", "11111111 11111000 00000000 00000000", "11111111 11110000 00000000 00000000", "11111111 11100000 00000000 00000000", "11111111 11000000 00000000 00000000",
                "11111111 10000000 00000000 00000000", "11111111 00000000 00000000 00000000", "11111110 00000000 00000000 00000000", "11111100 00000000 00000000 00000000", "11111000 00000000 00000000 00000000", "11110000 00000000 00000000 00000000", "11100000 00000000 00000000 00000000", "11000000 00000000 00000000 00000000",
                "10000000 00000000 00000000 00000000", "00000000 00000000 00000000 00000000", "00000000 00000000 00000000 00000000", "00000000 00000000 00000000 00000000", "00000000 00000000 00000000 00000000", "00000000 00000000 00000000 00000000", "00000000 00000000 00000000 00000000", "00000000 00000000 00000000 00000000" } };
        String[][] expectedDataSci =
            { { "4.2949673E9", "4.2949673E9", "4.2949673E9", "4.2949673E9", "4.2949673E9", "4.2949673E9", "4.2949672E9", "4.2949672E9", "4.294967E9", "4.2949668E9", "4.2949663E9", "4.2949652E9", "4.2949632E9", "4.2949591E9", "4.2949509E9", "4.2949345E9", "4.2949018E9", "4.2948362E9", "4.2947052E9", "4.294443E9", "4.2939187E9", "4.2928701E9", "4.290773E9", "4.2865787E9", "4.2781901E9", "4.2614129E9", "4.2278584E9", "4.1607496E9", "4.0265318E9", "3.7580964E9", "3.2212255E9", "2.1474836E9" },
              { "4.2949673E9", "4.2949673E9", "4.2949673E9", "4.2949673E9", "4.2949673E9", "4.2949672E9", "4.2949672E9", "4.294967E9", "4.2949668E9", "4.2949663E9", "4.2949652E9", "4.2949632E9", "4.2949591E9", "4.2949509E9", "4.2949345E9", "4.2949018E9", "4.2948362E9", "4.2947052E9", "4.294443E9", "4.2939187E9", "4.2928701E9", "4.290773E9", "4.2865787E9", "4.2781901E9", "4.2614129E9", "4.2278584E9", "4.1607496E9", "4.0265318E9", "3.7580964E9", "3.2212255E9", "2.1474836E9", "0.0E0" },
              { "4.2949673E9", "4.2949673E9", "4.2949673E9", "4.2949673E9", "4.2949672E9", "4.2949672E9", "4.294967E9", "4.2949668E9", "4.2949663E9", "4.2949652E9", "4.2949632E9", "4.2949591E9", "4.2949509E9", "4.2949345E9", "4.2949018E9", "4.2948362E9", "4.2947052E9", "4.294443E9", "4.2939187E9", "4.2928701E9", "4.290773E9", "4.2865787E9", "4.2781901E9", "4.2614129E9", "4.2278584E9", "4.1607496E9", "4.0265318E9", "3.7580964E9", "3.2212255E9", "2.1474836E9", "0.0E0", "0.0E0" },
              { "4.2949673E9", "4.2949673E9", "4.2949673E9", "4.2949672E9", "4.2949672E9", "4.294967E9", "4.2949668E9", "4.2949663E9", "4.2949652E9", "4.2949632E9", "4.2949591E9", "4.2949509E9", "4.2949345E9", "4.2949018E9", "4.2948362E9", "4.2947052E9", "4.294443E9", "4.2939187E9", "4.2928701E9", "4.290773E9", "4.2865787E9", "4.2781901E9", "4.2614129E9", "4.2278584E9", "4.1607496E9", "4.0265318E9", "3.7580964E9", "3.2212255E9", "2.1474836E9", "0.0E0", "0.0E0", "0.0E0" },
              { "4.2949673E9", "4.2949673E9", "4.2949672E9", "4.2949672E9", "4.294967E9", "4.2949668E9", "4.2949663E9", "4.2949652E9", "4.2949632E9", "4.2949591E9", "4.2949509E9", "4.2949345E9", "4.2949018E9", "4.2948362E9", "4.2947052E9", "4.294443E9", "4.2939187E9", "4.2928701E9", "4.290773E9", "4.2865787E9", "4.2781901E9", "4.2614129E9", "4.2278584E9", "4.1607496E9", "4.0265318E9", "3.7580964E9", "3.2212255E9", "2.1474836E9", "0.0E0", "0.0E0", "0.0E0", "0.0E0" },
              { "4.2949673E9", "4.2949672E9", "4.2949672E9", "4.294967E9", "4.2949668E9", "4.2949663E9", "4.2949652E9", "4.2949632E9", "4.2949591E9", "4.2949509E9", "4.2949345E9", "4.2949018E9", "4.2948362E9", "4.2947052E9", "4.294443E9", "4.2939187E9", "4.2928701E9", "4.290773E9", "4.2865787E9", "4.2781901E9", "4.2614129E9", "4.2278584E9", "4.1607496E9", "4.0265318E9", "3.7580964E9", "3.2212255E9", "2.1474836E9", "0.0E0", "0.0E0", "0.0E0", "0.0E0", "0.0E0" },
              { "4.2949672E9", "4.2949672E9", "4.294967E9", "4.2949668E9", "4.2949663E9", "4.2949652E9", "4.2949632E9", "4.2949591E9", "4.2949509E9", "4.2949345E9", "4.2949018E9", "4.2948362E9", "4.2947052E9", "4.294443E9", "4.2939187E9", "4.2928701E9", "4.290773E9", "4.2865787E9", "4.2781901E9", "4.2614129E9", "4.2278584E9", "4.1607496E9", "4.0265318E9", "3.7580964E9", "3.2212255E9", "2.1474836E9", "0.0E0", "0.0E0", "0.0E0", "0.0E0", "0.0E0", "0.0E0" },
              { "4.2949672E9", "4.294967E9", "4.2949668E9", "4.2949663E9", "4.2949652E9", "4.2949632E9", "4.2949591E9", "4.2949509E9", "4.2949345E9", "4.2949018E9", "4.2948362E9", "4.2947052E9", "4.294443E9", "4.2939187E9", "4.2928701E9", "4.290773E9", "4.2865787E9", "4.2781901E9", "4.2614129E9", "4.2278584E9", "4.1607496E9", "4.0265318E9", "3.7580964E9", "3.2212255E9", "2.1474836E9", "0.0E0", "0.0E0", "0.0E0", "0.0E0", "0.0E0", "0.0E0", "0.0E0" } };
        String filename = "tintsize.h5";
        String datasetName = "/DU32BITS";
        SWTBotShell tableShell = null;
        File hdf_file = openFile(filename, FILE_MODE.READ_ONLY);

        try {
            SWTBotTree filetree = bot.tree();

            checkFileTree(filetree, "checkHDF5GroupDU32()", 10, filename);

            // Open dataset 'DU32BITS'
            tableShell = openDataObject(filetree, filename, datasetName);
            final SWTBotNatTable dataTable = getNatTable(tableShell);

            testAllTableLocations(dataTable, expectedData, "checkHDF5GroupDU32()");

            tableShell.bot().menu("Show Hexadecimal").click();
            testAllTableLocations(dataTable, expectedDataHex, "checkHDF5GroupDU32()");

            tableShell.bot().menu("Show Binary").click();
            testAllTableLocations(dataTable, expectedDataBin, "checkHDF5GroupDU32()");

            tableShell.bot().menu("Show Scientific Notation").click();
            testAllTableLocations(dataTable, expectedDataSci, "checkHDF5GroupDU32()");
        }
        catch (Exception ex) {
            ex.printStackTrace();
            fail(ex.getMessage());
        }
        catch (AssertionError ae) {
            ae.printStackTrace();
            fail(ae.getMessage());
        }
        finally {
            if(tableShell != null && tableShell.isOpen()) {
                tableShell.bot().menu("Close").click();
                bot.waitUntil(Conditions.shellCloses(tableShell));
            }

            try {
                closeFile(hdf_file, false);
            }
            catch (Exception ex) {
                ex.printStackTrace();
            }
        }
    }

    @Test
    public void checkHDF5GroupDS64() {
        String[][] expectedData =
            { { "-1", "-2", "-4", "-8", "-16", "-32", "-64", "-128", "-256", "-512", "-1024", "-2048", "-4096", "-8192", "-16384", "-32768",
                "-65536", "-131072", "-262144", "-524288", "-1048576", "-2097152", "-4194304", "-8388608", "-16777216", "-33554432", "-67108864", "-134217728", "-268435456", "-536870912", "-1073741824", "-2147483648",
                "-4294967296", "-8589934592", "-17179869184", "-34359738368", "-68719476736", "-137438953472", "-274877906944", "-549755813888", "-1099511627776", "-2199023255552", "-4398046511104", "-8796093022208", "-17592186044416", "-35184372088832", "-70368744177664", "-140737488355328",
                "-281474976710656", "-562949953421312", "-1125899906842624", "-2251799813685248", "-4503599627370496", "-9007199254740992", "-18014398509481984", "-36028797018963968", "-72057594037927936", "-144115188075855872", "-288230376151711744", "-576460752303423488", "-1152921504606846976", "-2305843009213693952", "-4611686018427387904", "-9223372036854775808" },
              { "-2", "-4", "-8", "-16", "-32", "-64", "-128", "-256", "-512", "-1024", "-2048", "-4096", "-8192", "-16384", "-32768", "-65536",
                "-131072", "-262144", "-524288", "-1048576", "-2097152", "-4194304", "-8388608", "-16777216", "-33554432", "-67108864", "-134217728", "-268435456", "-536870912", "-1073741824", "-2147483648", "-4294967296",
                "-8589934592", "-17179869184", "-34359738368", "-68719476736", "-137438953472", "-274877906944", "-549755813888", "-1099511627776", "-2199023255552", "-4398046511104", "-8796093022208", "-17592186044416", "-35184372088832", "-70368744177664", "-140737488355328", "-281474976710656",
                "-562949953421312", "-1125899906842624", "-2251799813685248", "-4503599627370496", "-9007199254740992", "-18014398509481984", "-36028797018963968", "-72057594037927936", "-144115188075855872", "-288230376151711744", "-576460752303423488", "-1152921504606846976", "-2305843009213693952", "-4611686018427387904", "-9223372036854775808", "0" },
              { "-4", "-8", "-16", "-32", "-64", "-128", "-256", "-512", "-1024", "-2048", "-4096", "-8192", "-16384", "-32768", "-65536", "-131072",
                "-262144", "-524288", "-1048576", "-2097152", "-4194304", "-8388608", "-16777216", "-33554432", "-67108864", "-134217728", "-268435456", "-536870912", "-1073741824", "-2147483648", "-4294967296", "-8589934592",
                "-17179869184", "-34359738368", "-68719476736", "-137438953472", "-274877906944", "-549755813888", "-1099511627776", "-2199023255552", "-4398046511104", "-8796093022208", "-17592186044416", "-35184372088832", "-70368744177664", "-140737488355328", "-281474976710656", "-562949953421312",
                "-1125899906842624", "-2251799813685248", "-4503599627370496", "-9007199254740992", "-18014398509481984", "-36028797018963968", "-72057594037927936", "-144115188075855872", "-288230376151711744", "-576460752303423488", "-1152921504606846976", "-2305843009213693952", "-4611686018427387904", "-9223372036854775808", "0", "0" },
              { "-8", "-16", "-32", "-64", "-128", "-256", "-512", "-1024", "-2048", "-4096", "-8192", "-16384", "-32768", "-65536", "-131072", "-262144",
                "-524288", "-1048576", "-2097152", "-4194304", "-8388608", "-16777216", "-33554432", "-67108864", "-134217728", "-268435456", "-536870912", "-1073741824", "-2147483648", "-4294967296", "-8589934592", "-17179869184",
                "-34359738368", "-68719476736", "-137438953472", "-274877906944", "-549755813888", "-1099511627776", "-2199023255552", "-4398046511104", "-8796093022208", "-17592186044416", "-35184372088832", "-70368744177664", "-140737488355328", "-281474976710656", "-562949953421312", "-1125899906842624",
                "-2251799813685248", "-4503599627370496", "-9007199254740992", "-18014398509481984", "-36028797018963968", "-72057594037927936", "-144115188075855872", "-288230376151711744", "-576460752303423488", "-1152921504606846976", "-2305843009213693952", "-4611686018427387904", "-9223372036854775808", "0", "0", "0" },
              { "-16", "-32", "-64", "-128", "-256", "-512", "-1024", "-2048", "-4096", "-8192", "-16384", "-32768", "-65536", "-131072", "-262144", "-524288",
                "-1048576", "-2097152", "-4194304", "-8388608", "-16777216", "-33554432", "-67108864", "-134217728", "-268435456", "-536870912", "-1073741824", "-2147483648", "-4294967296", "-8589934592", "-17179869184", "-34359738368",
                "-68719476736", "-137438953472", "-274877906944", "-549755813888", "-1099511627776", "-2199023255552", "-4398046511104", "-8796093022208", "-17592186044416", "-35184372088832", "-70368744177664", "-140737488355328", "-281474976710656", "-562949953421312", "-1125899906842624", "-2251799813685248",
                "-4503599627370496", "-9007199254740992", "-18014398509481984", "-36028797018963968", "-72057594037927936", "-144115188075855872", "-288230376151711744", "-576460752303423488", "-1152921504606846976", "-2305843009213693952", "-4611686018427387904", "-9223372036854775808", "0", "0", "0", "0" },
              { "-32", "-64", "-128", "-256", "-512", "-1024", "-2048", "-4096", "-8192", "-16384", "-32768", "-65536", "-131072", "-262144", "-524288", "-1048576",
                "-2097152", "-4194304", "-8388608", "-16777216", "-33554432", "-67108864", "-134217728", "-268435456", "-536870912", "-1073741824", "-2147483648", "-4294967296", "-8589934592", "-17179869184", "-34359738368", "-68719476736",
                "-137438953472", "-274877906944", "-549755813888", "-1099511627776", "-2199023255552", "-4398046511104", "-8796093022208", "-17592186044416", "-35184372088832", "-70368744177664", "-140737488355328", "-281474976710656", "-562949953421312", "-1125899906842624", "-2251799813685248", "-4503599627370496",
                "-9007199254740992", "-18014398509481984", "-36028797018963968", "-72057594037927936", "-144115188075855872", "-288230376151711744", "-576460752303423488", "-1152921504606846976", "-2305843009213693952", "-4611686018427387904", "-9223372036854775808", "0", "0", "0", "0", "0" },
              { "-64", "-128", "-256", "-512", "-1024", "-2048", "-4096", "-8192", "-16384", "-32768", "-65536", "-131072", "-262144", "-524288", "-1048576", "-2097152",
                "-4194304", "-8388608", "-16777216", "-33554432", "-67108864", "-134217728", "-268435456", "-536870912", "-1073741824", "-2147483648", "-4294967296", "-8589934592", "-17179869184", "-34359738368", "-68719476736", "-137438953472",
                "-274877906944", "-549755813888", "-1099511627776", "-2199023255552", "-4398046511104", "-8796093022208", "-17592186044416", "-35184372088832", "-70368744177664", "-140737488355328", "-281474976710656", "-562949953421312", "-1125899906842624", "-2251799813685248", "-4503599627370496", "-9007199254740992",
                "-18014398509481984", "-36028797018963968", "-72057594037927936", "-144115188075855872", "-288230376151711744", "-576460752303423488", "-1152921504606846976", "-2305843009213693952", "-4611686018427387904", "-9223372036854775808", "0", "0", "0", "0", "0", "0" },
              { "-128", "-256", "-512", "-1024", "-2048", "-4096", "-8192", "-16384", "-32768", "-65536", "-131072", "-262144", "-524288", "-1048576", "-2097152", "-4194304",
                "-8388608", "-16777216", "-33554432", "-67108864", "-134217728", "-268435456", "-536870912", "-1073741824", "-2147483648", "-4294967296", "-8589934592", "-17179869184", "-34359738368", "-68719476736", "-137438953472", "-274877906944",
                "-549755813888", "-1099511627776", "-2199023255552", "-4398046511104", "-8796093022208", "-17592186044416", "-35184372088832", "-70368744177664", "-140737488355328", "-281474976710656", "-562949953421312", "-1125899906842624", "-2251799813685248", "-4503599627370496", "-9007199254740992", "-18014398509481984",
                "-36028797018963968", "-72057594037927936", "-144115188075855872", "-288230376151711744", "-576460752303423488", "-1152921504606846976", "-2305843009213693952", "-4611686018427387904", "-9223372036854775808", "0", "0", "0", "0", "0", "0" } };
        String[][] expectedDataHex =
            { { "FFFFFFFFFFFFFFFF", "FFFFFFFFFFFFFFFE", "FFFFFFFFFFFFFFFC", "FFFFFFFFFFFFFFF8", "FFFFFFFFFFFFFFF0", "FFFFFFFFFFFFFFE0", "FFFFFFFFFFFFFFC0", "FFFFFFFFFFFFFF80",
                "FFFFFFFFFFFFFF00", "FFFFFFFFFFFFFE00", "FFFFFFFFFFFFFC00", "FFFFFFFFFFFFF800", "FFFFFFFFFFFFF000", "FFFFFFFFFFFFE000", "FFFFFFFFFFFFC000", "FFFFFFFFFFFF8000",
                "FFFFFFFFFFFF0000", "FFFFFFFFFFFE0000", "FFFFFFFFFFFC0000", "FFFFFFFFFFF80000", "FFFFFFFFFFF00000", "FFFFFFFFFFE00000", "FFFFFFFFFFC00000", "FFFFFFFFFF800000",
                "FFFFFFFFFF000000", "FFFFFFFFFE000000", "FFFFFFFFFC000000", "FFFFFFFFF8000000", "FFFFFFFFF0000000", "FFFFFFFFE0000000", "FFFFFFFFC0000000", "FFFFFFFF80000000",
                "FFFFFFFF00000000", "FFFFFFFE00000000", "FFFFFFFC00000000", "FFFFFFF800000000", "FFFFFFF000000000", "FFFFFFE000000000", "FFFFFFC000000000", "FFFFFF8000000000",
                "FFFFFF0000000000", "FFFFFE0000000000", "FFFFFC0000000000", "FFFFF80000000000", "FFFFF00000000000", "FFFFE00000000000", "FFFFC00000000000", "FFFF800000000000",
                "FFFF000000000000", "FFFE000000000000", "FFFC000000000000", "FFF8000000000000", "FFF0000000000000", "FFE0000000000000", "FFC0000000000000", "FF80000000000000",
                "FF00000000000000", "FE00000000000000", "FC00000000000000", "F800000000000000", "F000000000000000", "E000000000000000", "C000000000000000", "8000000000000000" },
              { "FFFFFFFFFFFFFFFE", "FFFFFFFFFFFFFFFC", "FFFFFFFFFFFFFFF8", "FFFFFFFFFFFFFFF0", "FFFFFFFFFFFFFFE0", "FFFFFFFFFFFFFFC0", "FFFFFFFFFFFFFF80", "FFFFFFFFFFFFFF00",
                "FFFFFFFFFFFFFE00", "FFFFFFFFFFFFFC00", "FFFFFFFFFFFFF800", "FFFFFFFFFFFFF000", "FFFFFFFFFFFFE000", "FFFFFFFFFFFFC000", "FFFFFFFFFFFF8000", "FFFFFFFFFFFF0000",
                "FFFFFFFFFFFE0000", "FFFFFFFFFFFC0000", "FFFFFFFFFFF80000", "FFFFFFFFFFF00000", "FFFFFFFFFFE00000", "FFFFFFFFFFC00000", "FFFFFFFFFF800000", "FFFFFFFFFF000000",
                "FFFFFFFFFE000000", "FFFFFFFFFC000000", "FFFFFFFFF8000000", "FFFFFFFFF0000000", "FFFFFFFFE0000000", "FFFFFFFFC0000000", "FFFFFFFF80000000", "FFFFFFFF00000000",
                "FFFFFFFE00000000", "FFFFFFFC00000000", "FFFFFFF800000000", "FFFFFFF000000000", "FFFFFFE000000000", "FFFFFFC000000000", "FFFFFF8000000000", "FFFFFF0000000000",
                "FFFFFE0000000000", "FFFFFC0000000000", "FFFFF80000000000", "FFFFF00000000000", "FFFFE00000000000", "FFFFC00000000000", "FFFF800000000000", "FFFF000000000000",
                "FFFE000000000000", "FFFC000000000000", "FFF8000000000000", "FFF0000000000000", "FFE0000000000000", "FFC0000000000000", "FF80000000000000", "FF00000000000000",
                "FE00000000000000", "FC00000000000000", "F800000000000000", "F000000000000000", "E000000000000000", "C000000000000000", "8000000000000000", "0000000000000000" },
              { "FFFFFFFFFFFFFFFC", "FFFFFFFFFFFFFFF8", "FFFFFFFFFFFFFFF0", "FFFFFFFFFFFFFFE0", "FFFFFFFFFFFFFFC0", "FFFFFFFFFFFFFF80", "FFFFFFFFFFFFFF00", "FFFFFFFFFFFFFE00",
                "FFFFFFFFFFFFFC00", "FFFFFFFFFFFFF800", "FFFFFFFFFFFFF000", "FFFFFFFFFFFFE000", "FFFFFFFFFFFFC000", "FFFFFFFFFFFF8000", "FFFFFFFFFFFF0000", "FFFFFFFFFFFE0000",
                "FFFFFFFFFFFC0000", "FFFFFFFFFFF80000", "FFFFFFFFFFF00000", "FFFFFFFFFFE00000", "FFFFFFFFFFC00000", "FFFFFFFFFF800000", "FFFFFFFFFF000000", "FFFFFFFFFE000000",
                "FFFFFFFFFC000000", "FFFFFFFFF8000000", "FFFFFFFFF0000000", "FFFFFFFFE0000000", "FFFFFFFFC0000000", "FFFFFFFF80000000", "FFFFFFFF00000000", "FFFFFFFE00000000",
                "FFFFFFFC00000000", "FFFFFFF800000000", "FFFFFFF000000000", "FFFFFFE000000000", "FFFFFFC000000000", "FFFFFF8000000000", "FFFFFF0000000000", "FFFFFE0000000000",
                "FFFFFC0000000000", "FFFFF80000000000", "FFFFF00000000000", "FFFFE00000000000", "FFFFC00000000000", "FFFF800000000000", "FFFF000000000000", "FFFE000000000000",
                "FFFC000000000000", "FFF8000000000000", "FFF0000000000000", "FFE0000000000000", "FFC0000000000000", "FF80000000000000", "FF00000000000000", "FE00000000000000",
                "FC00000000000000", "F800000000000000", "F000000000000000", "E000000000000000", "C000000000000000", "8000000000000000", "0000000000000000", "0000000000000000" },
              { "FFFFFFFFFFFFFFF8", "FFFFFFFFFFFFFFF0", "FFFFFFFFFFFFFFE0", "FFFFFFFFFFFFFFC0", "FFFFFFFFFFFFFF80", "FFFFFFFFFFFFFF00", "FFFFFFFFFFFFFE00", "FFFFFFFFFFFFFC00",
                "FFFFFFFFFFFFF800", "FFFFFFFFFFFFF000", "FFFFFFFFFFFFE000", "FFFFFFFFFFFFC000", "FFFFFFFFFFFF8000", "FFFFFFFFFFFF0000", "FFFFFFFFFFFE0000", "FFFFFFFFFFFC0000",
                "FFFFFFFFFFF80000", "FFFFFFFFFFF00000", "FFFFFFFFFFE00000", "FFFFFFFFFFC00000", "FFFFFFFFFF800000", "FFFFFFFFFF000000", "FFFFFFFFFE000000", "FFFFFFFFFC000000",
                "FFFFFFFFF8000000", "FFFFFFFFF0000000", "FFFFFFFFE0000000", "FFFFFFFFC0000000", "FFFFFFFF80000000", "FFFFFFFF00000000", "FFFFFFFE00000000", "FFFFFFFC00000000",
                "FFFFFFF800000000", "FFFFFFF000000000", "FFFFFFE000000000", "FFFFFFC000000000", "FFFFFF8000000000", "FFFFFF0000000000", "FFFFFE0000000000", "FFFFFC0000000000",
                "FFFFF80000000000", "FFFFF00000000000", "FFFFE00000000000", "FFFFC00000000000", "FFFF800000000000", "FFFF000000000000", "FFFE000000000000", "FFFC000000000000",
                "FFF8000000000000", "FFF0000000000000", "FFE0000000000000", "FFC0000000000000", "FF80000000000000", "FF00000000000000", "FE00000000000000", "FC00000000000000",
                "F800000000000000", "F000000000000000", "E000000000000000", "C000000000000000", "8000000000000000", "0000000000000000", "0000000000000000", "0000000000000000" },
              { "FFFFFFFFFFFFFFF0", "FFFFFFFFFFFFFFE0", "FFFFFFFFFFFFFFC0", "FFFFFFFFFFFFFF80", "FFFFFFFFFFFFFF00", "FFFFFFFFFFFFFE00", "FFFFFFFFFFFFFC00", "FFFFFFFFFFFFF800",
                "FFFFFFFFFFFFF000", "FFFFFFFFFFFFE000", "FFFFFFFFFFFFC000", "FFFFFFFFFFFF8000", "FFFFFFFFFFFF0000", "FFFFFFFFFFFE0000", "FFFFFFFFFFFC0000", "FFFFFFFFFFF80000",
                "FFFFFFFFFFF00000", "FFFFFFFFFFE00000", "FFFFFFFFFFC00000", "FFFFFFFFFF800000", "FFFFFFFFFF000000", "FFFFFFFFFE000000", "FFFFFFFFFC000000", "FFFFFFFFF8000000",
                "FFFFFFFFF0000000", "FFFFFFFFE0000000", "FFFFFFFFC0000000", "FFFFFFFF80000000", "FFFFFFFF00000000", "FFFFFFFE00000000", "FFFFFFFC00000000", "FFFFFFF800000000",
                "FFFFFFF000000000", "FFFFFFE000000000", "FFFFFFC000000000", "FFFFFF8000000000", "FFFFFF0000000000", "FFFFFE0000000000", "FFFFFC0000000000", "FFFFF80000000000",
                "FFFFF00000000000", "FFFFE00000000000", "FFFFC00000000000", "FFFF800000000000", "FFFF000000000000", "FFFE000000000000", "FFFC000000000000", "FFF8000000000000",
                "FFF0000000000000", "FFE0000000000000", "FFC0000000000000", "FF80000000000000", "FF00000000000000", "FE00000000000000", "FC00000000000000", "F800000000000000",
                "F000000000000000", "E000000000000000", "C000000000000000", "8000000000000000", "0000000000000000", "0000000000000000", "0000000000000000", "0000000000000000" },
              { "FFFFFFFFFFFFFFE0", "FFFFFFFFFFFFFFC0", "FFFFFFFFFFFFFF80", "FFFFFFFFFFFFFF00", "FFFFFFFFFFFFFE00", "FFFFFFFFFFFFFC00", "FFFFFFFFFFFFF800", "FFFFFFFFFFFFF000",
                "FFFFFFFFFFFFE000", "FFFFFFFFFFFFC000", "FFFFFFFFFFFF8000", "FFFFFFFFFFFF0000", "FFFFFFFFFFFE0000", "FFFFFFFFFFFC0000", "FFFFFFFFFFF80000", "FFFFFFFFFFF00000",
                "FFFFFFFFFFE00000", "FFFFFFFFFFC00000", "FFFFFFFFFF800000", "FFFFFFFFFF000000", "FFFFFFFFFE000000", "FFFFFFFFFC000000", "FFFFFFFFF8000000", "FFFFFFFFF0000000",
                "FFFFFFFFE0000000", "FFFFFFFFC0000000", "FFFFFFFF80000000", "FFFFFFFF00000000", "FFFFFFFE00000000", "FFFFFFFC00000000", "FFFFFFF800000000", "FFFFFFF000000000",
                "FFFFFFE000000000", "FFFFFFC000000000", "FFFFFF8000000000", "FFFFFF0000000000", "FFFFFE0000000000", "FFFFFC0000000000", "FFFFF80000000000", "FFFFF00000000000",
                "FFFFE00000000000", "FFFFC00000000000", "FFFF800000000000", "FFFF000000000000", "FFFE000000000000", "FFFC000000000000", "FFF8000000000000", "FFF0000000000000",
                "FFE0000000000000", "FFC0000000000000", "FF80000000000000", "FF00000000000000", "FE00000000000000", "FC00000000000000", "F800000000000000", "F000000000000000",
                "E000000000000000", "C000000000000000", "8000000000000000", "0000000000000000", "0000000000000000", "0000000000000000", "0000000000000000", "0000000000000000" },
              { "FFFFFFFFFFFFFFC0", "FFFFFFFFFFFFFF80", "FFFFFFFFFFFFFF00", "FFFFFFFFFFFFFE00", "FFFFFFFFFFFFFC00", "FFFFFFFFFFFFF800", "FFFFFFFFFFFFF000", "FFFFFFFFFFFFE000",
                "FFFFFFFFFFFFC000", "FFFFFFFFFFFF8000", "FFFFFFFFFFFF0000", "FFFFFFFFFFFE0000", "FFFFFFFFFFFC0000", "FFFFFFFFFFF80000", "FFFFFFFFFFF00000", "FFFFFFFFFFE00000",
                "FFFFFFFFFFC00000", "FFFFFFFFFF800000", "FFFFFFFFFF000000", "FFFFFFFFFE000000", "FFFFFFFFFC000000", "FFFFFFFFF8000000", "FFFFFFFFF0000000", "FFFFFFFFE0000000",
                "FFFFFFFFC0000000", "FFFFFFFF80000000", "FFFFFFFF00000000", "FFFFFFFE00000000", "FFFFFFFC00000000", "FFFFFFF800000000", "FFFFFFF000000000", "FFFFFFE000000000",
                "FFFFFFC000000000", "FFFFFF8000000000", "FFFFFF0000000000", "FFFFFE0000000000", "FFFFFC0000000000", "FFFFF80000000000", "FFFFF00000000000", "FFFFE00000000000",
                "FFFFC00000000000", "FFFF800000000000", "FFFF000000000000", "FFFE000000000000", "FFFC000000000000", "FFF8000000000000", "FFF0000000000000", "FFE0000000000000",
                "FFC0000000000000", "FF80000000000000", "FF00000000000000", "FE00000000000000", "FC00000000000000", "F800000000000000", "F000000000000000", "E000000000000000",
                "C000000000000000", "8000000000000000", "0000000000000000", "0000000000000000", "0000000000000000", "0000000000000000", "0000000000000000", "0000000000000000" },
              { "FFFFFFFFFFFFFF80", "FFFFFFFFFFFFFF00", "FFFFFFFFFFFFFE00", "FFFFFFFFFFFFFC00", "FFFFFFFFFFFFF800", "FFFFFFFFFFFFF000", "FFFFFFFFFFFFE000", "FFFFFFFFFFFFC000",
                "FFFFFFFFFFFF8000", "FFFFFFFFFFFF0000", "FFFFFFFFFFFE0000", "FFFFFFFFFFFC0000", "FFFFFFFFFFF80000", "FFFFFFFFFFF00000", "FFFFFFFFFFE00000", "FFFFFFFFFFC00000",
                "FFFFFFFFFF800000", "FFFFFFFFFF000000", "FFFFFFFFFE000000", "FFFFFFFFFC000000", "FFFFFFFFF8000000", "FFFFFFFFF0000000", "FFFFFFFFE0000000", "FFFFFFFFC0000000",
                "FFFFFFFF80000000", "FFFFFFFF00000000", "FFFFFFFE00000000", "FFFFFFFC00000000", "FFFFFFF800000000", "FFFFFFF000000000", "FFFFFFE000000000", "FFFFFFC000000000",
                "FFFFFF8000000000", "FFFFFF0000000000", "FFFFFE0000000000", "FFFFFC0000000000", "FFFFF80000000000", "FFFFF00000000000", "FFFFE00000000000", "FFFFC00000000000",
                "FFFF800000000000", "FFFF000000000000", "FFFE000000000000", "FFFC000000000000", "FFF8000000000000", "FFF0000000000000", "FFE0000000000000", "FFC0000000000000",
                "FF80000000000000", "FF00000000000000", "FE00000000000000", "FC00000000000000", "F800000000000000", "F000000000000000", "E000000000000000", "C000000000000000",
                "8000000000000000", "0000000000000000", "0000000000000000", "0000000000000000", "0000000000000000", "0000000000000000", "0000000000000000", "0000000000000000" } };
        String[][] expectedDataBin =
            { { "11111111 11111111 11111111 11111111", "11111111 11111111 11111111 11111110", "11111111 11111111 11111111 11111100", "11111111 11111111 11111111 11111000", "11111111 11111111 11111111 11110000", "11111111 11111111 11111111 11100000", "11111111 11111111 11111111 11000000", "11111111 11111111 11111111 10000000",
                "11111111 11111111 11111111 00000000", "11111111 11111111 11111110 00000000", "11111111 11111111 11111100 00000000", "11111111 11111111 11111000 00000000", "11111111 11111111 11110000 00000000", "11111111 11111111 11100000 00000000", "11111111 11111111 11000000 00000000", "11111111 11111111 10000000 00000000",
                "11111111 11111111 00000000 00000000", "11111111 11111110 00000000 00000000", "11111111 11111100 00000000 00000000", "11111111 11111000 00000000 00000000", "11111111 11110000 00000000 00000000", "11111111 11100000 00000000 00000000", "11111111 11000000 00000000 00000000", "11111111 10000000 00000000 00000000",
                "11111111 00000000 00000000 00000000", "11111110 00000000 00000000 00000000", "11111100 00000000 00000000 00000000", "11111000 00000000 00000000 00000000", "11110000 00000000 00000000 00000000", "11100000 00000000 00000000 00000000", "11000000 00000000 00000000 00000000", "10000000 00000000 00000000 00000000" },
              { "11111111 11111111 11111111 11111110", "11111111 11111111 11111111 11111100", "11111111 11111111 11111111 11111000", "11111111 11111111 11111111 11110000", "11111111 11111111 11111111 11100000", "11111111 11111111 11111111 11000000", "11111111 11111111 11111111 10000000", "11111111 11111111 11111111 00000000",
                "11111111 11111111 11111110 00000000", "11111111 11111111 11111100 00000000", "11111111 11111111 11111000 00000000", "11111111 11111111 11110000 00000000", "11111111 11111111 11100000 00000000", "11111111 11111111 11000000 00000000", "11111111 11111111 10000000 00000000", "11111111 11111111 00000000 00000000",
                "11111111 11111110 00000000 00000000", "11111111 11111100 00000000 00000000", "11111111 11111000 00000000 00000000", "11111111 11110000 00000000 00000000", "11111111 11100000 00000000 00000000", "11111111 11000000 00000000 00000000", "11111111 10000000 00000000 00000000", "11111111 00000000 00000000 00000000",
                "11111110 00000000 00000000 00000000", "11111100 00000000 00000000 00000000", "11111000 00000000 00000000 00000000", "11110000 00000000 00000000 00000000", "11100000 00000000 00000000 00000000", "11000000 00000000 00000000 00000000", "10000000 00000000 00000000 00000000", "00000000 00000000 00000000 00000000" },
              { "11111111 11111111 11111111 11111100", "11111111 11111111 11111111 11111000", "11111111 11111111 11111111 11110000", "11111111 11111111 11111111 11100000", "11111111 11111111 11111111 11000000", "11111111 11111111 11111111 10000000", "11111111 11111111 11111111 00000000", "11111111 11111111 11111110 00000000",
                "11111111 11111111 11111100 00000000", "11111111 11111111 11111000 00000000", "11111111 11111111 11110000 00000000", "11111111 11111111 11100000 00000000", "11111111 11111111 11000000 00000000", "11111111 11111111 10000000 00000000", "11111111 11111111 00000000 00000000", "11111111 11111110 00000000 00000000",
                "11111111 11111100 00000000 00000000", "11111111 11111000 00000000 00000000", "11111111 11110000 00000000 00000000", "11111111 11100000 00000000 00000000", "11111111 11000000 00000000 00000000", "11111111 10000000 00000000 00000000", "11111111 00000000 00000000 00000000", "11111110 00000000 00000000 00000000",
                "11111100 00000000 00000000 00000000", "11111000 00000000 00000000 00000000", "11110000 00000000 00000000 00000000", "11100000 00000000 00000000 00000000", "11000000 00000000 00000000 00000000", "10000000 00000000 00000000 00000000", "00000000 00000000 00000000 00000000", "00000000 00000000 00000000 00000000" },
              { "11111111 11111111 11111111 11111000", "11111111 11111111 11111111 11110000", "11111111 11111111 11111111 11100000", "11111111 11111111 11111111 11000000", "11111111 11111111 11111111 10000000", "11111111 11111111 11111111 00000000", "11111111 11111111 11111110 00000000", "11111111 11111111 11111100 00000000",
                "11111111 11111111 11111000 00000000", "11111111 11111111 11110000 00000000", "11111111 11111111 11100000 00000000", "11111111 11111111 11000000 00000000", "11111111 11111111 10000000 00000000", "11111111 11111111 00000000 00000000", "11111111 11111110 00000000 00000000", "11111111 11111100 00000000 00000000",
                "11111111 11111000 00000000 00000000", "11111111 11110000 00000000 00000000", "11111111 11100000 00000000 00000000", "11111111 11000000 00000000 00000000", "11111111 10000000 00000000 00000000", "11111111 00000000 00000000 00000000", "11111110 00000000 00000000 00000000", "11111100 00000000 00000000 00000000",
                "11111000 00000000 00000000 00000000", "11110000 00000000 00000000 00000000", "11100000 00000000 00000000 00000000", "11000000 00000000 00000000 00000000", "10000000 00000000 00000000 00000000", "00000000 00000000 00000000 00000000", "00000000 00000000 00000000 00000000", "00000000 00000000 00000000 00000000" },
              { "11111111 11111111 11111111 11110000", "11111111 11111111 11111111 11100000", "11111111 11111111 11111111 11000000", "11111111 11111111 11111111 10000000", "11111111 11111111 11111111 00000000", "11111111 11111111 11111110 00000000", "11111111 11111111 11111100 00000000", "11111111 11111111 11111000 00000000",
                "11111111 11111111 11110000 00000000", "11111111 11111111 11100000 00000000", "11111111 11111111 11000000 00000000", "11111111 11111111 10000000 00000000", "11111111 11111111 00000000 00000000", "11111111 11111110 00000000 00000000", "11111111 11111100 00000000 00000000", "11111111 11111000 00000000 00000000",
                "11111111 11110000 00000000 00000000", "11111111 11100000 00000000 00000000", "11111111 11000000 00000000 00000000", "11111111 10000000 00000000 00000000", "11111111 00000000 00000000 00000000", "11111110 00000000 00000000 00000000", "11111100 00000000 00000000 00000000", "11111000 00000000 00000000 00000000",
                "11110000 00000000 00000000 00000000", "11100000 00000000 00000000 00000000", "11000000 00000000 00000000 00000000", "10000000 00000000 00000000 00000000", "00000000 00000000 00000000 00000000", "00000000 00000000 00000000 00000000", "00000000 00000000 00000000 00000000", "00000000 00000000 00000000 00000000" },
              { "11111111 11111111 11111111 11100000", "11111111 11111111 11111111 11000000", "11111111 11111111 11111111 10000000", "11111111 11111111 11111111 00000000", "11111111 11111111 11111110 00000000", "11111111 11111111 11111100 00000000", "11111111 11111111 11111000 00000000", "11111111 11111111 11110000 00000000",
                "11111111 11111111 11100000 00000000", "11111111 11111111 11000000 00000000", "11111111 11111111 10000000 00000000", "11111111 11111111 00000000 00000000", "11111111 11111110 00000000 00000000", "11111111 11111100 00000000 00000000", "11111111 11111000 00000000 00000000", "11111111 11110000 00000000 00000000",
                "11111111 11100000 00000000 00000000", "11111111 11000000 00000000 00000000", "11111111 10000000 00000000 00000000", "11111111 00000000 00000000 00000000", "11111110 00000000 00000000 00000000", "11111100 00000000 00000000 00000000", "11111000 00000000 00000000 00000000", "11110000 00000000 00000000 00000000",
                "11100000 00000000 00000000 00000000", "11000000 00000000 00000000 00000000", "10000000 00000000 00000000 00000000", "00000000 00000000 00000000 00000000", "00000000 00000000 00000000 00000000", "00000000 00000000 00000000 00000000", "00000000 00000000 00000000 00000000", "00000000 00000000 00000000 00000000" },
              { "11111111 11111111 11111111 11000000", "11111111 11111111 11111111 10000000", "11111111 11111111 11111111 00000000", "11111111 11111111 11111110 00000000", "11111111 11111111 11111100 00000000", "11111111 11111111 11111000 00000000", "11111111 11111111 11110000 00000000", "11111111 11111111 11100000 00000000",
                "11111111 11111111 11000000 00000000", "11111111 11111111 10000000 00000000", "11111111 11111111 00000000 00000000", "11111111 11111110 00000000 00000000", "11111111 11111100 00000000 00000000", "11111111 11111000 00000000 00000000", "11111111 11110000 00000000 00000000", "11111111 11100000 00000000 00000000",
                "11111111 11000000 00000000 00000000", "11111111 10000000 00000000 00000000", "11111111 00000000 00000000 00000000", "11111110 00000000 00000000 00000000", "11111100 00000000 00000000 00000000", "11111000 00000000 00000000 00000000", "11110000 00000000 00000000 00000000", "11100000 00000000 00000000 00000000",
                "11000000 00000000 00000000 00000000", "10000000 00000000 00000000 00000000", "00000000 00000000 00000000 00000000", "00000000 00000000 00000000 00000000", "00000000 00000000 00000000 00000000", "00000000 00000000 00000000 00000000", "00000000 00000000 00000000 00000000", "00000000 00000000 00000000 00000000" },
              { "11111111 11111111 11111111 10000000", "11111111 11111111 11111111 00000000", "11111111 11111111 11111110 00000000", "11111111 11111111 11111100 00000000", "11111111 11111111 11111000 00000000", "11111111 11111111 11110000 00000000", "11111111 11111111 11100000 00000000", "11111111 11111111 11000000 00000000",
                "11111111 11111111 10000000 00000000", "11111111 11111111 00000000 00000000", "11111111 11111110 00000000 00000000", "11111111 11111100 00000000 00000000", "11111111 11111000 00000000 00000000", "11111111 11110000 00000000 00000000", "11111111 11100000 00000000 00000000", "11111111 11000000 00000000 00000000",
                "11111111 10000000 00000000 00000000", "11111111 00000000 00000000 00000000", "11111110 00000000 00000000 00000000", "11111100 00000000 00000000 00000000", "11111000 00000000 00000000 00000000", "11110000 00000000 00000000 00000000", "11100000 00000000 00000000 00000000", "11000000 00000000 00000000 00000000",
                "10000000 00000000 00000000 00000000", "00000000 00000000 00000000 00000000", "00000000 00000000 00000000 00000000", "00000000 00000000 00000000 00000000", "00000000 00000000 00000000 00000000", "00000000 00000000 00000000 00000000", "00000000 00000000 00000000 00000000", "00000000 00000000 00000000 00000000" } };
        String[][] expectedDataSci =
            { { "-1.0E0", "-2.0E0", "-4.0E0", "-8.0E0", "-1.6E1", "-3.2E1", "-6.4E1", "-1.28E2", "-2.56E2", "-5.12E2", "-1.024E3", "-2.048E3", "-4.096E3", "-8.192E3", "-1.6384E4", "-3.2768E4", "-6.5536E4", "-1.31072E5", "-2.62144E5", "-5.24288E5", "-1.048576E6", "-2.097152E6", "-4.194304E6", "-8.388608E6", "-1.6777216E7", "-3.3554432E7", "-6.7108864E7", "-1.3421773E8", "-2.6843546E8", "-5.3687091E8", "-1.0737418E9", "-2.1474836E9" },
              { "-2.0E0", "-4.0E0", "-8.0E0", "-1.6E1", "-3.2E1", "-6.4E1", "-1.28E2", "-2.56E2", "-5.12E2", "-1.024E3", "-2.048E3", "-4.096E3", "-8.192E3", "-1.6384E4", "-3.2768E4", "-6.5536E4", "-1.31072E5", "-2.62144E5", "-5.24288E5", "-1.048576E6", "-2.097152E6", "-4.194304E6", "-8.388608E6", "-1.6777216E7", "-3.3554432E7", "-6.7108864E7", "-1.3421773E8", "-2.6843546E8", "-5.3687091E8", "-1.0737418E9", "-2.1474836E9", "0.0E0" },
              { "-4.0E0", "-8.0E0", "-1.6E1", "-3.2E1", "-6.4E1", "-1.28E2", "-2.56E2", "-5.12E2", "-1.024E3", "-2.048E3", "-4.096E3", "-8.192E3", "-1.6384E4", "-3.2768E4", "-6.5536E4", "-1.31072E5", "-2.62144E5", "-5.24288E5", "-1.048576E6", "-2.097152E6", "-4.194304E6", "-8.388608E6", "-1.6777216E7", "-3.3554432E7", "-6.7108864E7", "-1.3421773E8", "-2.6843546E8", "-5.3687091E8", "-1.0737418E9", "-2.1474836E9", "0.0E0", "0.0E0" },
              { "-8.0E0", "-1.6E1", "-3.2E1", "-6.4E1", "-1.28E2", "-2.56E2", "-5.12E2", "-1.024E3", "-2.048E3", "-4.096E3", "-8.192E3", "-1.6384E4", "-3.2768E4", "-6.5536E4", "-1.31072E5", "-2.62144E5", "-5.24288E5", "-1.048576E6", "-2.097152E6", "-4.194304E6", "-8.388608E6", "-1.6777216E7", "-3.3554432E7", "-6.7108864E7", "-1.3421773E8", "-2.6843546E8", "-5.3687091E8", "-1.0737418E9", "-2.1474836E9", "0.0E0", "0.0E0", "0.0E0" },
              { "-1.6E1", "-3.2E1", "-6.4E1", "-1.28E2", "-2.56E2", "-5.12E2", "-1.024E3", "-2.048E3", "-4.096E3", "-8.192E3", "-1.6384E4", "-3.2768E4", "-6.5536E4", "-1.31072E5", "-2.62144E5", "-5.24288E5", "-1.048576E6", "-2.097152E6", "-4.194304E6", "-8.388608E6", "-1.6777216E7", "-3.3554432E7", "-6.7108864E7", "-1.3421773E8", "-2.6843546E8", "-5.3687091E8", "-1.0737418E9", "-2.1474836E9", "0.0E0", "0.0E0", "0.0E0", "0.0E0" },
              { "-3.2E1", "-6.4E1", "-1.28E2", "-2.56E2", "-5.12E2", "-1.024E3", "-2.048E3", "-4.096E3", "-8.192E3", "-1.6384E4", "-3.2768E4", "-6.5536E4", "-1.31072E5", "-2.62144E5", "-5.24288E5", "-1.048576E6", "-2.097152E6", "-4.194304E6", "-8.388608E6", "-1.6777216E7", "-3.3554432E7", "-6.7108864E7", "-1.3421773E8", "-2.6843546E8", "-5.3687091E8", "-1.0737418E9", "-2.1474836E9", "0.0E0", "0.0E0", "0.0E0", "0.0E0", "0.0E0" },
              { "-6.4E1", "-1.28E2", "-2.56E2", "-5.12E2", "-1.024E3", "-2.048E3", "-4.096E3", "-8.192E3", "-1.6384E4", "-3.2768E4", "-6.5536E4", "-1.31072E5", "-2.62144E5", "-5.24288E5", "-1.048576E6", "-2.097152E6", "-4.194304E6", "-8.388608E6", "-1.6777216E7", "-3.3554432E7", "-6.7108864E7", "-1.3421773E8", "-2.6843546E8", "-5.3687091E8", "-1.0737418E9", "-2.1474836E9", "0.0E0", "0.0E0", "0.0E0", "0.0E0", "0.0E0", "0.0E0" },
              { "-1.28E2", "-2.56E2", "-5.12E2", "-1.024E3", "-2.048E3", "-4.096E3", "-8.192E3", "-1.6384E4", "-3.2768E4", "-6.5536E4", "-1.31072E5", "-2.62144E5", "-5.24288E5", "-1.048576E6", "-2.097152E6", "-4.194304E6", "-8.388608E6", "-1.6777216E7", "-3.3554432E7", "-6.7108864E7", "-1.3421773E8", "-2.6843546E8", "-5.3687091E8", "-1.0737418E9", "-2.1474836E9", "0.0E0", "0.0E0", "0.0E0", "0.0E0", "0.0E0", "0.0E0", "0.0E0" } };
        SWTBotShell tableShell = null;
        String filename = "tintsize.h5";
        String datasetName = "/DS64BITS";
        File hdf_file = openFile(filename, FILE_MODE.READ_ONLY);

        try {
            SWTBotTree filetree = bot.tree();

            checkFileTree(filetree, "checkHDF5GroupDS64()", 10, filename);

            // Open dataset 'DS64BITS'
            tableShell = openDataObject(filetree, filename, datasetName);
            final SWTBotNatTable dataTable = getNatTable(tableShell);

            testAllTableLocations(dataTable, expectedData, "checkHDF5GroupDS64()");

            tableShell.bot().menu("Show Hexadecimal").click();
            testAllTableLocations(dataTable, expectedDataHex, "checkHDF5GroupDS64()");

            tableShell.bot().menu("Show Binary").click();
            testAllTableLocations(dataTable, expectedDataBin, "checkHDF5GroupDS64()");

            tableShell.bot().menu("Show Scientific Notation").click();
            testAllTableLocations(dataTable, expectedDataSci, "checkHDF5GroupDS64()");
        }
        catch (Exception ex) {
            ex.printStackTrace();
            fail(ex.getMessage());
        }
        catch (AssertionError ae) {
            ae.printStackTrace();
            fail(ae.getMessage());
        }
        finally {
            if(tableShell != null && tableShell.isOpen()) {
                tableShell.bot().menu("Close").click();
                bot.waitUntil(Conditions.shellCloses(tableShell));
            }

            try {
                closeFile(hdf_file, false);
            }
            catch (Exception ex) {
                ex.printStackTrace();
            }
        }
    }

    @Test
    public void checkHDF5GroupDU64() {
        String filename = "tintsize.h5";
        String datasetname = "DU64BITS";
        SWTBotShell tableShell = null;
        File hdf_file = openFile(filename, FILE_MODE.READ_ONLY);

        try {
            String val;
            SWTBotTree filetree = bot.tree();
            SWTBotTreeItem[] items = filetree.getAllItems();

            assertTrue(constructWrongValueMessage("checkHDF5GroupDU64()", "filetree wrong row count", "10", String.valueOf(filetree.visibleRowCount())),
                    filetree.visibleRowCount()==10);
            assertTrue("checkHDF5GroupDU64() filetree is missing file '" + filename + "'", items[0].getText().compareTo(filename)==0);
            assertTrue("checkHDF5GroupDU64() filetree is missing dataset '" + datasetname + "'", items[0].getNode(7).getText().compareTo(datasetname)==0);

            // Open dataset 'DU64BITS'
            items[0].getNode(7).click();
            items[0].getNode(7).contextMenu("Open").click();
            org.hamcrest.Matcher<Shell> shellMatcher = WithRegex.withRegex(datasetname + ".*at.*\\[.*in.*\\]");
            bot.waitUntil(Conditions.waitForShell(shellMatcher));

            tableShell = bot.shells()[1];
            tableShell.activate();
            bot.waitUntil(Conditions.shellIsActive(tableShell.getText()));

            final SWTBotNatTable table = new SWTBotNatTable(tableShell.bot().widget(widgetOfType(NatTable.class)));

            tableShell.bot().menu("Show Hexadecimal").click();

            table.click(1, 1);
            val = tableShell.bot().text(0).getText();
            assertTrue(constructWrongValueMessage("checkHDF5GroupDU64()", "wrong data", "FFFFFFFFFFFFFFFF", val),
                    val.equals("FFFFFFFFFFFFFFFF"));

            table.click(8, 1);
            val = tableShell.bot().text(0).getText();
            assertTrue(constructWrongValueMessage("checkHDF5GroupDU64()", "wrong data", "FFFFFFFFFFFFFF80", val),
                    val.equals("FFFFFFFFFFFFFF80"));

            table.click(8, 8);
            val = tableShell.bot().text(0).getText();
            assertTrue(constructWrongValueMessage("checkHDF5GroupDU64()", "wrong data", "FFFFFFFFFFFFC000", val),
                    val.equals("FFFFFFFFFFFFC000"));

            tableShell.bot().menu("Show Binary").click();

            table.click(1, 1);
            val = tableShell.bot().text(0).getText();
            assertTrue(constructWrongValueMessage("checkHDF5GroupDU64()", "wrong data",
                    "11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111", val),
                    val.equals("11111111 11111111 11111111 11111111 11111111 11111111 11111111 11111111"));

            table.click(8, 1);
            val = tableShell.bot().text(0).getText();
            assertTrue(constructWrongValueMessage("checkHDF5GroupDU64()", "wrong data",
                    "11111111 11111111 11111111 11111111 11111111 11111111 11111111 10000000", val),
                    val.equals("11111111 11111111 11111111 11111111 11111111 11111111 11111111 10000000"));

            table.click(8, 8);
            val = tableShell.bot().text(0).getText();
            assertTrue(constructWrongValueMessage("checkHDF5GroupDU64()", "wrong data",
                    "11111111 11111111 11111111 11111111 11111111 11111111 11000000 00000000", val),
                    val.equals("11111111 11111111 11111111 11111111 11111111 11111111 11000000 00000000"));

            // Reset view to normal integer display
            tableShell.bot().menu("Show Binary").click();

            table.click(1, 1);
            val = tableShell.bot().text(0).getText();
            assertTrue(constructWrongValueMessage("checkHDF5GroupDU64()", "wrong data", "18446744073709551615", val),
                    val.equals("18446744073709551615"));

            table.click(8, 1);
            val = tableShell.bot().text(0).getText();
            assertTrue(constructWrongValueMessage("checkHDF5GroupDU64()", "wrong data", "18446744073709551488", val),
                    val.equals("18446744073709551488"));

            table.click(8, 8);
            val = tableShell.bot().text(0).getText();
            assertTrue(constructWrongValueMessage("checkHDF5GroupDU64()", "wrong data", "18446744073709535232", val),
                    val.equals("18446744073709535232"));

            tableShell.bot().menu("Close").click();
            bot.waitUntil(Conditions.shellCloses(tableShell));
        }
        catch (Exception ex) {
            ex.printStackTrace();
            fail(ex.getMessage());
        }
        catch (AssertionError ae) {
            ae.printStackTrace();
            fail(ae.getMessage());
        }
        finally {
            if(tableShell != null && tableShell.isOpen()) {
                tableShell.bot().menu("Close").click();
                bot.waitUntil(Conditions.shellCloses(tableShell));
            }

            try {
                closeFile(hdf_file, false);
            }
            catch (Exception ex) {
                ex.printStackTrace();
            }
        }
    }
}
